{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/theme/style.ts?c7f2","webpack:///./src/_packages/@lunit/insight-viewer/__fixtures__/circle.ts","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/Basic.tsx?2092","webpack:///./src/_packages/@lunit/insight-viewer/components/CircleViewer.tsx?92ac","webpack:///./src/_packages/@lunit/insight-viewer/__fixtures__/circle.ts?2733","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/CustomStyle.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/CustomStyle.tsx?ef4f","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer.mdx"],"names":["labelFunction","contour","id","initialContours","polygon","label","dataAttrs","installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","contours","focusedContour","focusContour","useContour","mode","options","resetTime","element","setElement","interactions","ref","length","hover","onFocus","CustomStyleViewer","styled","CircleViewer","layoutProps","MDXContent","components","props","mdxType","parentName","to","example","source","api","component","isMDXComponent"],"mappings":"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","file":"10.45b5470106c6da231db7.js","sourcesContent":["export default \"import { ColorProperty } from 'csstype';\\nimport { css } from 'styled-components';\\n\\nexport interface InsightViewerCSSProperties {\\n  '--contour-viewer-color'?: ColorProperty;\\n  '--contour-viewer-focused-color'?: ColorProperty;\\n  '--contour-viewer-stroke-width'?: ColorProperty;\\n  '--contour-viewer-focused-stroke-width'?: ColorProperty;\\n  '--contour-viewer-fill-color'?: ColorProperty;\\n  '--contour-viewer-focused-fill-color'?: ColorProperty;\\n\\n  '--contour-drawer-color'?: ColorProperty;\\n  '--contour-drawer-stroke-width'?: ColorProperty;\\n  '--contour-drawer-fill-color'?: ColorProperty;\\n\\n  '--pin-color'?: ColorProperty;\\n  '--pin-focused-color'?: ColorProperty;\\n}\\n\\nexport const blockStyle = css`\\n  --contour-viewer-color: #ffffff;\\n  --contour-viewer-focused-color: rgb(255, 194, 17);\\n  --contour-viewer-stroke-width: 3px;\\n  --contour-viewer-focused-stroke-width: 6px;\\n  --contour-viewer-fill-color: rgba(0, 0, 0, 0.2);\\n  --contour-viewer-focused-fill-color: rgba(0, 0, 0, 0.4);\\n\\n  --contour-drawer-color: rgb(255, 224, 0);\\n  --contour-drawer-stroke-width: 4px;\\n  --contour-drawer-fill-color: rgba(255, 224, 0, 0.2);\\n\\n  --pin-color: #ffffff;\\n  --pin-focused-color: rgb(255, 194, 17);\\n`;\\n\\nexport const globalStyle = css`\\n  :root {\\n    ${blockStyle};\\n  }\\n`;\\n\"","import { Contour } from '@lunit/insight-viewer';\n\nexport function labelFunction(contour: Contour): string {\n  return `Annotation(${contour.id})`;\n}\n\nexport const initialContours: Omit<Contour, 'id'>[] = [\n  {\n    polygon: [\n      [340.48, 232.95999999999998],\n      [265.38666666666666, 232.10666666666668],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [173.2266666666667, 381.44],\n      [276.48, 400.21333333333337],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n  {\n    polygon: [\n      [419.84000000000003, 448.85333333333335],\n      [361.81333333333333, 407.04],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [174.93333333333334, 88.74666666666668],\n      [215.89333333333335, 129.70666666666665],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n];\n","import {\n  CircleHover,\n  CircleViewer,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport { initialContours } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, focusContour } = useContour({\n    mode: 'circle',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <>\n              <CircleViewer\n                width={width}\n                height={height}\n                contours={contours}\n                focusedContour={focusedContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n              <CircleHover\n                hover={element}\n                width={width}\n                height={height}\n                contours={contours}\n                onFocus={focusContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n            </>\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CircleHover,\\n  CircleViewer,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport { initialContours } from '../../../__fixtures__/circle';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data\\n  const { contours, focusedContour, focusContour } = useContour({\\n    mode: 'circle',\\n    initialContours,\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\\n          <CornerstoneViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            interactions={interactions}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && contours.length > 0 && cornerstoneRenderData && (\\n            <>\\n              <CircleViewer\\n                width={width}\\n                height={height}\\n                contours={contours}\\n                focusedContour={focusedContour}\\n                cornerstoneRenderData={cornerstoneRenderData}\\n              />\\n              <CircleHover\\n                hover={element}\\n                width={width}\\n                height={height}\\n                contours={contours}\\n                onFocus={focusContour}\\n                cornerstoneRenderData={cornerstoneRenderData}\\n              />\\n            </>\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","export default \"import React, { Component, createRef, CSSProperties, Fragment, RefObject } from 'react';\\nimport styled from 'styled-components';\\nimport { InsightViewerGuestProps } from '../hooks/useInsightViewerSync';\\nimport { Contour, Point } from '../types';\\n\\nexport interface CircleViewerProps<T extends Contour> extends InsightViewerGuestProps {\\n  width: number;\\n  height: number;\\n\\n  /** Contour 데이터를 상속받은 Annotation 데이터 */\\n  contours: T[];\\n\\n  /** Mouse Over 등 User Interaction에 의해서 Focus 된 Contour */\\n  focusedContour: T | null;\\n\\n  /** <svg className={}> */\\n  className?: string;\\n\\n  /** <svg style={}> */\\n  style?: CSSProperties;\\n\\n  /**\\n   * Line에 외곽을 그려준다\\n   * Line을 두 개 그려서 border를 표현하기 때문에,성능에 민감한 상황인 경우 비활성 시킬 수 있다.\\n   */\\n  border?: boolean;\\n}\\n\\nfunction toLocal(element: HTMLElement, polygon: Point[]): { cx: number; cy: number; r: number } {\\n  const { x: x1, y: y1 } = cornerstone.pixelToCanvas(element, { x: polygon[0][0], y: polygon[0][1] });\\n  const { x: x2, y: y2 } = cornerstone.pixelToCanvas(element, { x: polygon[1][0], y: polygon[1][1] });\\n  const r: number = Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));\\n\\n  return {\\n    cx: x1,\\n    cy: y1,\\n    r,\\n  };\\n}\\n\\nexport class CircleViewerBase<T extends Contour> extends Component<CircleViewerProps<T>, {}> {\\n  static defaultProps: Pick<CircleViewerProps<Contour>, 'border'> = {\\n    border: true,\\n  };\\n\\n  private svgRef: RefObject<SVGSVGElement> = createRef();\\n\\n  render() {\\n    const { cornerstoneRenderData, contours, focusedContour } = this.props;\\n\\n    return (\\n      <svg\\n        ref={this.svgRef}\\n        className={this.props.className}\\n        style={this.props.style}\\n        width={this.props.width}\\n        height={this.props.height}\\n      >\\n        {contours.length > 0 &&\\n          cornerstoneRenderData &&\\n          cornerstoneRenderData.element &&\\n          contours.map(contour => {\\n            const { cx, cy, r } = toLocal(cornerstoneRenderData.element, contour.polygon);\\n            const focused: boolean = contour === focusedContour;\\n            const dataAttrs: { [attr: string]: string } = contour.dataAttrs || {};\\n\\n            return (\\n              <Fragment key={'circle' + contour.id}>\\n                {this.props.border === true && (\\n                  <circle\\n                    {...dataAttrs}\\n                    data-border=\\\"border\\\"\\n                    data-id={contour.id}\\n                    data-focused={focused || undefined}\\n                    cx={cx}\\n                    cy={cy}\\n                    r={r}\\n                  />\\n                )}\\n                <circle {...dataAttrs} data-id={contour.id} data-focused={focused || undefined} cx={cx} cy={cy} r={r} />\\n                {this.props.border === true && (\\n                  <text\\n                    {...dataAttrs}\\n                    data-border=\\\"border\\\"\\n                    data-id={contour.id}\\n                    data-focused={focused || undefined}\\n                    fontSize={14 * Math.max(1, cornerstoneRenderData.viewport.scale)}\\n                    x={cx}\\n                    y={cy}\\n                  >\\n                    {contour.label\\n                      ? typeof contour.label === 'function'\\n                        ? contour.label(contour)\\n                        : contour.label\\n                      : contour.id}\\n                  </text>\\n                )}\\n                <text\\n                  {...dataAttrs}\\n                  data-id={contour.id}\\n                  data-focused={focused || undefined}\\n                  fontSize={14 * Math.max(1, cornerstoneRenderData.viewport.scale)}\\n                  x={cx}\\n                  y={cy}\\n                >\\n                  {contour.label\\n                    ? typeof contour.label === 'function'\\n                      ? contour.label(contour)\\n                      : contour.label\\n                    : contour.id}\\n                </text>\\n              </Fragment>\\n            );\\n          })}\\n      </svg>\\n    );\\n  }\\n}\\n\\n/* eslint-disable @typescript-eslint/no-explicit-any */\\nexport const CircleViewer: new <T extends Contour>() => CircleViewerBase<T> = styled(CircleViewerBase)`\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  pointer-events: none;\\n  user-select: none;\\n\\n  --color: #ffffff;\\n  --focused-color: rgb(255, 194, 17);\\n  --stroke-width: 3px;\\n  --focused-stroke-width: 6px;\\n  --fill-color: rgba(0, 0, 0, 0.2);\\n  --focused-fill-color: rgba(0, 0, 0, 0.4);\\n\\n  > circle {\\n    stroke-width: var(--contour-viewer-stroke-width, var(--stroke-width));\\n    stroke: var(--contour-viewer-color, var(--color));\\n    fill: var(--contour-viewer-fill-color, var(--fill-color));\\n    transition: stroke 120ms ease-out, stroke-width 120ms ease-out;\\n\\n    &[data-focused] {\\n      stroke-width: var(--contour-viewer-focused-stroke-width, var(--focused-stroke-width));\\n      stroke: var(--contour-viewer-focused-color, var(--focused-color));\\n      fill: var(--contour-viewer-focused-fill-color, var(--focused-fill-color));\\n    }\\n\\n    &[data-border] {\\n      stroke-width: calc(var(--contour-viewer-stroke-width, var(--stroke-width)) + 2px);\\n      stroke: #000000;\\n      fill: transparent;\\n\\n      &[data-focused] {\\n        stroke-width: calc(var(--contour-viewer-focused-stroke-width, var(--focused-stroke-width)) + 2px);\\n        stroke: #000000;\\n      }\\n    }\\n  }\\n\\n  > text {\\n    fill: var(--contour-viewer-color, var(--color));\\n    font-family: proximanova, noto_sans, sans-serif;\\n    font-weight: 600;\\n    text-anchor: middle;\\n    dominant-baseline: central;\\n    transition: fill 120ms ease-out, stroke-width 120ms ease-out;\\n\\n    &[data-focused] {\\n      fill: var(--contour-viewer-focused-color, var(--focused-color));\\n    }\\n\\n    &[data-border] {\\n      stroke-width: 4px;\\n      stroke: #000000;\\n      fill: transparent;\\n    }\\n  }\\n` as any;\\n\\n/**\\n * @deprecated use CircleViewer instead\\n */\\nexport const UserCircleViewer = CircleViewer;\\n\"","export default \"import { Contour } from '@lunit/insight-viewer';\\n\\nexport function labelFunction(contour: Contour): string {\\n  return `Annotation(${contour.id})`;\\n}\\n\\nexport const initialContours: Omit<Contour, 'id'>[] = [\\n  {\\n    polygon: [\\n      [340.48, 232.95999999999998],\\n      [265.38666666666666, 232.10666666666668],\\n    ],\\n    label: labelFunction,\\n    dataAttrs: {\\n      'data-category': 'normal',\\n    },\\n  },\\n  {\\n    polygon: [\\n      [173.2266666666667, 381.44],\\n      [276.48, 400.21333333333337],\\n    ],\\n    label: labelFunction,\\n    dataAttrs: {\\n      'data-category': 'abnormal',\\n    },\\n  },\\n  {\\n    polygon: [\\n      [419.84000000000003, 448.85333333333335],\\n      [361.81333333333333, 407.04],\\n    ],\\n    label: labelFunction,\\n    dataAttrs: {\\n      'data-category': 'normal',\\n    },\\n  },\\n  {\\n    polygon: [\\n      [174.93333333333334, 88.74666666666668],\\n      [215.89333333333335, 129.70666666666665],\\n    ],\\n    label: labelFunction,\\n    dataAttrs: {\\n      'data-category': 'abnormal',\\n    },\\n  },\\n];\\n\"","import {\n  CircleHover,\n  CircleViewer,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { initialContours } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst CustomStyleViewer = styled(CircleViewer)`\n  --contour-viewer-stroke-width: 10px;\n  --contour-viewer-focused-stroke-width: 20px;\n\n  --contour-viewer-color: blue;\n  --contour-viewer-focused-color: red;\n  --contour-viewer-fill-color: rgba(0, 0, 255, 0.3);\n  --contour-viewer-focused-fill-color: rgba(255, 0, 0, 0.3);\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, focusContour } = useContour({\n    mode: 'circle',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <>\n              <CustomStyleViewer\n                width={width}\n                height={height}\n                contours={contours}\n                focusedContour={focusedContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n              <CircleHover\n                hover={element}\n                width={width}\n                height={height}\n                contours={contours}\n                onFocus={focusContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n            </>\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CircleHover,\\n  CircleViewer,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport styled from 'styled-components';\\nimport { initialContours } from '../../../__fixtures__/circle';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nconst CustomStyleViewer = styled(CircleViewer)`\\n  --contour-viewer-stroke-width: 10px;\\n  --contour-viewer-focused-stroke-width: 20px;\\n\\n  --contour-viewer-color: blue;\\n  --contour-viewer-focused-color: red;\\n  --contour-viewer-fill-color: rgba(0, 0, 255, 0.3);\\n  --contour-viewer-focused-fill-color: rgba(255, 0, 0, 0.3);\\n`;\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data\\n  const { contours, focusedContour, focusContour } = useContour({\\n    mode: 'circle',\\n    initialContours,\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\\n          <CornerstoneViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            interactions={interactions}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && contours.length > 0 && cornerstoneRenderData && (\\n            <>\\n              <CustomStyleViewer\\n                width={width}\\n                height={height}\\n                contours={contours}\\n                focusedContour={focusedContour}\\n                cornerstoneRenderData={cornerstoneRenderData}\\n              />\\n              <CircleHover\\n                hover={element}\\n                width={width}\\n                height={height}\\n                contours={contours}\\n                onFocus={focusContour}\\n                cornerstoneRenderData={cornerstoneRenderData}\\n              />\\n            </>\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<CircleViewer>`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 마찬가지로 `}<inlineCode parentName=\"p\">{`Contour`}</inlineCode>{` 데이터를 화면에 그린다.`}</p>\n    <Link to=\"/insight-viewer/contour\" mdxType=\"Link\">`Contour` 데이터를 `Circle` Type으로 사용한다.</Link>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/components/CircleViewer')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <p>{`아래 모든 예제들은 이 Data를 사용하게 된다.`}</p>\n    <Example example={source('../../__fixtures__/circle')} mdxType=\"Example\" />\n    <p><inlineCode parentName=\"p\">{`Contour`}</inlineCode>{` 데이터를 넣어주면 화면에 Annotation을 그린다.`}</p>\n    <Example example={component('./CircleViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`Styling`}</h1>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 마찬가지로 CSS Variable을 통해서 색상을 변경할 수 있다.`}</p>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 같은 `}<inlineCode parentName=\"p\">{`--contour-viewer-*`}</inlineCode>{`의 이름을 가진 항목들에 영향을 받는다.`}</p>\n    <Example example={source('../../theme/style')} mdxType=\"Example\" />\n    <Example example={component('./CircleViewer/CustomStyle')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <p><inlineCode parentName=\"p\">{`Contour.dataAttrs`}</inlineCode>{`나 배열 순서에 따른 Styling은 `}<inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 동일하다. `}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{670:function(e,n,t){"use strict";t.r(n),n.default="import { ColorProperty } from 'csstype';\nimport { css } from 'styled-components';\n\nexport interface InsightViewerCSSProperties {\n  '--contour-viewer-color'?: ColorProperty;\n  '--contour-viewer-focused-color'?: ColorProperty;\n  '--contour-viewer-stroke-width'?: ColorProperty;\n  '--contour-viewer-focused-stroke-width'?: ColorProperty;\n  '--contour-viewer-fill-color'?: ColorProperty;\n  '--contour-viewer-focused-fill-color'?: ColorProperty;\n\n  '--contour-drawer-color'?: ColorProperty;\n  '--contour-drawer-stroke-width'?: ColorProperty;\n  '--contour-drawer-fill-color'?: ColorProperty;\n\n  '--pin-color'?: ColorProperty;\n  '--pin-focused-color'?: ColorProperty;\n}\n\nexport const blockStyle = css`\n  --contour-viewer-color: #ffffff;\n  --contour-viewer-focused-color: rgb(255, 194, 17);\n  --contour-viewer-stroke-width: 3px;\n  --contour-viewer-focused-stroke-width: 6px;\n  --contour-viewer-fill-color: rgba(0, 0, 0, 0.2);\n  --contour-viewer-focused-fill-color: rgba(0, 0, 0, 0.4);\n\n  --contour-drawer-color: rgb(255, 224, 0);\n  --contour-drawer-stroke-width: 4px;\n  --contour-drawer-fill-color: rgba(255, 224, 0, 0.2);\n\n  --pin-color: #ffffff;\n  --pin-focused-color: rgb(255, 194, 17);\n`;\n\nexport const globalStyle = css`\n  :root {\n    ${blockStyle};\n  }\n`;\n"},673:function(e,n,t){"use strict";function o(e){return`Annotation(${e.id})`}t.d(n,"b",(function(){return o})),t.d(n,"a",(function(){return r}));const r=[{polygon:[[340.48,232.95999999999998],[265.38666666666666,232.10666666666668]],label:o,dataAttrs:{"data-category":"normal"}},{polygon:[[173.2266666666667,381.44],[276.48,400.21333333333337]],label:o,dataAttrs:{"data-category":"abnormal"}},{polygon:[[419.84000000000003,448.85333333333335],[361.81333333333333,407.04]],label:o,dataAttrs:{"data-category":"normal"}},{polygon:[[174.93333333333334,88.74666666666668],[215.89333333333335,129.70666666666665]],label:o,dataAttrs:{"data-category":"abnormal"}}]},694:function(e,n,t){"use strict";t.r(n);var o=t(666),r=t(0),i=t.n(r),a=t(673);Object(o.installWADOImageLoader)();const l={width:[600,400,1e3],height:[700,400,1e3],control:["pan",["none","pan","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]};n.default=()=>{const e=Object(r.useMemo)(()=>new o.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:o.unloadImage}),[]),[n,t]=Object(r.useState)(null),{cornerstoneRenderData:s,updateCornerstoneRenderData:c}=Object(o.useInsightViewerSync)(),{contours:u,focusedContour:d,focusContour:m}=Object(o.useContour)({mode:"circle",initialContours:a.a});return i.a.createElement(o.InsightViewerTestController,{options:l},({width:r,height:a,invert:l,flip:h,control:p,wheel:g,resetTime:w})=>i.a.createElement(o.InsightViewerContainer,{ref:t,width:r,height:a},i.a.createElement(o.InsightViewer,{width:r,height:a,invert:l,flip:h,pan:"pan"===p&&n,adjust:"adjust"===p&&n,zoom:"zoom"===g&&n,resetTime:w,image:e,updateCornerstoneRenderData:c}),u&&u.length>0&&s&&i.a.createElement(i.a.Fragment,null,i.a.createElement(o.CircleViewer,{width:r,height:a,contours:u,focusedContour:d,cornerstoneRenderData:s}),i.a.createElement(o.CircleHover,{hover:n,width:r,height:a,contours:u,onFocus:m,cornerstoneRenderData:s}))))}},695:function(e,n,t){"use strict";t.r(n),n.default="import {\n  CircleViewer,\n  CircleHover,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport { initialContours } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, focusContour } = useContour({\n    mode: 'circle',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <>\n              <CircleViewer\n                width={width}\n                height={height}\n                contours={contours}\n                focusedContour={focusedContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n              <CircleHover\n                hover={divElement}\n                width={width}\n                height={height}\n                contours={contours}\n                onFocus={focusContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n            </>\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n"},813:function(e,n,t){"use strict";t.r(n),n.default="import { Contour } from '@lunit/insight-viewer';\n\nexport function labelFunction(contour: Contour): string {\n  return `Annotation(${contour.id})`;\n}\n\nexport const initialContours: Omit<Contour, 'id'>[] = [\n  {\n    polygon: [\n      [340.48, 232.95999999999998],\n      [265.38666666666666, 232.10666666666668],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [173.2266666666667, 381.44],\n      [276.48, 400.21333333333337],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n  {\n    polygon: [\n      [419.84000000000003, 448.85333333333335],\n      [361.81333333333333, 407.04],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [174.93333333333334, 88.74666666666668],\n      [215.89333333333335, 129.70666666666665],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n];\n"},814:function(e,n,t){"use strict";t.r(n);var o=t(666),r=t(0),i=t.n(r),a=t(32),l=t(673);Object(o.installWADOImageLoader)();const s={width:[600,400,1e3],height:[700,400,1e3],control:["pan",["none","pan","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]},c=Object(a.default)(o.CircleViewer)`
  --contour-viewer-stroke-width: 10px;
  --contour-viewer-focused-stroke-width: 20px;

  --contour-viewer-color: blue;
  --contour-viewer-focused-color: red;
  --contour-viewer-fill-color: rgba(0, 0, 255, 0.3);
  --contour-viewer-focused-fill-color: rgba(255, 0, 0, 0.3);
`;n.default=()=>{const e=Object(r.useMemo)(()=>new o.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:o.unloadImage}),[]),[n,t]=Object(r.useState)(null),{cornerstoneRenderData:a,updateCornerstoneRenderData:u}=Object(o.useInsightViewerSync)(),{contours:d,focusedContour:m,focusContour:h}=Object(o.useContour)({mode:"circle",initialContours:l.a});return i.a.createElement(o.InsightViewerTestController,{options:s},({width:r,height:l,invert:s,flip:p,control:g,wheel:w,resetTime:C})=>i.a.createElement(o.InsightViewerContainer,{ref:t,width:r,height:l},i.a.createElement(o.InsightViewer,{width:r,height:l,invert:s,flip:p,pan:"pan"===g&&n,adjust:"adjust"===g&&n,zoom:"zoom"===w&&n,resetTime:C,image:e,updateCornerstoneRenderData:u}),d&&d.length>0&&a&&i.a.createElement(i.a.Fragment,null,i.a.createElement(c,{width:r,height:l,contours:d,focusedContour:m,cornerstoneRenderData:a}),i.a.createElement(o.CircleHover,{hover:n,width:r,height:l,contours:d,onFocus:h,cornerstoneRenderData:a}))))}},815:function(e,n,t){"use strict";t.r(n),n.default="import {\n  CircleViewer,\n  CircleHover,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { initialContours } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst CustomStyleViewer = styled(CircleViewer)`\n  --contour-viewer-stroke-width: 10px;\n  --contour-viewer-focused-stroke-width: 20px;\n\n  --contour-viewer-color: blue;\n  --contour-viewer-focused-color: red;\n  --contour-viewer-fill-color: rgba(0, 0, 255, 0.3);\n  --contour-viewer-focused-fill-color: rgba(255, 0, 0, 0.3);\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, focusContour } = useContour({\n    mode: 'circle',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <>\n              <CustomStyleViewer\n                width={width}\n                height={height}\n                contours={contours}\n                focusedContour={focusedContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n              <CircleHover\n                hover={divElement}\n                width={width}\n                height={height}\n                contours={contours}\n                onFocus={focusContour}\n                cornerstoneRenderData={cornerstoneRenderData}\n              />\n            </>\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n"},904:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return c}));t(0);var o=t(62),r=t(63),i=t(7),a=t(89),l=t(667);const s={};function c({components:e,...n}){return Object(o.b)("wrapper",Object.assign({},s,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h1",null,Object(o.b)("inlineCode",{parentName:"h1"},"<CircleViewer>")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c ",Object(o.b)("inlineCode",{parentName:"p"},"Contour")," \ub370\uc774\ud130\ub97c \ud654\uba74\uc5d0 \uadf8\ub9b0\ub2e4."),Object(o.b)(r.b,{to:"/insight-viewer/contour",mdxType:"Link"},"`Contour` \ub370\uc774\ud130\ub97c `Circle` Type\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"export interface CircleViewerProps<T extends Contour> extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n  \n  /** Contour \ub370\uc774\ud130\ub97c \uc0c1\uc18d\ubc1b\uc740 Annotation \ub370\uc774\ud130 */\n  contours: T[];\n  \n  /** \n   * Mouse Over \ub4f1 User Interaction\uc5d0 \uc758\ud574\uc11c Focus \ub41c Contour\n   * `<CircleViewer>`\ub294 Focus \uad00\ub828 Event \uae30\ub2a5\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0 `<CircleHover>`\uc640 \uac19\uc774 \uc368\uc918\uc57c \ud55c\ub2e4.\n   */\n  focusedContour: T | null;\n  \n  /** <svg className={}> */\n  className?: string;\n  \n  /** <svg style={}> */\n  style?: CSSProperties;\n  \n  /**\n   * Line\uc5d0 \uc678\uacfd\uc744 \uadf8\ub824\uc900\ub2e4\n   * Line\uc744 \ub450 \uac1c \uadf8\ub824\uc11c border\ub97c \ud45c\ud604\ud558\uae30 \ub54c\ubb38\uc5d0,\uc131\ub2a5\uc5d0 \ubbfc\uac10\ud55c \uc0c1\ud669\uc778 \uacbd\uc6b0 \ube44\ud65c\uc131 \uc2dc\ud0ac \uc218 \uc788\ub2e4.\n   */\n  border?: boolean;\n}\n")),Object(o.b)("p",null,"\uc544\ub798 \ubaa8\ub4e0 \uc608\uc81c\ub4e4\uc740 \uc774 Data\ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c\ub2e4."),Object(o.b)(a.Example,{example:Object(i.d)("../../__fixtures__/circle",{source:t(813),filename:"src/_packages/@lunit/insight-viewer/__fixtures__/circle.ts"}),mdxType:"Example"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Contour")," \ub370\uc774\ud130\ub97c \ub123\uc5b4\uc8fc\uba74 \ud654\uba74\uc5d0 Annotation\uc744 \uadf8\ub9b0\ub2e4."),Object(o.b)(a.Example,{example:Object(i.b)("./CircleViewer/Basic",{component:t(694),source:t(695),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/Basic.tsx"}),mdxType:"Example"},Object(o.b)(l.a,{height:720,mdxType:"InsightViewerPreview"})),Object(o.b)("h1",null,"Styling"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c CSS Variable\uc744 \ud1b5\ud574\uc11c \uc0c9\uc0c1\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \uac19\uc740 ",Object(o.b)("inlineCode",{parentName:"p"},"--contour-viewer-*"),"\uc758 \uc774\ub984\uc744 \uac00\uc9c4 \ud56d\ubaa9\ub4e4\uc5d0 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4."),Object(o.b)(a.Example,{example:Object(i.d)("../../theme/style",{source:t(670),filename:"src/_packages/@lunit/insight-viewer/theme/style.ts"}),mdxType:"Example"}),Object(o.b)(a.Example,{example:Object(i.b)("./CircleViewer/CustomStyle",{component:t(814),source:t(815),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/CircleViewer/CustomStyle.tsx"}),mdxType:"Example"},Object(o.b)(l.a,{height:720,mdxType:"InsightViewerPreview"})),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Contour.dataAttrs"),"\ub098 \ubc30\uc5f4 \uc21c\uc11c\uc5d0 \ub530\ub978 Styling\uc740 ",Object(o.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \ub3d9\uc77c\ud558\ub2e4. "))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=10.9d62a9d3aaef776b5d0e.js.map
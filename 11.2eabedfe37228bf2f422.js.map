{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/theme/style.ts?c7f2","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/Basic.tsx?2a55","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomColor.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomColor.tsx?d748","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomPin.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomPin.tsx?d1a5","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer.mdx"],"names":["labelFunction","id","initialContours","label","polygon","installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","divElement","setDivElement","useState","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","contours","focusedContour","addContour","removeContour","focusContour","useContour","mode","options","resetTime","ref","pan","adjust","zoom","interact","onFocus","onAdd","onRemove","CustomStyleViewer","styled","PointViewer","CustomPointPin","x","y","onEnter","onLeave","gProps","transform","onMouseEnter","onMouseLeave","onClick","event","stopPropagation","nativeEvent","stopImmediatePropagation","preventDefault","cx","cy","r","fill","style","textAnchor","attrs","pointPinComponent","layoutProps","MDXContent","components","props","mdxType","parentName","to","example","component","source","isMDXComponent"],"mappings":"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","file":"11.2eabedfe37228bf2f422.js","sourcesContent":["export default \"import { ColorProperty } from 'csstype';\\nimport { css } from 'styled-components';\\n\\nexport interface InsightViewerCSSProperties {\\n  '--contour-viewer-color'?: ColorProperty;\\n  '--contour-viewer-focused-color'?: ColorProperty;\\n  '--contour-viewer-stroke-width'?: ColorProperty;\\n  '--contour-viewer-focused-stroke-width'?: ColorProperty;\\n  '--contour-viewer-fill-color'?: ColorProperty;\\n  '--contour-viewer-focused-fill-color'?: ColorProperty;\\n\\n  '--contour-drawer-color'?: ColorProperty;\\n  '--contour-drawer-stroke-width'?: ColorProperty;\\n  '--contour-drawer-fill-color'?: ColorProperty;\\n\\n  '--pin-color'?: ColorProperty;\\n  '--pin-focused-color'?: ColorProperty;\\n}\\n\\nexport const blockStyle = css`\\n  --contour-viewer-color: #ffffff;\\n  --contour-viewer-focused-color: rgb(255, 194, 17);\\n  --contour-viewer-stroke-width: 3px;\\n  --contour-viewer-focused-stroke-width: 6px;\\n  --contour-viewer-fill-color: rgba(0, 0, 0, 0.2);\\n  --contour-viewer-focused-fill-color: rgba(0, 0, 0, 0.4);\\n\\n  --contour-drawer-color: rgb(255, 224, 0);\\n  --contour-drawer-stroke-width: 4px;\\n  --contour-drawer-fill-color: rgba(255, 224, 0, 0.2);\\n\\n  --pin-color: #ffffff;\\n  --pin-focused-color: rgb(255, 194, 17);\\n`;\\n\\nexport const globalStyle = css`\\n  :root {\\n    ${blockStyle};\\n  }\\n`;\\n\"","import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <PointViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  Contour,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  PointViewer,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\n\\nfunction labelFunction({ id }: Contour): string {\\n  return 'p' + id;\\n}\\n\\nconst initialContours: Omit<Contour, 'id'>[] = [\\n  {\\n    label: labelFunction,\\n    polygon: [[177.85263157894738, 148.04210526315788]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[255.1017543859649, 217.20701754385965]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[390.7368421052632, 118.39999999999999]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[329.6561403508772, 391.4666666666667]],\\n  },\\n];\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data\\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\\n    mode: 'point',\\n    initialContours,\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && cornerstoneRenderData && (\\n            <PointViewer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              interact={control === 'pen'}\\n              focusedContour={focusedContour}\\n              onFocus={focusContour}\\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\\n              onRemove={removeContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst CustomStyleViewer = styled(PointViewer)`\n  [data-id='1'] {\n    --pin-color: red;\n  }\n\n  [data-id='2'] {\n    --pin-color: yellow;\n  }\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <CustomStyleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  Contour,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  PointViewer,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\nimport styled from 'styled-components';\\n\\nfunction labelFunction({ id }: Contour): string {\\n  return 'p' + id;\\n}\\n\\nconst initialContours: Omit<Contour, 'id'>[] = [\\n  {\\n    label: labelFunction,\\n    polygon: [[177.85263157894738, 148.04210526315788]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[255.1017543859649, 217.20701754385965]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[390.7368421052632, 118.39999999999999]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[329.6561403508772, 391.4666666666667]],\\n  },\\n];\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nconst CustomStyleViewer = styled(PointViewer)`\\n  [data-id='1'] {\\n    --pin-color: red;\\n  }\\n\\n  [data-id='2'] {\\n    --pin-color: yellow;\\n  }\\n`;\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data\\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\\n    mode: 'point',\\n    initialContours,\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && cornerstoneRenderData && (\\n            <CustomStyleViewer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              interact={control === 'pen'}\\n              focusedContour={focusedContour}\\n              onFocus={focusContour}\\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\\n              onRemove={removeContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport { PointPinProps } from '@lunit/insight-viewer/components/PointPin';\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nfunction CustomPointPin({ x, y, label, onEnter, onLeave, onRemove, ...gProps }: PointPinProps) {\n  const onClick = event => {\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n    event.preventDefault();\n\n    onRemove();\n  };\n\n  return (\n    <g {...gProps} transform={`translate(${x} ${y})`} onMouseEnter={onEnter} onMouseLeave={onLeave} onClick={onClick}>\n      <circle cx={0} cy={0} r={15} fill=\"black\" />\n\n      <circle cx={0} cy={0} r={11} style={{ fill: 'var(--pin-color)' }} />\n\n      {label && (\n        <g transform=\"translate(0 5)\">\n          <text fill=\"black\" textAnchor=\"middle\">\n            {label}\n          </text>\n        </g>\n      )}\n    </g>\n  );\n}\n\nconst CustomStyleViewer = styled(PointViewer).attrs(() => ({\n  pointPinComponent: CustomPointPin,\n}))`\n  [data-id='1'] {\n    --pin-color: red;\n  }\n\n  [data-id='2'] {\n    --pin-color: yellow;\n  }\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <CustomStyleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  Contour,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  PointViewer,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport { PointPinProps } from '@lunit/insight-viewer/components/PointPin';\\nimport React, { useMemo, useState } from 'react';\\nimport styled from 'styled-components';\\n\\nfunction labelFunction({ id }: Contour): string {\\n  return 'p' + id;\\n}\\n\\nconst initialContours: Omit<Contour, 'id'>[] = [\\n  {\\n    label: labelFunction,\\n    polygon: [[177.85263157894738, 148.04210526315788]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[255.1017543859649, 217.20701754385965]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[390.7368421052632, 118.39999999999999]],\\n  },\\n  {\\n    label: labelFunction,\\n    polygon: [[329.6561403508772, 391.4666666666667]],\\n  },\\n];\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nfunction CustomPointPin({ x, y, label, onEnter, onLeave, onRemove, ...gProps }: PointPinProps) {\\n  const onClick = event => {\\n    event.stopPropagation();\\n    event.nativeEvent.stopImmediatePropagation();\\n    event.preventDefault();\\n\\n    onRemove();\\n  };\\n\\n  return (\\n    <g {...gProps} transform={`translate(${x} ${y})`} onMouseEnter={onEnter} onMouseLeave={onLeave} onClick={onClick}>\\n      <circle cx={0} cy={0} r={15} fill=\\\"black\\\" />\\n\\n      <circle cx={0} cy={0} r={11} style={{ fill: 'var(--pin-color)' }} />\\n\\n      {label && (\\n        <g transform=\\\"translate(0 5)\\\">\\n          <text fill=\\\"black\\\" textAnchor=\\\"middle\\\">\\n            {label}\\n          </text>\\n        </g>\\n      )}\\n    </g>\\n  );\\n}\\n\\nconst CustomStyleViewer = styled(PointViewer).attrs(() => ({\\n  pointPinComponent: CustomPointPin,\\n}))`\\n  [data-id='1'] {\\n    --pin-color: red;\\n  }\\n\\n  [data-id='2'] {\\n    --pin-color: yellow;\\n  }\\n`;\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data\\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\\n    mode: 'point',\\n    initialContours,\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && cornerstoneRenderData && (\\n            <CustomStyleViewer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              interact={control === 'pen'}\\n              focusedContour={focusedContour}\\n              onFocus={focusContour}\\n              onAdd={polygon => addContour(polygon, { label: labelFunction })}\\n              onRemove={removeContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<PointViewer>`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<CircleViewer>`}</inlineCode>{`와 마찬가지로 `}<inlineCode parentName=\"p\">{`Contour`}</inlineCode>{` 데이터를 화면에 그린다.`}</p>\n    <Link to=\"/insight-viewer/contour\" mdxType=\"Link\">`Contour` 데이터를 `Point` Type으로 사용한다.</Link>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{` + `}<inlineCode parentName=\"p\">{`<ContourDrawer>`}</inlineCode>{` 처럼 분리되어 있지 않고, `}<inlineCode parentName=\"p\">{`<PointViewer>`}</inlineCode>{`에서 View 와 Draw를 모두 처리한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface PointDrawerProps<T extends Contour> extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n  \n  /** Contour 데이터를 상속받은 Annotation 데이터 */\n  contours: T[];\n  \n  /** Mouse Over 등 User Interaction에 의해서 Focus 된 Contour */\n  focusedContour: T | null;\n  \n  /** Draw / Focus / Remove 와 같은 User Interaction을 활성 / 비활성 한다 */\n  interact?: boolean;\n  \n  /**\n   * 특정 Contour에 Mouse Over 되었을 때\n   * focusedContour를 결정하는데 필요하다\n   */\n  onFocus?: (contour: T | null) => void;\n  \n  /** 그리기가 완료되어 새로운 Contour가 발생했을 때 */\n  onAdd?: (polygon: Point[], event: MouseEvent) => void;\n  \n  /** 특정 Contour를 Click 해서 지울때 필요하다 */\n  onRemove?: (contour: T) => void;\n  \n  className?: string;\n  \n  /** Pin의 모양을 변경하는데 사용할 수 있다 */\n  pointPinComponent?: ComponentType<PointPinProps>;\n  \n  /** Contour 데이터에 따라 Pin을 다르게 하고 싶은 경우 사용할 수 있다 */\n  pointPinFunction?: (contour: T) => ComponentType<PointPinProps>;\n}\n`}</code></pre>\n    <Example example={component('./PointViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`Styling`}</h1>\n    <p><inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 마찬가지로 CSS Variable을 통해서 색상을 변경할 수 있다.`}</p>\n    <p>{`아래 File에서 `}<inlineCode parentName=\"p\">{`--pin-*`}</inlineCode>{`의 이름을 가진 항목들에 영향을 받는다.`}</p>\n    <Example example={source('../../theme/style')} mdxType=\"Example\" />\n    <Example example={component('./PointViewer/CustomColor')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <p><inlineCode parentName=\"p\">{`Contour.dataAttrs`}</inlineCode>{`나 배열 순서에 따른 Styling은 `}<inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`와 동일하다.`}</p>\n    <h1>{`Custom Pin`}</h1>\n    <p>{`단순 Color 변경만이 아니라, Pin의 형태 자체를 변경해야 하는 경우`}</p>\n    <p><inlineCode parentName=\"p\">{`pointPinComponent`}</inlineCode>{`나 `}<inlineCode parentName=\"p\">{`pointPinFunction`}</inlineCode>{` Props를 사용할 수 있다.`}</p>\n    <Example example={component('./PointViewer/CustomPin')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
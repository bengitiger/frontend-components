(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{670:function(n,e,o){"use strict";o.r(e),e.default="import { ColorProperty } from 'csstype';\nimport { css } from 'styled-components';\n\nexport interface InsightViewerCSSProperties {\n  '--contour-viewer-color'?: ColorProperty;\n  '--contour-viewer-focused-color'?: ColorProperty;\n  '--contour-viewer-stroke-width'?: ColorProperty;\n  '--contour-viewer-focused-stroke-width'?: ColorProperty;\n  '--contour-viewer-fill-color'?: ColorProperty;\n  '--contour-viewer-focused-fill-color'?: ColorProperty;\n\n  '--contour-drawer-color'?: ColorProperty;\n  '--contour-drawer-stroke-width'?: ColorProperty;\n  '--contour-drawer-fill-color'?: ColorProperty;\n\n  '--pin-color'?: ColorProperty;\n  '--pin-focused-color'?: ColorProperty;\n}\n\nexport const blockStyle = css`\n  --contour-viewer-color: #ffffff;\n  --contour-viewer-focused-color: rgb(255, 194, 17);\n  --contour-viewer-stroke-width: 3px;\n  --contour-viewer-focused-stroke-width: 6px;\n  --contour-viewer-fill-color: rgba(0, 0, 0, 0.2);\n  --contour-viewer-focused-fill-color: rgba(0, 0, 0, 0.4);\n\n  --contour-drawer-color: rgb(255, 224, 0);\n  --contour-drawer-stroke-width: 4px;\n  --contour-drawer-fill-color: rgba(255, 224, 0, 0.2);\n\n  --pin-color: #ffffff;\n  --pin-focused-color: rgb(255, 194, 17);\n`;\n\nexport const globalStyle = css`\n  :root {\n    ${blockStyle};\n  }\n`;\n"},837:function(n,e,o){"use strict";o.r(e),e.default="import React, { Component, ComponentType, MouseEvent } from 'react';\nimport { InsightViewerGuestProps } from '../hooks/useInsightViewerSync';\nimport { Contour, Point } from '../types';\nimport { PointPin, PointPinProps } from './PointPin';\n\nexport interface PointDrawerProps<T extends Contour> extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n\n  /** Contour \ub370\uc774\ud130\ub97c \uc0c1\uc18d\ubc1b\uc740 Annotation \ub370\uc774\ud130 */\n  contours: T[];\n\n  /** Mouse Over \ub4f1 User Interaction\uc5d0 \uc758\ud574\uc11c Focus \ub41c Contour */\n  focusedContour: T | null;\n\n  /** Draw / Focus / Remove \uc640 \uac19\uc740 User Interaction\uc744 \ud65c\uc131 / \ube44\ud65c\uc131 \ud55c\ub2e4 */\n  interact?: boolean;\n\n  /**\n   * \ud2b9\uc815 Contour\uc5d0 Mouse Over \ub418\uc5c8\uc744 \ub54c\n   * focusedContour\ub97c \uacb0\uc815\ud558\ub294\ub370 \ud544\uc694\ud558\ub2e4\n   */\n  onFocus?: (contour: T | null) => void;\n\n  /** \uadf8\ub9ac\uae30\uac00 \uc644\ub8cc\ub418\uc5b4 \uc0c8\ub85c\uc6b4 Contour\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c */\n  onAdd?: (polygon: Point[], event: MouseEvent) => void;\n\n  /** \ud2b9\uc815 Contour\ub97c Click \ud574\uc11c \uc9c0\uc6b8\ub54c \ud544\uc694\ud558\ub2e4 */\n  onRemove?: (contour: T) => void;\n\n  className?: string;\n\n  /** Pin\uc758 \ubaa8\uc591\uc744 \ubcc0\uacbd\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 */\n  pointPinComponent?: ComponentType<PointPinProps>;\n\n  /** Contour \ub370\uc774\ud130\uc5d0 \ub530\ub77c Pin\uc744 \ub2e4\ub974\uac8c \ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 */\n  pointPinFunction?: (contour: T) => ComponentType<PointPinProps>;\n}\n\nfunction toLocal(element: HTMLElement, point: Point): { x: number; y: number } {\n  return cornerstone.pixelToCanvas(element, { x: point[0], y: point[1] });\n}\n\nexport class PointViewer<T extends Contour> extends Component<PointDrawerProps<T>, {}> {\n  render() {\n    return (\n      <svg\n        role=\"figure\"\n        width={this.props.width}\n        height={this.props.height}\n        className={this.props.className}\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: this.props.width,\n          height: this.props.height,\n          userSelect: 'none',\n          pointerEvents: this.props.interact === true ? 'auto' : 'none',\n        }}\n        onClick={this.onPointAdd}\n      >\n        {this.props.cornerstoneRenderData &&\n          this.props.contours &&\n          this.props.contours.length > 0 &&\n          this.props.contours.map(contour => {\n            const { id, polygon, dataAttrs = {}, label } = contour;\n\n            const Pin: ComponentType<PointPinProps> =\n              typeof this.props.pointPinFunction === 'function'\n                ? this.props.pointPinFunction(contour)\n                : this.props.pointPinComponent || PointPin;\n\n            const text: string =\n              typeof label === 'function' ? label(contour) : typeof label === 'string' ? label : id.toString();\n\n            return (\n              <Pin\n                key={id}\n                {...toLocal(this.props.cornerstoneRenderData!.element, polygon[0])}\n                {...dataAttrs}\n                data-id={id}\n                data-focused={contour === this.props.focusedContour || undefined}\n                label={text}\n                onEnter={() => this.onPointEnter(contour)}\n                onLeave={() => this.onPointLeave()}\n                onRemove={() => this.onPointRemove(contour)}\n              />\n            );\n          })}\n      </svg>\n    );\n  }\n\n  private onPointAdd = (event: MouseEvent<SVGSVGElement>) => {\n    if (\n      typeof this.props.onAdd === 'function' &&\n      this.props.cornerstoneRenderData &&\n      this.props.cornerstoneRenderData.element\n    ) {\n      const element: HTMLElement = this.props.cornerstoneRenderData.element;\n      const { x, y } = cornerstone.pageToPixel(element, event.pageX, event.pageY);\n      this.props.onAdd([[x, y]], event);\n    }\n  };\n\n  private onPointEnter = (contour: T) => {\n    if (typeof this.props.onFocus === 'function') {\n      this.props.onFocus(contour);\n    }\n  };\n\n  private onPointLeave = () => {\n    if (typeof this.props.onFocus === 'function') {\n      this.props.onFocus(null);\n    }\n  };\n\n  private onPointRemove = (contour: T) => {\n    if (typeof this.props.onRemove === 'function') {\n      this.props.onRemove(contour);\n    }\n  };\n}\n\n/**\n * @deprecated use PointViewer instead\n */\nexport const UserPointViewer = PointViewer;\n"},838:function(n,e,o){"use strict";o.r(e);var t=o(666),r=o(0),i=o.n(r);function s({id:n}){return"p"+n}const l=[{label:s,polygon:[[177.85263157894738,148.04210526315788]]},{label:s,polygon:[[255.1017543859649,217.20701754385965]]},{label:s,polygon:[[390.7368421052632,118.39999999999999]]},{label:s,polygon:[[329.6561403508772,391.4666666666667]]}];Object(t.installWADOImageLoader)();const a={width:[600,400,1e3],height:[700,400,1e3],control:["pen",["none","pan","pen","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]};e.default=()=>{const n=Object(r.useMemo)(()=>new t.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:t.unloadImage}),[]),{cornerstoneRenderData:e,updateCornerstoneRenderData:o}=Object(t.useInsightViewerSync)(),{contours:c,focusedContour:u,addContour:p,removeContour:d,focusContour:m}=Object(t.useContour)({mode:"point",initialContours:l});return i.a.createElement(t.InsightViewerTestController,{options:a},({width:r,height:l,invert:a,flip:h,control:g,wheel:C,resetTime:w,element:f,setElement:b,interactions:v})=>i.a.createElement(t.InsightViewerContainer,{ref:b,width:r,height:l},i.a.createElement(t.CornerstoneViewer,{width:r,height:l,invert:a,flip:h,interactions:v,resetTime:w,image:n,updateCornerstoneRenderData:o}),c&&e&&i.a.createElement(t.PointViewer,{width:r,height:l,contours:c,interact:"pen"===g,focusedContour:u,onFocus:m,onAdd:n=>p(n,{label:s}),onRemove:d,cornerstoneRenderData:e})))}},839:function(n,e,o){"use strict";o.r(e),e.default="import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <PointViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={(polygon) => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n"},840:function(n,e,o){"use strict";o.r(e);var t=o(666),r=o(0),i=o.n(r),s=o(36);function l({id:n}){return"p"+n}const a=[{label:l,polygon:[[177.85263157894738,148.04210526315788]]},{label:l,polygon:[[255.1017543859649,217.20701754385965]]},{label:l,polygon:[[390.7368421052632,118.39999999999999]]},{label:l,polygon:[[329.6561403508772,391.4666666666667]]}];Object(t.installWADOImageLoader)();const c={width:[600,400,1e3],height:[700,400,1e3],control:["pen",["none","pan","pen","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]},u=Object(s.d)(t.PointViewer)`
  [data-id='1'] {
    --pin-color: red;
  }

  [data-id='2'] {
    --pin-color: yellow;
  }
`;e.default=()=>{const n=Object(r.useMemo)(()=>new t.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:t.unloadImage}),[]),{cornerstoneRenderData:e,updateCornerstoneRenderData:o}=Object(t.useInsightViewerSync)(),{contours:s,focusedContour:p,addContour:d,removeContour:m,focusContour:h}=Object(t.useContour)({mode:"point",initialContours:a});return i.a.createElement(t.InsightViewerTestController,{options:c},({width:r,height:a,invert:c,flip:g,control:C,wheel:w,resetTime:f,element:b,setElement:v,interactions:y})=>i.a.createElement(t.InsightViewerContainer,{ref:v,width:r,height:a},i.a.createElement(t.CornerstoneViewer,{width:r,height:a,invert:c,flip:g,interactions:y,resetTime:f,image:n,updateCornerstoneRenderData:o}),s&&e&&i.a.createElement(u,{width:r,height:a,contours:s,interact:"pen"===C,focusedContour:p,onFocus:h,onAdd:n=>d(n,{label:l}),onRemove:m,cornerstoneRenderData:e})))}},841:function(n,e,o){"use strict";o.r(e),e.default="import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst CustomStyleViewer = styled(PointViewer)`\n  [data-id='1'] {\n    --pin-color: red;\n  }\n\n  [data-id='2'] {\n    --pin-color: yellow;\n  }\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <CustomStyleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={(polygon) => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n"},842:function(n,e,o){"use strict";o.r(e);var t=o(666),r=o(0),i=o.n(r),s=o(36);function l({id:n}){return"p"+n}const a=[{label:l,polygon:[[177.85263157894738,148.04210526315788]]},{label:l,polygon:[[255.1017543859649,217.20701754385965]]},{label:l,polygon:[[390.7368421052632,118.39999999999999]]},{label:l,polygon:[[329.6561403508772,391.4666666666667]]}];Object(t.installWADOImageLoader)();const c={width:[600,400,1e3],height:[700,400,1e3],control:["pen",["none","pan","pen","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]};function u({x:n,y:e,label:o,onEnter:t,onLeave:r,onRemove:s,...l}){return i.a.createElement("g",Object.assign({},l,{transform:`translate(${n} ${e})`,onMouseEnter:t,onMouseLeave:r,onClick:n=>{n.stopPropagation(),n.nativeEvent.stopImmediatePropagation(),n.preventDefault(),s()}}),i.a.createElement("circle",{cx:0,cy:0,r:15,fill:"black"}),i.a.createElement("circle",{cx:0,cy:0,r:11,style:{fill:"var(--pin-color)"}}),o&&i.a.createElement("g",{transform:"translate(0 5)"},i.a.createElement("text",{fill:"black",textAnchor:"middle"},o)))}const p=Object(s.d)(t.PointViewer).attrs(()=>({pointPinComponent:u}))`
  [data-id='1'] {
    --pin-color: red;
  }

  [data-id='2'] {
    --pin-color: yellow;
  }
`;e.default=()=>{const n=Object(r.useMemo)(()=>new t.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:t.unloadImage}),[]),{cornerstoneRenderData:e,updateCornerstoneRenderData:o}=Object(t.useInsightViewerSync)(),{contours:s,focusedContour:u,addContour:d,removeContour:m,focusContour:h}=Object(t.useContour)({mode:"point",initialContours:a});return i.a.createElement(t.InsightViewerTestController,{options:c},({width:r,height:a,invert:c,flip:g,control:C,wheel:w,resetTime:f,element:b,setElement:v,interactions:y})=>i.a.createElement(t.InsightViewerContainer,{ref:v,width:r,height:a},i.a.createElement(t.CornerstoneViewer,{width:r,height:a,invert:c,flip:g,interactions:y,resetTime:f,image:n,updateCornerstoneRenderData:o}),s&&e&&i.a.createElement(p,{width:r,height:a,contours:s,interact:"pen"===C,focusedContour:u,onFocus:h,onAdd:n=>d(n,{label:l}),onRemove:m,cornerstoneRenderData:e})))}},843:function(n,e,o){"use strict";o.r(e),e.default="import {\n  Contour,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  PointViewer,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport { PointPinProps } from '@lunit/insight-viewer/components/PointPin';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\n\nfunction labelFunction({ id }: Contour): string {\n  return 'p' + id;\n}\n\nconst initialContours: Omit<Contour, 'id'>[] = [\n  {\n    label: labelFunction,\n    polygon: [[177.85263157894738, 148.04210526315788]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[255.1017543859649, 217.20701754385965]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[390.7368421052632, 118.39999999999999]],\n  },\n  {\n    label: labelFunction,\n    polygon: [[329.6561403508772, 391.4666666666667]],\n  },\n];\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nfunction CustomPointPin({ x, y, label, onEnter, onLeave, onRemove, ...gProps }: PointPinProps) {\n  const onClick = (event) => {\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n    event.preventDefault();\n\n    onRemove();\n  };\n\n  return (\n    <g {...gProps} transform={`translate(${x} ${y})`} onMouseEnter={onEnter} onMouseLeave={onLeave} onClick={onClick}>\n      <circle cx={0} cy={0} r={15} fill=\"black\" />\n\n      <circle cx={0} cy={0} r={11} style={{ fill: 'var(--pin-color)' }} />\n\n      {label && (\n        <g transform=\"translate(0 5)\">\n          <text fill=\"black\" textAnchor=\"middle\">\n            {label}\n          </text>\n        </g>\n      )}\n    </g>\n  );\n}\n\nconst CustomStyleViewer = styled(PointViewer).attrs(() => ({\n  pointPinComponent: CustomPointPin,\n}))`\n  [data-id='1'] {\n    --pin-color: red;\n  }\n\n  [data-id='2'] {\n    --pin-color: yellow;\n  }\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'point',\n    initialContours,\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && cornerstoneRenderData && (\n            <CustomStyleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              interact={control === 'pen'}\n              focusedContour={focusedContour}\n              onFocus={focusContour}\n              onAdd={(polygon) => addContour(polygon, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n"},938:function(n,e,o){"use strict";o.r(e),o.d(e,"default",(function(){return c}));o(0);var t=o(62),r=o(63),i=o(7),s=o(89),l=o(667);const a={};function c({components:n,...e}){return Object(t.b)("wrapper",Object.assign({},a,e,{components:n,mdxType:"MDXLayout"}),Object(t.b)("h1",null,Object(t.b)("inlineCode",{parentName:"h1"},"<PointViewer>")),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),", ",Object(t.b)("inlineCode",{parentName:"p"},"<CircleViewer>"),"\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c ",Object(t.b)("inlineCode",{parentName:"p"},"Contour")," \ub370\uc774\ud130\ub97c \ud654\uba74\uc5d0 \uadf8\ub9b0\ub2e4."),Object(t.b)(r.b,{to:"/insight-viewer/contour",mdxType:"Link"},"`Contour` \ub370\uc774\ud130\ub97c `Point` Type\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4."),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"<ContourViewer>")," + ",Object(t.b)("inlineCode",{parentName:"p"},"<ContourDrawer>")," \ucc98\ub7fc \ubd84\ub9ac\ub418\uc5b4 \uc788\uc9c0 \uc54a\uace0, ",Object(t.b)("inlineCode",{parentName:"p"},"<PointViewer>"),"\uc5d0\uc11c View \uc640 Draw\ub97c \ubaa8\ub450 \ucc98\ub9ac\ud55c\ub2e4."),Object(t.b)("h1",null,"API"),Object(t.b)(s.Example,{example:Object(i.d)("@lunit/insight-viewer/components/PointViewer",{source:o(837),filename:"src/_packages/@lunit/insight-viewer/components/PointViewer.tsx"}),api:!0,mdxType:"Example"}),Object(t.b)("h1",null,"Sample"),Object(t.b)(s.Example,{example:Object(i.b)("./PointViewer/Basic",{component:o(838),source:o(839),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/Basic.tsx"}),mdxType:"Example"},Object(t.b)(l.a,{height:720,mdxType:"InsightViewerPreview"})),Object(t.b)("h1",null,"Styling"),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c CSS Variable\uc744 \ud1b5\ud574\uc11c \uc0c9\uc0c1\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4."),Object(t.b)("p",null,"\uc544\ub798 File\uc5d0\uc11c ",Object(t.b)("inlineCode",{parentName:"p"},"--pin-*"),"\uc758 \uc774\ub984\uc744 \uac00\uc9c4 \ud56d\ubaa9\ub4e4\uc5d0 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4."),Object(t.b)(s.Example,{example:Object(i.d)("../../theme/style",{source:o(670),filename:"src/_packages/@lunit/insight-viewer/theme/style.ts"}),mdxType:"Example"}),Object(t.b)(s.Example,{example:Object(i.b)("./PointViewer/CustomColor",{component:o(840),source:o(841),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomColor.tsx"}),mdxType:"Example"},Object(t.b)(l.a,{height:720,mdxType:"InsightViewerPreview"})),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"Contour.dataAttrs"),"\ub098 \ubc30\uc5f4 \uc21c\uc11c\uc5d0 \ub530\ub978 Styling\uc740 ",Object(t.b)("inlineCode",{parentName:"p"},"<ContourViewer>"),"\uc640 \ub3d9\uc77c\ud558\ub2e4."),Object(t.b)("h1",null,"Custom Pin"),Object(t.b)("p",null,"\ub2e8\uc21c Color \ubcc0\uacbd\ub9cc\uc774 \uc544\ub2c8\ub77c, Pin\uc758 \ud615\ud0dc \uc790\uccb4\ub97c \ubcc0\uacbd\ud574\uc57c \ud558\ub294 \uacbd\uc6b0"),Object(t.b)("p",null,Object(t.b)("inlineCode",{parentName:"p"},"pointPinComponent"),"\ub098 ",Object(t.b)("inlineCode",{parentName:"p"},"pointPinFunction")," Props\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4."),Object(t.b)(s.Example,{example:Object(i.b)("./PointViewer/CustomPin",{component:o(842),source:o(843),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/PointViewer/CustomPin.tsx"}),mdxType:"Example"},Object(t.b)(l.a,{height:720,mdxType:"InsightViewerPreview"})))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=11.45b5470106c6da231db7.js.map
{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/components/CornerstoneViewer.tsx?f53a","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/Basic.tsx?9a36","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/DelegateInteraction.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/DelegateInteraction.tsx?f2a9","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/InvertAndFlip.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/InvertAndFlip.tsx?fbf5","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","options","resetTime","interactions","updateCornerstoneRenderData","element","setElement","ref","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","isMDXComponent"],"mappings":"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","file":"11.bf2dc38371b16c0ea093.js","sourcesContent":["export default \"import React, { Component } from 'react';\\nimport { Unsubscribable } from 'rxjs';\\nimport { FrameConsumer } from '../context/frame';\\nimport { InsightViewerHostProps } from '../hooks/useInsightViewerSync';\\nimport { CornerstoneImage } from '../image/types';\\nimport {\\n  CornerstoneRenderData,\\n  CornerstoneViewerLike,\\n  Interaction,\\n  ViewportTransform,\\n  ViewportTransformParams,\\n} from '../types';\\n\\nexport type CornerstoneViewerInteractions = (Interaction | false | null | undefined)[];\\n\\nexport interface CornerstoneViewerProps extends InsightViewerHostProps {\\n  width: number;\\n  height: number;\\n\\n  image: CornerstoneImage;\\n\\n  interactions?: CornerstoneViewerInteractions;\\n\\n  /** Invert Color Image */\\n  invert: boolean;\\n\\n  /** Flip Image */\\n  flip: boolean;\\n\\n  /**\\n   * Date.now() 로 입력하면 된다.\\n   * 값이 변경되는 경우 Pan, Adjust, Zoom 으로 변경된 상태들이 초기화 된다.\\n   */\\n  resetTime: number;\\n\\n  /**\\n   * Image가 최초 그려지는 순간 변경한다\\n   */\\n  defaultViewportTransforms?: ViewportTransform[];\\n}\\n\\nconst maxScale: number = 3;\\n\\nexport class CornerstoneViewer extends Component<CornerstoneViewerProps, {}> implements CornerstoneViewerLike {\\n  // ref={}에 의해서 componentDidMount() 이전에 반드시 들어온다\\n  private element!: HTMLDivElement;\\n\\n  // imageLoaded 이후 지연되어 들어오게 된다\\n  // setViewport, updateViewport 에 의해서만 접근한다\\n  private currentViewport: cornerstone.Viewport | null = null;\\n  // props.image.subscribe()를 통해서 지연되어 들어오게 된다\\n  private currentImage: cornerstone.Image | null = null;\\n\\n  // mouse interaction에서 사용한다\\n  private teardownInteraction: (() => void)[] | null = null;\\n\\n  // rx subscriptions\\n  private imageSubscription: Unsubscribable | null = null;\\n\\n  private needImageInitialize: boolean = true;\\n\\n  private contentWindow: Window = window;\\n\\n  render() {\\n    return (\\n      <>\\n        <FrameConsumer stateRef={({ contentWindow }) => (this.contentWindow = contentWindow)} />\\n        <div\\n          ref={this.elementRef}\\n          style={{\\n            width: this.props.width,\\n            height: this.props.height,\\n          }}\\n        />\\n      </>\\n    );\\n  }\\n\\n  // ---------------------------------------------\\n  // life cycle\\n  // ---------------------------------------------\\n  elementRef = (element: HTMLDivElement) => {\\n    this.element = element;\\n\\n    if (!element) return;\\n\\n    this.startInteraction(this.props.interactions);\\n  };\\n\\n  componentDidMount() {\\n    // cornerstone의 imagernderered event를 받는다\\n    // image가 render 될때마다 context로 enabledElement를 배포해주기 위해 필요하다\\n    this.element.addEventListener(cornerstone.EVENTS.IMAGE_RENDERED, this.onImageRenderered);\\n\\n    this.setCornerstoneImage(this.props.image);\\n  }\\n\\n  initImage = (image: cornerstone.Image) => {\\n    cornerstone.disable(this.element);\\n    cornerstone.enable(this.element, { renderer: 'webgl' });\\n\\n    let defaultViewport = this.getDefaultViewport(image, this.element);\\n\\n    if (!defaultViewport) {\\n      throw new Error('defaultViewport는 null일 수 없다.');\\n    }\\n\\n    if (Array.isArray(this.props.defaultViewportTransforms)) {\\n      const minScale: number = defaultViewport.scale;\\n\\n      for (const transform of this.props.defaultViewportTransforms) {\\n        const patch = transform({\\n          element: this.element,\\n          currentViewport: defaultViewport,\\n          minScale,\\n          maxScale,\\n        });\\n\\n        defaultViewport = {\\n          ...defaultViewport,\\n          ...patch,\\n        };\\n      }\\n    }\\n\\n    defaultViewport = {\\n      ...defaultViewport,\\n      hflip: this.props.flip,\\n      invert: this.props.invert,\\n    };\\n\\n    cornerstone.displayImage(this.element, image, defaultViewport);\\n\\n    this.setImage(image);\\n    this.setViewport(defaultViewport);\\n    this.startInteraction(this.props.interactions);\\n  };\\n\\n  componentWillUnmount() {\\n    this.element.removeEventListener(cornerstone.EVENTS.IMAGE_RENDERED, this.onImageRenderered);\\n    cornerstone.disable(this.element);\\n\\n    if (this.imageSubscription) {\\n      this.imageSubscription.unsubscribe();\\n    }\\n\\n    if (this.teardownInteraction) {\\n      this.teardownInteraction.forEach((teardown) => teardown());\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps: Readonly<CornerstoneViewerProps>) {\\n    const { width, height, flip, invert, interactions, resetTime, image } = this.props;\\n\\n    const defaultViewport: cornerstone.Viewport | null = this.getDefaultViewport(this.currentImage, this.element);\\n\\n    // 선택된 control 상태에 따라 event를 해제/등록 해준다\\n    if (prevProps.interactions !== interactions) {\\n      this.startInteraction(interactions);\\n    }\\n\\n    if (defaultViewport) {\\n      if (prevProps.resetTime !== resetTime) {\\n        // resetTime이 새로 갱신되면 viewport를 defaultViewport를 사용해서 초기화 해준다\\n        this.updateCurrentViewport({\\n          ...defaultViewport,\\n          //...this.defaultViewport,\\n          hflip: flip,\\n          invert: defaultViewport.invert ? !invert : invert,\\n        });\\n      } else {\\n        // flip, invert는 resetTime의 부분 집합이기 때문에\\n        // resetTime에 의한 갱신이 없는 경우에만 적용한다\\n        if (prevProps.flip !== flip || prevProps.invert !== invert) {\\n          this.updateCurrentViewport({\\n            hflip: flip,\\n            invert: defaultViewport.invert ? !invert : invert,\\n          });\\n        }\\n      }\\n    }\\n\\n    if (prevProps.width !== width || prevProps.height !== height) {\\n      if (this.currentImage) {\\n        // container size가 변경되는 경우 cornerstone resize() 처리를 해준다\\n        cornerstone.resize(this.element);\\n\\n        const viewport = cornerstone.getViewport(this.element);\\n\\n        if (viewport) {\\n          this.setViewport(viewport);\\n        } else {\\n          throw new Error('getViewport() is returns not a Viewport');\\n        }\\n      }\\n    }\\n\\n    if (prevProps.image !== image) {\\n      this.setCornerstoneImage(image);\\n    }\\n  }\\n\\n  subscribeImage = (image: cornerstone.Image | null) => {\\n    if (!image) return;\\n\\n    image.voiLUT = undefined; // remove VOI LUT for 'adjust' functionality\\n\\n    // props.image의 변경 또는 초기화로 인한 완전한 초기화가 필요할때\\n    if (this.needImageInitialize) {\\n      this.needImageInitialize = false;\\n      this.initImage(image);\\n    }\\n    // 단순 series image의 변경일 경우에는 화면 표시만 바꿔준다\\n    else if (this.currentViewport) {\\n      cornerstone.displayImage(this.element, image, this.currentViewport);\\n    }\\n    // 이건 실행되면 안됨\\n    else {\\n      throw new Error('어떤 상황인지 확인 필요!!!');\\n    }\\n  };\\n\\n  onImageRenderered = (event: cornerstone.CornerstoneEvent) => {\\n    const eventData: cornerstone.CornerstoneEventData | undefined = event.detail;\\n    if (\\n      eventData &&\\n      eventData.canvasContext &&\\n      eventData.element &&\\n      eventData.enabledElement &&\\n      eventData.image &&\\n      typeof eventData.renderTimeInMs === 'number' &&\\n      eventData.viewport\\n    ) {\\n      this.currentViewport = eventData.viewport;\\n      this.props.updateCornerstoneRenderData(eventData as CornerstoneRenderData);\\n    } else {\\n      console.error('CornerstoneEventData에 없는 정보가 있다???', eventData);\\n    }\\n  };\\n\\n  // ---------------------------------------------\\n  // event handlers\\n  // ---------------------------------------------\\n  startInteraction = (interactions: CornerstoneViewerInteractions | undefined) => {\\n    if (this.teardownInteraction) {\\n      this.teardownInteraction.forEach((teardown) => teardown());\\n    }\\n\\n    if (Array.isArray(interactions) && interactions.length > 0) {\\n      this.teardownInteraction = interactions\\n        .filter((interaction): interaction is Interaction => typeof interaction === 'function')\\n        .map((interaction) => interaction(this));\\n    }\\n  };\\n\\n  // ---------------------------------------------\\n  // getters\\n  // ---------------------------------------------\\n  getElement = () => this.element;\\n\\n  getContentWindow = () => this.contentWindow;\\n\\n  getCurrentViewport = () => this.currentViewport!;\\n\\n  getDefaultViewport = (image: cornerstone.Image | null, element: HTMLElement | null): cornerstone.Viewport | null => {\\n    if (!image || !element) return null;\\n    return cornerstone.getDefaultViewportForImage(element, image);\\n  };\\n\\n  getMinScale = () => {\\n    const viewport = this.getDefaultViewport(this.currentImage, this.element);\\n\\n    if (!viewport) {\\n      throw new Error('viewport가 정상적으로 와야만 한다');\\n    }\\n\\n    return viewport.scale;\\n  };\\n\\n  getMaxScale = () => {\\n    return maxScale;\\n  };\\n\\n  // ---------------------------------------------\\n  // setters\\n  // ---------------------------------------------\\n  updateViewport = (patch: Partial<cornerstone.Viewport>) => {\\n    if (this.currentViewport) {\\n      this.updateCurrentViewport(patch);\\n    }\\n  };\\n\\n  getViewportTransformParams = (): ViewportTransformParams => {\\n    return {\\n      element: this.element,\\n      minScale: this.getMinScale(),\\n      maxScale: this.getMaxScale(),\\n      currentViewport: this.currentViewport,\\n    };\\n  };\\n\\n  private setCornerstoneImage = (image: CornerstoneImage) => {\\n    this.needImageInitialize = true;\\n\\n    this.setImage(null);\\n\\n    if (this.imageSubscription) {\\n      this.imageSubscription.unsubscribe();\\n      this.imageSubscription = null;\\n    }\\n\\n    this.imageSubscription = image.image.subscribe(this.subscribeImage);\\n  };\\n\\n  private setImage = (image: cornerstone.Image | null) => {\\n    this.currentImage = image;\\n  };\\n\\n  private setViewport = (viewport: cornerstone.Viewport) => {\\n    this.currentViewport = viewport;\\n    cornerstone.setViewport(this.element, this.currentViewport);\\n  };\\n\\n  private updateCurrentViewport = (\\n    update: Partial<cornerstone.Viewport> | ((viewport: cornerstone.Viewport) => Partial<cornerstone.Viewport>),\\n  ) => {\\n    if (!this.currentViewport) {\\n      throw new Error('viewport가 없는 상태에서 실행되면 안된다');\\n    }\\n\\n    const patch: Partial<cornerstone.Viewport> = typeof update === 'function' ? update(this.currentViewport) : update;\\n\\n    this.currentViewport = {\\n      ...this.currentViewport,\\n      ...patch,\\n    };\\n\\n    cornerstone.setViewport(this.element, this.currentViewport);\\n  };\\n}\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\n        <CornerstoneViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          interactions={interactions}\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\\n        <CornerstoneViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          interactions={interactions}\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={() => {}}\n          />\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\\n        <InsightViewerContainer ref={setElement} width={width} height={height}>\\n          <CornerstoneViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            interactions={interactions}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={() => {}}\\n          />\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [true],\n  invert: [true],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\n        <CornerstoneViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          interactions={interactions}\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [true],\\n  invert: [true],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions, element, setElement }) => (\\n        <CornerstoneViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          interactions={interactions}\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<CornerstoneViewer>`}</inlineCode></h1>\n    <ul>\n      <li parentName=\"ul\">{`포함되어 있는 기능들`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`*.dcm`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`*.jpg`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`*.png`}</inlineCode>{` 등의 이미지를 그린다`}</li>\n          <li parentName=\"ul\">{`Pan, Adjust, Flip, Invert 등 기본적인 User Interaction 이나 Dicom Display 에 관련된 기능들을 구현한다`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`포함되어 있지 않은 기능들`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Heatmap 또는 Contour 처리 → `}<inlineCode parentName=\"li\">{`<HeatmapViewer>`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`<ContourViewer>`}</inlineCode>{` 에서 구현됨`}</li>\n          <li parentName=\"ul\">{`DBT 등에 사용되는 Series Image 기능 구현 → `}<inlineCode parentName=\"li\">{`class CornerstoneSeriesImage`}</inlineCode>{` 를 통해 구현됨`}</li>\n          <li parentName=\"ul\">{`여러개의 화면들을 동기화 시키거나 하는 Viewport 동기화 → `}<inlineCode parentName=\"li\">{`useViewportMirroring()`}</inlineCode>{` 등 Utility Hook을 통해 구현됨`}</li>\n        </ul></li>\n    </ul>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/components/CornerstoneViewer')} api mdxType=\"Example\" />\n    <h1>{`기본적인 사용`}</h1>\n    <Example example={component('./CornerstoneViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`외부 HTML Element를 사용해서 Event 처리`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<CornerstoneViewer/>\n<HeatmapViewer/>\n<ContourViewer/>\n<ContourDrawer/>\n`}</code></pre>\n    <p>{`위와 같이 여러개의 Component들을 Layer로 겹쳐 사용하는 경우 `}<inlineCode parentName=\"p\">{`MouseEvent`}</inlineCode>{`와 같은 사용자 입력이 차단될 수 있다.`}</p>\n    <p>{`이와 같은 Layer 구성 문제를 비롯한 여러 User Interaction을 외부에 위임하기 위해, 일부 속성들은 `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode>{` 뿐만 아니라 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`로 입력될 수 있다.`}</p>\n    <Example example={component('./CornerstoneViewer/DelegateInteraction')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`Tests`}</h1>\n    <p><inlineCode parentName=\"p\">{`flip={true} invert={true}`}</inlineCode>{` 기본값 Test`}</p>\n    <Example example={component('./CornerstoneViewer/InvertAndFlip')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
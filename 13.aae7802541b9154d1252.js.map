{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/theme/style.ts?c7f2","webpack:///./src/_packages/@lunit/insight-viewer/__fixtures__/circle.ts","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleDrawer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleDrawer/Basic.tsx?e4e2","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleDrawer/CustomStyle.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleDrawer/CustomStyle.tsx?2385","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CircleDrawer.mdx"],"names":["labelFunction","contour","id","initialContours","polygon","label","dataAttrs","installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","divElement","setDivElement","useState","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","contours","focusedContour","addContour","removeContour","focusContour","useContour","mode","options","resetTime","ref","pan","adjust","zoom","length","draw","onFocus","onAdd","onRemove","CustomStyleDrawer","styled","CircleDrawer","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","source","isMDXComponent"],"mappings":"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","file":"13.aae7802541b9154d1252.js","sourcesContent":["export default \"import { ColorProperty } from 'csstype';\\nimport { css } from 'styled-components';\\n\\nexport interface InsightViewerCSSProperties {\\n  '--contour-viewer-color'?: ColorProperty;\\n  '--contour-viewer-focused-color'?: ColorProperty;\\n  '--contour-viewer-stroke-width'?: ColorProperty;\\n  '--contour-viewer-focused-stroke-width'?: ColorProperty;\\n  '--contour-viewer-fill-color'?: ColorProperty;\\n  '--contour-viewer-focused-fill-color'?: ColorProperty;\\n\\n  '--contour-drawer-color'?: ColorProperty;\\n  '--contour-drawer-stroke-width'?: ColorProperty;\\n  '--contour-drawer-fill-color'?: ColorProperty;\\n\\n  '--pin-color'?: ColorProperty;\\n  '--pin-focused-color'?: ColorProperty;\\n}\\n\\nexport const blockStyle = css`\\n  --contour-viewer-color: #ffffff;\\n  --contour-viewer-focused-color: rgb(255, 194, 17);\\n  --contour-viewer-stroke-width: 3px;\\n  --contour-viewer-focused-stroke-width: 6px;\\n  --contour-viewer-fill-color: rgba(0, 0, 0, 0.2);\\n  --contour-viewer-focused-fill-color: rgba(0, 0, 0, 0.4);\\n\\n  --contour-drawer-color: rgb(255, 224, 0);\\n  --contour-drawer-stroke-width: 4px;\\n  --contour-drawer-fill-color: rgba(255, 224, 0, 0.2);\\n\\n  --pin-color: #ffffff;\\n  --pin-focused-color: rgb(255, 194, 17);\\n`;\\n\\nexport const globalStyle = css`\\n  :root {\\n    ${blockStyle};\\n  }\\n`;\\n\"","import { Contour } from '@lunit/insight-viewer';\n\nexport function labelFunction(contour: Contour): string {\n  return `Annotation(${contour.id})`;\n}\n\nexport const initialContours: Omit<Contour, 'id'>[] = [\n  {\n    polygon: [\n      [340.48, 232.95999999999998],\n      [265.38666666666666, 232.10666666666668],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [173.2266666666667, 381.44],\n      [276.48, 400.21333333333337],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n  {\n    polygon: [\n      [419.84000000000003, 448.85333333333335],\n      [361.81333333333333, 407.04],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'normal',\n    },\n  },\n  {\n    polygon: [\n      [174.93333333333334, 88.74666666666668],\n      [215.89333333333335, 129.70666666666665],\n    ],\n    label: labelFunction,\n    dataAttrs: {\n      'data-category': 'abnormal',\n    },\n  },\n];\n","import {\n  CircleDrawer,\n  CircleViewer,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport { labelFunction } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data and user drawing behaviors\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'circle',\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <CircleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              focusedContour={focusedContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n          {contours && cornerstoneRenderData && control === 'pen' && (\n            <CircleDrawer\n              width={width}\n              height={height}\n              contours={contours}\n              draw={control === 'pen' && divElement}\n              onFocus={focusContour}\n              onAdd={contour => addContour(contour, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CircleDrawer,\\n  CircleViewer,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\nimport { labelFunction } from '../../../__fixtures__/circle';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data and user drawing behaviors\\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\\n    mode: 'circle',\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && contours.length > 0 && cornerstoneRenderData && (\\n            <CircleViewer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              focusedContour={focusedContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n          {contours && cornerstoneRenderData && control === 'pen' && (\\n            <CircleDrawer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              draw={control === 'pen' && divElement}\\n              onFocus={focusContour}\\n              onAdd={contour => addContour(contour, { label: labelFunction })}\\n              onRemove={removeContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  CircleDrawer,\n  CircleViewer,\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useContour,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { labelFunction } from '../../../__fixtures__/circle';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst CustomStyleDrawer = styled(CircleDrawer)`\n  --contour-drawer-color: #ff0000;\n  --contour-drawer-fill-color: rgba(255, 255, 255, 0.4);\n  --contour-drawer-stroke-width: 7px;\n`;\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  // create contour data and user drawing behaviors\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\n    mode: 'circle',\n  });\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\n          />\n          {contours && contours.length > 0 && cornerstoneRenderData && (\n            <CircleViewer\n              width={width}\n              height={height}\n              contours={contours}\n              focusedContour={focusedContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n          {contours && cornerstoneRenderData && control === 'pen' && (\n            <CustomStyleDrawer\n              width={width}\n              height={height}\n              contours={contours}\n              draw={control === 'pen' && divElement}\n              onFocus={focusContour}\n              onAdd={contour => addContour(contour, { label: labelFunction })}\n              onRemove={removeContour}\n              cornerstoneRenderData={cornerstoneRenderData}\n            />\n          )}\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CircleDrawer,\\n  CircleViewer,\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useContour,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\nimport styled from 'styled-components';\\nimport { labelFunction } from '../../../__fixtures__/circle';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pen', ['none', 'pan', 'pen', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nconst CustomStyleDrawer = styled(CircleDrawer)`\\n  --contour-drawer-color: #ff0000;\\n  --contour-drawer-fill-color: rgba(255, 255, 255, 0.4);\\n  --contour-drawer-stroke-width: 7px;\\n`;\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  // create contour data and user drawing behaviors\\n  const { contours, focusedContour, addContour, removeContour, focusContour } = useContour({\\n    mode: 'circle',\\n  });\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={updateCornerstoneRenderData}\\n          />\\n          {contours && contours.length > 0 && cornerstoneRenderData && (\\n            <CircleViewer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              focusedContour={focusedContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n          {contours && cornerstoneRenderData && control === 'pen' && (\\n            <CustomStyleDrawer\\n              width={width}\\n              height={height}\\n              contours={contours}\\n              draw={control === 'pen' && divElement}\\n              onFocus={focusContour}\\n              onAdd={contour => addContour(contour, { label: labelFunction })}\\n              onRemove={removeContour}\\n              cornerstoneRenderData={cornerstoneRenderData}\\n            />\\n          )}\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<CircleDrawer>`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`<ContourDrawer>`}</inlineCode>{`와 마찬가지로 단순히 그리는 기능만 있고, 그려진 Contour 데이터들은 `}<inlineCode parentName=\"p\">{`<CircleViewer>`}</inlineCode>{`에서 처리해야 한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface CircleDrawerProps<T extends Contour> extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n  \n  /** Contour 데이터를 상속받은 Annotation 데이터 */\n  contours: T[];\n  \n  /**\n   * 그리기 기능 활성화 여부\n   *\n   * <InsightViewer> 와 마찬가지로 HTMLElement로 입력할 경우 MouseEvent를 해당 HTMLElement를 사용해서 처리한다\n   */\n  draw: boolean | HTMLElement | null;\n  \n  /**\n   * 특정 Contour에 Mouse Over 되었을 때\n   * focusedContour를 결정하는데 필요하다\n   */\n  onFocus: (contour: T | null) => void;\n  \n  /** 그리기가 완료되어 새로운 Contour가 발생했을 때 */\n  onAdd: (polygon: Point[], event: MouseEvent) => void;\n  \n  /** 특정 Contour를 Click 해서 지울때 필요하다 */\n  onRemove: (contour: T) => void;\n  \n  className?: string;\n  style?: CSSProperties;\n  \n  /** 그리는 과정에서 Line에 표현되는 Animation을 비활성 시킬 수 있다 */\n  animateStroke?: boolean;\n}\n`}</code></pre>\n    <Example example={component('./CircleDrawer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`Styling`}</h1>\n    <p><inlineCode parentName=\"p\">{`<ContourDrawer>`}</inlineCode>{`와 마찬가지로 CSS Variable을 통해서 색상을 변경할 수 있다.`}</p>\n    <p><inlineCode parentName=\"p\">{`<ContourDrawer>`}</inlineCode>{`와 마찬가지로 `}<inlineCode parentName=\"p\">{`--contour-drawer-*`}</inlineCode>{`의 이름을 가진 항목들에 영향을 받는다.`}</p>\n    <Example example={source('../../theme/style')} mdxType=\"Example\" />\n    <Example example={component('./CircleDrawer/CustomStyle')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
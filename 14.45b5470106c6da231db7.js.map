{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/types.ts","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/SetData.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/SetData.tsx?fe43","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/MirrorData.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/MirrorData.tsx?2a4b","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/GetData.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/GetData.tsx?1c36","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData.mdx"],"names":["installWADOImageLoader","image","useMemo","CornerstoneSingleImage","unload","unloadImage","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","resetTime","Date","now","interactions","useViewerInteractions","style","display","width","height","invert","flip","position","backgroundColor","posMap","data","engine_result","pos_map","threshold","image1","image2","image3","viewer2","useRef","viewer3","updateMasterRenderData","useViewportMirroring","ref","log","setLog","useState","useCallback","renderData","console","prevLog","JSON","stringify","viewport","overflowY","fontSize","map","line","i","key","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","isMDXComponent"],"mappings":"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","file":"14.45b5470106c6da231db7.js","sourcesContent":["export default \"export interface CornerstoneRenderData {\\n  /** cornerstone이 그림을 그리고 있는 CanvasRenderingContext2D */\\n  canvasContext: CanvasRenderingContext2D;\\n\\n  /** cornerstone이 그림을 그리고 있는 HTMLElement */\\n  element: HTMLElement;\\n\\n  /**\\n   * cornerstone의 Rendering에 관련된 정보들\\n   *\\n   * - <HeatmapViewer>, <ContourViewer> 등 <InsightViewer>와 화면을 동기화 시키는 기능을 만들 때 사용된다.\\n   * - 그 외, 잡다한 Rendering에 관련된 거의 대부분의 정보들을 얻을 수 있다\\n   */\\n  enabledElement: cornerstone.EnabledElement;\\n\\n  /**\\n   * cornerstone이 화면에 그리고 있는 Image 객체\\n   * interface CornerstoneImage 와 연관된다\\n   *\\n   * @see CornerstoneImage.image\\n   */\\n  image: cornerstone.Image;\\n\\n  renderTimeInMs: number;\\n\\n  /**\\n   * cornerstone이 화면에 그리고 있는 Viewport 상태\\n   *\\n   * - useViewportMirroring()과 같이 <InsightViewer>들의 화면을 동기화 시키는 기능을 만들 때 사용된다.\\n   * - 그 외, 현재 cornerstone 화면 상태에 대한 거의 대부분의 정보들으 얻을 수 있다\\n   */\\n  viewport: cornerstone.Viewport;\\n}\\n\\n/** [x, y] */\\nexport type Point = [number, number];\\n\\n/**\\n * UserContoureViewer와 같은 곳에서 사용된다\\n *\\n * Annotation Tool, OPT 등 Annotation을 해야 하는 상황에서 데이터가 된다.\\n *\\n * 직접 사용하지 말고, 내부적으로 상속해서 새로운 데이터를 생성해야 한다.\\n */\\nexport interface Contour {\\n  /** 일종의 label 역할을 한다 */\\n  id: number;\\n\\n  /**\\n   * Mode에 따라 사용하는 방식이 다르다\\n   * - (mode: contour) = [[x, y], [x, y], [x, y]...]\\n   * - (mode: circle) = [[centerX, centerY][radius, ]]\\n   * - (mode: point) = [[x, y]]\\n   */\\n  polygon: Point[];\\n\\n  /** 존재하는 경우 id 대신 출력된다 */\\n  label?: ((contour: this) => string) | string;\\n\\n  /**\\n   * svg element에 data-* 형식의 attribute를 넣어주게 된다.\\n   * 해당 attribute들을 기준으로 css styling과 같은 기능들을 구현할 수 있다.\\n   */\\n  dataAttrs?: { [attr: string]: string };\\n}\\n\\nexport interface ViewportTransformParams {\\n  element: HTMLElement;\\n  minScale: number;\\n  maxScale: number;\\n  currentViewport: cornerstone.Viewport | null;\\n}\\n\\nexport type ViewportTransform = (params: ViewportTransformParams) => Partial<cornerstone.Viewport> | undefined;\\n\\nexport interface CornerstoneViewerLike {\\n  getMinScale: () => number;\\n  getMaxScale: () => number;\\n  getElement: () => HTMLElement;\\n  getContentWindow: () => Window;\\n  getCurrentViewport: () => cornerstone.Viewport;\\n  updateViewport: (patch: Partial<cornerstone.Viewport>) => void;\\n  getViewportTransformParams: () => ViewportTransformParams;\\n}\\n\\nexport type Interaction = (viewer: CornerstoneViewerLike) => () => void;\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  HeatmapViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useInsightViewerSync,\n  useViewerInteractions,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport data from '../../../__fixtures__/posMap.sample.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  const resetTime = useMemo<number>(() => Date.now(), []);\n\n  const interactions = useViewerInteractions(['pan', 'zoom']);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <CornerstoneViewer\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image}\n        updateCornerstoneRenderData={updateCornerstoneRenderData} // 받아서\n      />\n      <div style={{ position: 'relative', width: 400, height: 500, backgroundColor: 'navy' }}>\n        <HeatmapViewer\n          width={400}\n          height={500}\n          posMap={data.engine_result.engine_result.pos_map}\n          threshold={0.1}\n          cornerstoneRenderData={cornerstoneRenderData} // 넣어준다\n        />\n      </div>\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  HeatmapViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useInsightViewerSync,\\n  useViewerInteractions,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport data from '../../../__fixtures__/posMap.sample.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  const resetTime = useMemo<number>(() => Date.now(), []);\\n\\n  const interactions = useViewerInteractions(['pan', 'zoom']);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <CornerstoneViewer\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image}\\n        updateCornerstoneRenderData={updateCornerstoneRenderData} // 받아서\\n      />\\n      <div style={{ position: 'relative', width: 400, height: 500, backgroundColor: 'navy' }}>\\n        <HeatmapViewer\\n          width={400}\\n          height={500}\\n          posMap={data.engine_result.engine_result.pos_map}\\n          threshold={0.1}\\n          cornerstoneRenderData={cornerstoneRenderData} // 넣어준다\\n        />\\n      </div>\\n    </div>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useViewerInteractions,\n  useViewportMirroring,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useRef } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image1: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const image2: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000020.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const image3: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000030.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const viewer2 = useRef<CornerstoneViewer>(null);\n  const viewer3 = useRef<CornerstoneViewer>(null);\n\n  const { updateMasterRenderData } = useViewportMirroring(viewer2, viewer3);\n\n  const resetTime = useMemo<number>(() => Date.now(), []);\n\n  const interactions = useViewerInteractions(['pan', 'zoom']);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <CornerstoneViewer\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image1}\n        updateCornerstoneRenderData={updateMasterRenderData}\n      />\n      <CornerstoneViewer\n        ref={viewer2}\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image2}\n        updateCornerstoneRenderData={() => {}}\n      />\n      <CornerstoneViewer\n        ref={viewer3}\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image3}\n        updateCornerstoneRenderData={() => {}}\n      />\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useViewerInteractions,\\n  useViewportMirroring,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useRef } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image1: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const image2: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000020.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const image3: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000030.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const viewer2 = useRef<CornerstoneViewer>(null);\\n  const viewer3 = useRef<CornerstoneViewer>(null);\\n\\n  const { updateMasterRenderData } = useViewportMirroring(viewer2, viewer3);\\n\\n  const resetTime = useMemo<number>(() => Date.now(), []);\\n\\n  const interactions = useViewerInteractions(['pan', 'zoom']);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <CornerstoneViewer\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image1}\\n        updateCornerstoneRenderData={updateMasterRenderData}\\n      />\\n      <CornerstoneViewer\\n        ref={viewer2}\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image2}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n      <CornerstoneViewer\\n        ref={viewer3}\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image3}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n    </div>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneRenderData,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useViewerInteractions,\n} from '@lunit/insight-viewer';\nimport React, { useCallback, useMemo, useState } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [log, setLog] = useState<string[]>(() => []);\n\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const updateCornerstoneRenderData = useCallback((renderData: CornerstoneRenderData) => {\n    console.log('UPDATE RENDER DATA:', renderData);\n    setLog((prevLog) => [...prevLog, `[update]: ${JSON.stringify(renderData.viewport)}`]);\n  }, []);\n\n  const resetTime = useMemo<number>(() => Date.now(), []);\n\n  const interactions = useViewerInteractions(['pan', 'zoom']);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <CornerstoneViewer\n        width={400}\n        height={500}\n        invert={false} // 색상을 반전한다\n        flip={false} // 이미지를 좌우로 뒤집는다\n        interactions={interactions} // 활성화 시킬 Interaction\n        resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n        image={image}\n        updateCornerstoneRenderData={updateCornerstoneRenderData}\n      />\n      <div style={{ height: 500, overflowY: 'auto' }}>\n        <ul style={{ fontSize: 11 }}>\n          {log.map((line, i) => (\n            <li key={i}>{line}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneRenderData,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useViewerInteractions,\\n} from '@lunit/insight-viewer';\\nimport React, { useCallback, useMemo, useState } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>(() => []);\\n\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const updateCornerstoneRenderData = useCallback((renderData: CornerstoneRenderData) => {\\n    console.log('UPDATE RENDER DATA:', renderData);\\n    setLog((prevLog) => [...prevLog, `[update]: ${JSON.stringify(renderData.viewport)}`]);\\n  }, []);\\n\\n  const resetTime = useMemo<number>(() => Date.now(), []);\\n\\n  const interactions = useViewerInteractions(['pan', 'zoom']);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <CornerstoneViewer\\n        width={400}\\n        height={500}\\n        invert={false} // 색상을 반전한다\\n        flip={false} // 이미지를 좌우로 뒤집는다\\n        interactions={interactions} // 활성화 시킬 Interaction\\n        resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n        image={image}\\n        updateCornerstoneRenderData={updateCornerstoneRenderData}\\n      />\\n      <div style={{ height: 500, overflowY: 'auto' }}>\\n        <ul style={{ fontSize: 11 }}>\\n          {log.map((line, i) => (\\n            <li key={i}>{line}</li>\\n          ))}\\n        </ul>\\n      </div>\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`interface CornerstoneRenderData`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`cornerstone.EVENTS.IMAGE_RENDERED`}</inlineCode>{` Event에 의해서 발생되는 데이터이다.`}</p>\n    <p>{`화면을 그려내는 대부분의 상황에 사용된다.`}</p>\n    <Example example={source('@lunit/insight-viewer/types')} api={['CornerstoneRenderData']} mdxType=\"Example\" />\n    <h1><inlineCode parentName=\"h1\">{`CornerstoneRenderData`}</inlineCode>{` 얻기`}</h1>\n    <p>{`아래와 같이 `}<inlineCode parentName=\"p\">{`<CornerstoneViewer updateCornerstoneRenderData={(renderData: CornerstoneRenderData) => void} />`}</inlineCode>{`를 사용해서 얻을 수 있다.`}</p>\n    <Example example={component('./CornerstoneRenderData/GetData')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    <p><strong parentName=\"p\">{`얻는 방법이 궁금하다면 `}<inlineCode parentName=\"strong\">{`InsightViewer`}</inlineCode>{` Class의 `}<inlineCode parentName=\"strong\">{`onImageRenderered`}</inlineCode>{`에서 확인할 수 있다.`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export class InsightViewer extends Component<InsightViewerProps, {}> {\n  //code 생략...\n\n  componentDidMount() {\n    // cornerstone의 imagernderered event를 받는다.\n    // image가 render 될때마다 context로 enabledElement를 배포해주기 위해 필요하다.\n    this.element.addEventListener(cornerstone.EVENTS.IMAGE_RENDERED, this.onImageRenderered);\n  }\n\n  componentWillUnmount() {\n    this.element.removeEventListener(cornerstone.EVENTS.IMAGE_RENDERED, this.onImageRenderered);\n  }\n\n  onImageRenderered = (event: cornerstone.CornerstoneEvent) => {\n    const eventData: cornerstone.CornerstoneEventData | undefined = event.detail;\n    if (\n      eventData &&\n      eventData.canvasContext &&\n      eventData.element &&\n      eventData.enabledElement &&\n      eventData.image &&\n      typeof eventData.renderTimeInMs === 'number' &&\n      eventData.viewport\n    ) {\n      this.currentViewport = eventData.viewport;\n      this.props.updateCornerstoneRenderData(eventData as CornerstoneRenderData);\n    } else {\n      console.error('CornerstoneEventData에 없는 정보가 있다???', eventData);\n    }\n  };\n}\n`}</code></pre>\n    <h1>{`얻은 `}<inlineCode parentName=\"h1\">{`CornerstoneRenderData`}</inlineCode>{` 사용하기`}</h1>\n    <p>{`얻어낸 `}<inlineCode parentName=\"p\">{`CornerstoneRenderData`}</inlineCode>{`는 아래와 같이 `}<inlineCode parentName=\"p\">{`<HeatmapViewer>`}</inlineCode>{`와 같은 화면 동기화를 필요로 하는 다른 Component에 전달해줄 수 있다.`}</p>\n    <Example example={component('./CornerstoneRenderData/SetData')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    <p>{`혹은 동기화 도구를 사용해서 여러개의 `}<inlineCode parentName=\"p\">{`<CornerstoneViewer>`}</inlineCode>{`들을 동기화 시킬 수도 있다.`}</p>\n    <Example example={component('./CornerstoneRenderData/MirrorData')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    <p><strong parentName=\"p\">{`얻을 필요가 없다면`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`updateCornerstoneRenderData: (renderData: CornerstoneRenderData) => void;`}</inlineCode>{`은 함수여야 하기 때문에 빈값이 아니라 `}<inlineCode parentName=\"p\">{`updateCornerstoneRenderData={() => {}}`}</inlineCode>{` 함수형태로 넣어줘야 한다.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
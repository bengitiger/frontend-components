{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/Basic.tsx?f826","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/DelegateInteraction.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/DelegateInteraction.tsx?128d","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/InvertAndFlip.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer/InvertAndFlip.tsx?1064","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","options","resetTime","pan","adjust","zoom","updateCornerstoneRenderData","divElement","setDivElement","useState","ref","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"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","file":"16.a6564de14448dcb0d0bc.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement} // divElement를 사용해서 Pan Interaction을 처리한다\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={() => {}}\n          />\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement} // divElement를 사용해서 Pan Interaction을 처리한다\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={() => {}}\\n          />\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [true],\n  invert: [true],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [true],\\n  invert: [true],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><del parentName=\"h1\"><inlineCode parentName=\"del\">{`<InsightViewer>`}</inlineCode></del>{` Deprecated`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`<CornerstoneViewer>`}</inlineCode>{`를 사용`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\">{`포함되어 있는 기능들`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`*.dcm`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`*.jpg`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`*.png`}</inlineCode>{` 등의 이미지를 그린다`}</li>\n          <li parentName=\"ul\">{`Pan, Adjust, Flip, Invert 등 기본적인 User Interaction 이나 Dicom Display 에 관련된 기능들을 구현한다`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`포함되어 있지 않은 기능들`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Heatmap 또는 Contour 처리 → `}<inlineCode parentName=\"li\">{`<HeatmapViewer>`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`<ContourViewer>`}</inlineCode>{` 에서 구현됨`}</li>\n          <li parentName=\"ul\">{`DBT 등에 사용되는 Series Image 기능 구현 → `}<inlineCode parentName=\"li\">{`class CornerstoneSeriesImage`}</inlineCode>{` 를 통해 구현됨`}</li>\n          <li parentName=\"ul\">{`여러개의 화면들을 동기화 시키거나 하는 Viewport 동기화 → `}<inlineCode parentName=\"li\">{`useViewportMirroring()`}</inlineCode>{` 등 Utility Hook을 통해 구현됨`}</li>\n        </ul></li>\n    </ul>\n    <p>{`아래와 같은 React Props를 가지고 있다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface InsightViewerProps extends InsightViewerHostProps {\n  width: number;\n  height: number;\n  \n  image: CornerstoneImage;\n  \n  /**\n   * Pan Action (Mouse Drag)\n   * \n   * - \\`true\\` 로 입력되는 경우 자체 Element를 사용해서 Event를 처리한다\n   * - \\`HTMLElement\\` 로 입력되는 경우 해당 Element를 사용해서 Event를 처리한다\n   * - \\`false | null\\` 로 입력되는 경우 Pan 기능을 끈다\n   */\n  pan: boolean | HTMLElement | null;\n  \n  /**\n   * Adjust Action (Mouse Drag)\n   *\n   * - \\`true\\` 로 입력되는 경우 자체 Element를 사용해서 Event를 처리한다\n   * - \\`HTMLElement\\` 로 입력되는 경우 해당 Element를 사용해서 Event를 처리한다\n   * - \\`false | null\\` 로 입력되는 경우 Adjust 기능을 끈다\n   */\n  adjust: boolean | HTMLElement | null;\n  \n  /**\n   * Zoom Action (Mouse Wheel)\n   *\n   * - \\`true\\` 로 입력되는 경우 자체 Element를 사용해서 Event를 처리한다\n   * - \\`HTMLElement\\` 로 입력되는 경우 해당 Element를 사용해서 Event를 처리한다\n   * - \\`false | null\\` 로 입력되는 경우 Wheel 기능을 끈다\n   */\n  zoom: boolean | HTMLElement | null;\n  \n  /** Invert Color Image */\n  invert: boolean;\n  \n  /** Flip Image */\n  flip: boolean;\n  \n  /**\n   * Date.now() 로 입력하면 된다.\n   * 값이 변경되는 경우 Pan, Adjust, Zoom 으로 변경된 상태들이 초기화 된다.\n   */\n  resetTime: number;\n  \n  /**\n   * Image가 최초 그려지는 순간 변경한다\n   */\n  defaultViewportTransforms?: ViewportTransform[];\n}\n`}</code></pre>\n    <h1>{`기본적인 사용`}</h1>\n    <Example example={component('./InsightViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`외부 HTML Element를 사용해서 Event 처리`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<InsightViewer/>\n<HeatmapViewer/>\n<ContourViewer/>\n<ContourDrawer/>\n`}</code></pre>\n    <p>{`위와 같이 여러개의 Component들을 Layer로 겹쳐 사용하는 경우 `}<inlineCode parentName=\"p\">{`MouseEvent`}</inlineCode>{`와 같은 사용자 입력이 차단될 수 있다.`}</p>\n    <p>{`이와 같은 Layer 구성 문제를 비롯한 여러 User Interaction을 외부에 위임하기 위해, 일부 속성들은 `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode>{` 뿐만 아니라 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`로 입력될 수 있다.`}</p>\n    <Example example={component('./InsightViewer/DelegateInteraction')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <p><inlineCode parentName=\"p\">{`InsightViewer`}</inlineCode>{` Class에서 `}<inlineCode parentName=\"p\">{`startPanInteraction`}</inlineCode>{`을 보면 더 자세히 확인할 수 있다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// ---------------------------------------------\n// event handlers\n// ---------------------------------------------\nstartPanInteraction = (pan: boolean | HTMLElement | null) => {\n  if (this.teardownPanInteraction) {\n    this.teardownPanInteraction();\n  }\n\n  /**\n  * \\`pan: boolean | HTMLElement | null\\` pan의 타입을 확인 한 후 element 변수에 저장한다.\n  * boolean 일 때는 this.element\n  * HTMLElement일 때는 pan\n  */\n  const element: HTMLElement | null =\n    pan instanceof this.contentWindow['HTMLElement'] ? (pan as HTMLElement) : pan === true ? this.element : null;\n\n  /**\n  * pan이 HTMLElement이거나 boolean 타입 일 때\n  * /interactions/startPanInteraction에 있는 \\`startPanInteraction()\\`을 실행한다.\n  */\n  if (element) {\n    this.teardownPanInteraction = startPanInteraction({\n      element,\n      getCurrentViewport: () => this.currentViewport!,\n      onMove: (translation: cornerstone.Vec2) => this.updateCurrentViewport({ translation }),\n      onEnd: () => {},\n      contentWindow: this.contentWindow,\n    });\n  }\n};\n`}</code></pre>\n    <h1>{`Tests`}</h1>\n    <p><inlineCode parentName=\"p\">{`flip={true} invert={true}`}</inlineCode>{` 기본값 Test`}</p>\n    <Example example={component('./InsightViewer/InvertAndFlip')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
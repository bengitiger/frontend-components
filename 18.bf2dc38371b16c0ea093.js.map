{"version":3,"sources":["webpack:///./src/_packages/@lunit/opt-components/components/useAlert.tsx?48e4","webpack:///./src/_packages/@lunit/opt-components/components/useConfirm.tsx?ac1e","webpack:///./src/_packages/@lunit/use-dialog/__pages__/Samples/Basic.tsx","webpack:///./src/_packages/@lunit/use-dialog/__pages__/Samples/Basic.tsx?4d95","webpack:///./src/_packages/@lunit/use-dialog/__pages__/Samples/FormDialog.tsx","webpack:///./src/_packages/@lunit/use-dialog/__pages__/Samples/FormDialog.tsx?cffd","webpack:///./src/_packages/@lunit/use-dialog/__pages__/Basic.mdx"],"names":["openAlert","alertElement","useAlert","openConfirm","confirmElement","useConfirm","onAlert","useCallback","async","description","onConfirm","result","onClick","FormTemplate","props","FormComponent","initialValue","closeDialog","value","setValue","useState","open","onClose","aria-labelledby","aria-describedby","id","inputProps","style","color","fullWidth","onChange","target","layout","label","width","autoFocus","disabled","trim","length","openForm","formElement","useDialog","onFormOpen","marginTop","layoutProps","MDXContent","components","mdxType","parentName","example","source","component","height","isMDXComponent"],"mappings":"2FAAA,OAAe,+kD,iCCAf,OAAe,24C,8ECIA,eACb,MAAOA,EAAWC,GAAgBC,eAC3BC,EAAaC,GAAkBC,cAEhCC,EAAUC,sBAAYC,gBACpBR,EAAU,CACdS,YAAa,qBAEd,CAACT,IAEEU,EAAYH,sBAAYC,UAC5B,MAAMG,QAAwBR,EAAY,CACxCM,YAAa,4BAGTT,EAAU,CACdS,YAAc,qBAAoBE,OAEnC,CAACR,EAAaH,IAEjB,OACE,6BACE,uBAAQY,QAASN,GAAjB,cAEA,uBAAQM,QAASF,GAAjB,gBAECT,EACAG,K,iCC/BP,OAAe,44B,gGCiBf,MAAMS,EAAuDC,GACpD,kBAACC,EAAkBD,GAI5B,SAASC,GAAc,aAAEC,EAAe,GAAjB,YAAqBC,IAC1C,MAAOC,EAAOC,GAAYC,mBAAiB,IAAMJ,GAEjD,OACE,kBAAC,IAAD,CACEK,MAAI,EACJC,QAAS,IAAML,EAAY,MAC3BM,kBAAgB,qBAChBC,mBAAiB,4BAEjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBC,GAAG,4BACpB,uBACEC,WAAY,CACVC,MAAO,CACLC,MAAO,UAGXC,WAAS,EACTX,MAAOA,EACPY,SAAU,EAAGC,YAAaZ,EAASY,EAAOb,WAKhD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQc,OAAO,SAASC,MAAM,SAASN,MAAO,CAAEO,MAAO,KAAOtB,QAAS,IAAMK,EAAY,QACzF,kBAAC,IAAD,CACEkB,WAAS,EACTH,OAAO,SACPC,MAAM,KACNN,MAAO,CAAEO,MAAO,KAChBE,SAAUlB,EAAMmB,SAAWrB,EAAaqB,QAAkC,IAAxBnB,EAAMmB,OAAOC,OAC/D1B,QAAS,IAAMK,EAAY,CAAEC,cAOxB,eACb,MAAOA,EAAOC,GAAYC,mBAAiB,KAEpCmB,EAAUC,GArDVC,YAAU5B,GAuDX6B,EAAanC,sBAAYC,UAE7B,MAAMG,QAA2B4B,EAAS,CACxCvB,aAAcE,IAIZP,GAEFQ,EAASR,EAAOO,QAEjB,CAACA,EAAOqB,IAEX,OACE,6BACE,uBAAW3B,QAAS8B,GAApB,aAEA,yBAAKf,MAAO,CAAEgB,UAAW,KAAOzB,GAG/BsB,K,iCCvFP,OAAe,6mG,iCCCf,wFAQA,MAKMI,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGhC,IAEH,OAAO,YALS,UAKT,iBAAe8B,EAAiB9B,EAAhC,CAAuCgC,WAAYA,EAAYC,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,sBAClC,qBAAK,uFACL,8BACE,iBAAGA,WAAW,cAAe,yKAE/B,sBAAI,0BAAYA,WAAW,MAAO,cAA2B,KAAI,0BAAYA,WAAW,MAAO,iBAC/F,qBAAK,mCAAS,0BAAYA,WAAW,KAAM,yCAAsD,gEAAuB,kBAAIA,WAAW,MAAW,KACpJ,0BAAYA,WAAW,KAAM,eAA4B,0GACvD,YAAC,UAAD,CAASC,QAASC,YAAO,4CAAD,UAAC,KAAD,yEAA+CH,QAAQ,YAC/E,YAAC,UAAD,CAASE,QAASC,YAAO,8CAAD,UAAC,KAAD,2EAAiDH,QAAQ,YACjF,qBAAK,sHACL,YAAC,UAAD,CAASE,QAASE,YAAU,kBAAD,aAAC,KAAD,SAAC,KAAD,yEAAqBJ,QAAQ,WAC1D,YAAC,IAAD,CAAsBK,OAAQ,IAAKL,QAAQ,0BAEzC,sBAAM,8BACN,YAAC,UAAD,CAASE,QAASE,YAAU,uBAAD,aAAC,KAAD,SAAC,KAAD,8EAA0BJ,QAAQ,WAC/D,YAAC,IAAD,CAAsBK,OAAQ,IAAKL,QAAQ,2BAM7CF,EAAWQ,gBAAiB","file":"18.bf2dc38371b16c0ea093.js","sourcesContent":["export default \"import { DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\\nimport React, { ReactNode } from 'react';\\nimport { Button } from './Button';\\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from './Dialog';\\n\\n/**\\n * const [openAlert, alertElement] = useAlert()\\n *\\n * 필요할 때 `openAlert({description: '...'})` 형태로 호출하면 Alert이 열린다\\n *\\n * `<div>{alertElement}</div>` 와 같이 `alertElement`는 화면에 포함되어 있어야 한다.\\n */\\nexport function useAlert(): [OpenDialog<AlertParams, void>, ReactNode] {\\n  return useDialog(AlertDialogTemplate);\\n}\\n\\nexport interface AlertParams {\\n  title?: ReactNode;\\n  description: ReactNode;\\n  agree?: string;\\n}\\n\\nexport const AlertDialogTemplate: DialogTemplate<AlertParams, void> = ({\\n  closeDialog,\\n  title,\\n  description,\\n  agree = 'Agree',\\n}) => {\\n  return (\\n    <Dialog\\n      open\\n      onClose={() => closeDialog()}\\n      disableBackdropClick\\n      aria-labelledby=\\\"alert-dialog-title\\\"\\n      aria-describedby=\\\"alert-dialog-description\\\"\\n    >\\n      {title && <DialogTitle id=\\\"alert-dialog-title\\\">{title}</DialogTitle>}\\n\\n      <DialogContent>\\n        <DialogContentText id=\\\"alert-dialog-description\\\">{description}</DialogContentText>\\n      </DialogContent>\\n\\n      <DialogActions>\\n        <Button autoFocus layout=\\\"center\\\" label={agree} style={{ width: 150 }} onClick={() => closeDialog()} />\\n      </DialogActions>\\n    </Dialog>\\n  );\\n};\\n\"","export default \"import { DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\\nimport React, { ReactNode } from 'react';\\nimport { Button } from './Button';\\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from './Dialog';\\n\\nexport function useConfirm(): [OpenDialog<ConfirmParams, boolean>, ReactNode] {\\n  return useDialog(ConfirmDialogTemplate);\\n}\\n\\nexport interface ConfirmParams {\\n  title?: ReactNode;\\n  description: ReactNode;\\n  agree?: string;\\n  disagree?: string;\\n}\\n\\nexport const ConfirmDialogTemplate: DialogTemplate<ConfirmParams, boolean> = ({\\n  closeDialog,\\n  title,\\n  description,\\n  agree = 'Agree',\\n  disagree = 'Disagree',\\n}) => {\\n  return (\\n    <Dialog\\n      open\\n      onClose={() => closeDialog(false)}\\n      aria-labelledby=\\\"alert-dialog-title\\\"\\n      aria-describedby=\\\"alert-dialog-description\\\"\\n    >\\n      {title && <DialogTitle id=\\\"alert-dialog-title\\\">{title}</DialogTitle>}\\n\\n      <DialogContent>\\n        <DialogContentText id=\\\"alert-dialog-description\\\">{description}</DialogContentText>\\n      </DialogContent>\\n\\n      <DialogActions>\\n        <Button layout=\\\"center\\\" label={disagree} style={{ width: 150 }} onClick={() => closeDialog(false)} />\\n        <Button autoFocus layout=\\\"center\\\" label={agree} style={{ width: 150 }} onClick={() => closeDialog(true)} />\\n      </DialogActions>\\n    </Dialog>\\n  );\\n};\\n\"","import { useAlert, useConfirm } from '@lunit/opt-components';\nimport { Button } from '@material-ui/core';\nimport React, { useCallback } from 'react';\n\nexport default () => {\n  const [openAlert, alertElement] = useAlert();\n  const [openConfirm, confirmElement] = useConfirm();\n\n  const onAlert = useCallback(async () => {\n    await openAlert({\n      description: 'ALERT COMPONENT',\n    });\n  }, [openAlert]);\n\n  const onConfirm = useCallback(async () => {\n    const result: boolean = await openConfirm({\n      description: 'CONFIRM COMPONENT',\n    });\n\n    await openAlert({\n      description: `CONFIRM RESULT IS ${result}`,\n    });\n  }, [openConfirm, openAlert]);\n\n  return (\n    <div>\n      <Button onClick={onAlert}>Open Alert</Button>\n\n      <Button onClick={onConfirm}>Open Confirm</Button>\n\n      {alertElement}\n      {confirmElement}\n    </div>\n  );\n};\n","export default \"import { useAlert, useConfirm } from '@lunit/opt-components';\\nimport { Button } from '@material-ui/core';\\nimport React, { useCallback } from 'react';\\n\\nexport default () => {\\n  const [openAlert, alertElement] = useAlert();\\n  const [openConfirm, confirmElement] = useConfirm();\\n\\n  const onAlert = useCallback(async () => {\\n    await openAlert({\\n      description: 'ALERT COMPONENT',\\n    });\\n  }, [openAlert]);\\n\\n  const onConfirm = useCallback(async () => {\\n    const result: boolean = await openConfirm({\\n      description: 'CONFIRM COMPONENT',\\n    });\\n\\n    await openAlert({\\n      description: `CONFIRM RESULT IS ${result}`,\\n    });\\n  }, [openConfirm, openAlert]);\\n\\n  return (\\n    <div>\\n      <Button onClick={onAlert}>Open Alert</Button>\\n\\n      <Button onClick={onConfirm}>Open Confirm</Button>\\n\\n      {alertElement}\\n      {confirmElement}\\n    </div>\\n  );\\n};\\n\"","import { Button, Dialog, DialogActions, DialogContent, DialogContentText } from '@lunit/opt-components';\nimport { DialogProps, DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\nimport { Button as MuiButton, TextField } from '@material-ui/core';\nimport React, { ReactNode, useCallback, useState } from 'react';\n\ninterface FormParams {\n  initialValue?: string;\n}\n\ntype FormReturn = { value: string } | null;\n\nfunction useForm(): [OpenDialog<FormParams, FormReturn>, ReactNode] {\n  return useDialog(FormTemplate);\n}\n\n// 내부적으로 State (e.g. useState()) 를 사용하지 않으면 useAlert() 과 같이\n// FormTemplate 에서 바로 JSX Template을 구성하면 되지만,\nconst FormTemplate: DialogTemplate<FormParams, FormReturn> = props => {\n  return <FormComponent {...props} />;\n};\n\n// 아래와 같이 useState()를 사용하는 경우엔 이렇게 한 단계 더 만들어주도록 한다.\nfunction FormComponent({ initialValue = '', closeDialog }: DialogProps<FormParams, FormReturn>) {\n  const [value, setValue] = useState<string>(() => initialValue);\n\n  return (\n    <Dialog\n      open\n      onClose={() => closeDialog(null)}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <TextField\n            inputProps={{\n              style: {\n                color: 'black',\n              },\n            }}\n            fullWidth\n            value={value}\n            onChange={({ target }) => setValue(target.value)}\n          />\n        </DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button layout=\"center\" label=\"Cancel\" style={{ width: 150 }} onClick={() => closeDialog(null)} />\n        <Button\n          autoFocus\n          layout=\"center\"\n          label=\"OK\"\n          style={{ width: 150 }}\n          disabled={value.trim() === initialValue.trim() || value.trim().length === 0}\n          onClick={() => closeDialog({ value })}\n        />\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nexport default () => {\n  const [value, setValue] = useState<string>('');\n\n  const [openForm, formElement] = useForm();\n\n  const onFormOpen = useCallback(async () => {\n    // await를 사용해서 Dialog의 응답을 기다린다\n    const result: FormReturn = await openForm({\n      initialValue: value,\n    });\n\n    // null이 아닌 경우\n    if (result) {\n      // 얻어낸 result data를 처리한다\n      setValue(result.value);\n    }\n  }, [value, openForm]);\n\n  return (\n    <div>\n      <MuiButton onClick={onFormOpen}>Open Form</MuiButton>\n\n      <div style={{ marginTop: 20 }}>{value}</div>\n\n      {/* Element는 반드시 Binding 시켜줘야 한다 */}\n      {formElement}\n    </div>\n  );\n};\n","export default \"import { Button, Dialog, DialogActions, DialogContent, DialogContentText } from '@lunit/opt-components';\\nimport { DialogProps, DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\\nimport { Button as MuiButton, TextField } from '@material-ui/core';\\nimport React, { ReactNode, useCallback, useState } from 'react';\\n\\ninterface FormParams {\\n  initialValue?: string;\\n}\\n\\ntype FormReturn = { value: string } | null;\\n\\nfunction useForm(): [OpenDialog<FormParams, FormReturn>, ReactNode] {\\n  return useDialog(FormTemplate);\\n}\\n\\n// 내부적으로 State (e.g. useState()) 를 사용하지 않으면 useAlert() 과 같이\\n// FormTemplate 에서 바로 JSX Template을 구성하면 되지만,\\nconst FormTemplate: DialogTemplate<FormParams, FormReturn> = props => {\\n  return <FormComponent {...props} />;\\n};\\n\\n// 아래와 같이 useState()를 사용하는 경우엔 이렇게 한 단계 더 만들어주도록 한다.\\nfunction FormComponent({ initialValue = '', closeDialog }: DialogProps<FormParams, FormReturn>) {\\n  const [value, setValue] = useState<string>(() => initialValue);\\n\\n  return (\\n    <Dialog\\n      open\\n      onClose={() => closeDialog(null)}\\n      aria-labelledby=\\\"alert-dialog-title\\\"\\n      aria-describedby=\\\"alert-dialog-description\\\"\\n    >\\n      <DialogContent>\\n        <DialogContentText id=\\\"alert-dialog-description\\\">\\n          <TextField\\n            inputProps={{\\n              style: {\\n                color: 'black',\\n              },\\n            }}\\n            fullWidth\\n            value={value}\\n            onChange={({ target }) => setValue(target.value)}\\n          />\\n        </DialogContentText>\\n      </DialogContent>\\n\\n      <DialogActions>\\n        <Button layout=\\\"center\\\" label=\\\"Cancel\\\" style={{ width: 150 }} onClick={() => closeDialog(null)} />\\n        <Button\\n          autoFocus\\n          layout=\\\"center\\\"\\n          label=\\\"OK\\\"\\n          style={{ width: 150 }}\\n          disabled={value.trim() === initialValue.trim() || value.trim().length === 0}\\n          onClick={() => closeDialog({ value })}\\n        />\\n      </DialogActions>\\n    </Dialog>\\n  );\\n}\\n\\nexport default () => {\\n  const [value, setValue] = useState<string>('');\\n\\n  const [openForm, formElement] = useForm();\\n\\n  const onFormOpen = useCallback(async () => {\\n    // await를 사용해서 Dialog의 응답을 기다린다\\n    const result: FormReturn = await openForm({\\n      initialValue: value,\\n    });\\n\\n    // null이 아닌 경우\\n    if (result) {\\n      // 얻어낸 result data를 처리한다\\n      setValue(result.value);\\n    }\\n  }, [value, openForm]);\\n\\n  return (\\n    <div>\\n      <MuiButton onClick={onFormOpen}>Open Form</MuiButton>\\n\\n      <div style={{ marginTop: 20 }}>{value}</div>\\n\\n      {/* Element는 반드시 Binding 시켜줘야 한다 */}\\n      {formElement}\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`@lunit/use-dialog`}</inlineCode></h1>\n    <p>{`React Hook 형태의 Dialog를 만들기 위한 Wrapper.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Dialog Hook을 만들기 위한 Wrapper, 직접적으로 사용할 수 있는 Component는 아니다.`}</p>\n    </blockquote>\n    <h1><inlineCode parentName=\"h1\">{`useAlert()`}</inlineCode>{`, `}<inlineCode parentName=\"h1\">{`useConfirm()`}</inlineCode></h1>\n    <p>{`아래와 같이 `}<inlineCode parentName=\"p\">{`DialogTemplate<ParamType, RetrunType>`}</inlineCode>{` 형식의 Template을 만든 다음,`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`useDialog()`}</inlineCode>{`를 사용해서 새로운 Dialog Hook을 만들 수 있다.`}</p>\n    <Example example={source('@lunit/opt-components/components/useAlert')} mdxType=\"Example\" />\n    <Example example={source('@lunit/opt-components/components/useConfirm')} mdxType=\"Example\" />\n    <p>{`만들어진 Dialog Hook은 아래와 같이 사용할 수 있다.`}</p>\n    <Example example={component('./Samples/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={100} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    <h1>{`Custom Dialog 예제`}</h1>\n    <Example example={component('./Samples/FormDialog')} mdxType=\"Example\">\n  <InsightViewerPreview height={100} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
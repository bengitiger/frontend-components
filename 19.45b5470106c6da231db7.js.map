{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImageWithSeries.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImageWithSeries.tsx?dec6","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneViewerWithSeries.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneViewerWithSeries.tsx?0893","webpack:///./src/_packages/@lunit/insight-viewer/hooks/useSeriesImagePosition.ts?5cdd","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImagePosition.mdx"],"names":["installWADOImageLoader","image","useMemo","CornerstoneSeriesImage","series","map","p","unload","unloadImage","current","end","useSeriesImagePosition","style","position","top","left","padding","backgroundColor","onClick","prev","next","marginLeft","cornerstoneImage","width","height","resetTime","Date","now","interactions","useViewerInteractions","invert","flip","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","isMDXComponent"],"mappings":"ulBAAA,6CAWAA,mCAEe,eACb,MAAMC,EAAkCC,kBACtC,IACE,IAAIC,yBACFC,EAAOC,IAAIC,GAAM,4DAA2DA,KAC5E,CAAEC,OAAQC,gBAEd,KAGI,QAAEC,EAAF,IAAWC,GAAQC,iCAAuBV,GAEhD,OACE,oCACE,yBAAKW,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMjB,EAAMkB,QAA7B,QACA,4BAAQD,QAAS,IAAMjB,EAAMmB,QAA7B,QACA,6BACA,6BACGX,EADH,MACeC,IAGjB,yBAAKE,MAAO,CAAES,WAAY,MACxB,kBAAC,WAAD,CAAUC,iBAAkBrB,EAAOsB,MAAO,IAAKC,OAAQ,U,iCCpC/D,OAAe,inC,iCCAf,6CAYAxB,mCAEe,eACb,MAAMC,EAAkCC,kBACtC,IACE,IAAIC,yBACFC,EAAOC,IAAKC,GAAO,4DAA2DA,KAC9E,CAAEC,OAAQC,gBAEd,KAGI,QAAEC,EAAF,IAAWC,GAAQC,iCAAuBV,GAG1CwB,EAAYvB,kBAAQ,IAAMwB,KAAKC,MAAO,IAEtCC,EAAeC,gCAAsB,CAAC,MAAO,SAEnD,OACE,oCACE,yBAAKjB,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMjB,EAAMkB,QAA7B,QACA,4BAAQD,QAAS,IAAMjB,EAAMmB,QAA7B,QACA,6BACA,6BACGX,EADH,MACeC,IAGjB,yBAAKE,MAAO,CAAES,WAAY,MACxB,kBAAC,oBAAD,CACEE,MAAO,IACPC,OAAQ,IACRM,QAAQ,EACRC,MAAM,EACNH,aAAcA,EACdH,UAAWA,EACXxB,MAAOA,EACP+B,4BAA6B,a,iCClDvC,OAAe,+3D,iCCAf,OAAe,++B,iCCCf,+EAOA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,6BAClC,qBAAG,0BAAYA,WAAW,KAAM,0BAAuC,qGACvE,qBAAK,sBAAM,0BAAYA,WAAW,KAAM,0BAAuC,wJAC/E,sBAAM,OACN,YAAC,UAAD,CAASC,QAASC,YAAO,qDAAD,UAAC,KAAD,iFAAwDC,KAAG,EAACJ,QAAQ,YAC5F,sBAAM,UACN,YAAC,UAAD,CAASE,QAASG,YAAU,+CAAD,aAAC,KAAD,SAAC,KAAD,yGAAkDL,QAAQ,WACvF,YAAC,UAAD,CAASb,OAAQ,IAAKa,QAAQ,aAE5B,YAAC,UAAD,CAASE,QAASG,YAAU,wDAAD,aAAC,KAAD,SAAC,KAAD,kHAA2DL,QAAQ,WAChG,YAAC,UAAD,CAASb,OAAQ,IAAKa,QAAQ,cAMhCH,EAAWS,gBAAiB","file":"19.45b5470106c6da231db7.js","sourcesContent":["import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  DCMImage,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n      </div>\n      <div style={{ marginLeft: 120 }}>\n        <DCMImage cornerstoneImage={image} width={200} height={260} />\n      </div>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  DCMImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n      </div>\\n      <div style={{ marginLeft: 120 }}>\\n        <DCMImage cornerstoneImage={image} width={200} height={260} />\\n      </div>\\n    </>\\n  );\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  CornerstoneViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n  useViewerInteractions,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  // Render 때마다 resetTime이 변경되지 않도록, Memo 값을 만든다\n  const resetTime = useMemo(() => Date.now(), []);\n\n  const interactions = useViewerInteractions(['pan', 'zoom']);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n      </div>\n      <div style={{ marginLeft: 120 }}>\n        <CornerstoneViewer\n          width={400}\n          height={500}\n          invert={false} // 색상을 반전한다\n          flip={false} // 이미지를 좌우로 뒤집는다\n          interactions={interactions} // 활성화 시킬 Interaction\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      </div>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  CornerstoneViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n  useViewerInteractions,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  // Render 때마다 resetTime이 변경되지 않도록, Memo 값을 만든다\\n  const resetTime = useMemo(() => Date.now(), []);\\n\\n  const interactions = useViewerInteractions(['pan', 'zoom']);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n      </div>\\n      <div style={{ marginLeft: 120 }}>\\n        <CornerstoneViewer\\n          width={400}\\n          height={500}\\n          invert={false} // 색상을 반전한다\\n          flip={false} // 이미지를 좌우로 뒤집는다\\n          interactions={interactions} // 활성화 시킬 Interaction\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      </div>\\n    </>\\n  );\\n};\\n\"","export default \"import { CornerstoneSequenceImage } from '@lunit/insight-viewer';\\nimport { useEffect, useState } from 'react';\\n\\ninterface SeriesImagePosition {\\n  /** 현재 Image 위치 */\\n  current: number;\\n\\n  /** 총 Image 갯수 */\\n  end: number;\\n}\\n\\nexport function useSeriesImagePosition(image: CornerstoneSequenceImage): SeriesImagePosition {\\n  const [result, setResult] = useState<{ current: number; end: number }>(() => ({\\n    current: image.getIndex(),\\n    end: image.length() - 1,\\n  }));\\n\\n  useEffect(() => {\\n    const subscription = image.index.subscribe((current: number) => {\\n      setResult(prevResult => {\\n        return {\\n          ...prevResult,\\n          current,\\n          end: image.length() - 1,\\n        };\\n      });\\n    });\\n\\n    return () => {\\n      subscription.unsubscribe();\\n    };\\n  }, [image]);\\n\\n  return result;\\n}\\n\\n/** @deprecated use useSeriesImagePosition() */\\nexport const useBulkImagePosition = useSeriesImagePosition;\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useSeriesImagePosition()`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`CornerstoneSeriesImage`}</inlineCode>{`의 현재 이미지 위치를 알아낼 수 있다.`}</p>\n    <p>{`화면에 `}<inlineCode parentName=\"p\">{`CornerstoneSeriesImage`}</inlineCode>{`의 이미지 위치 정보를 표시해야 하는 경우 사용할 수 있다.`}</p>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/hooks/useSeriesImagePosition')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <Example example={component('../Basic/CornerstoneImage/DCMImageWithSeries')} mdxType=\"Example\">\n  <Preview height={280} mdxType=\"Preview\" />\n    </Example> \n    <Example example={component('../Basic/CornerstoneImage/CornerstoneViewerWithSeries')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
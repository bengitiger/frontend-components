{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/Basic.tsx?6013","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/InsightViewer.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/InsightViewer.tsx?788f","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll.mdx"],"names":["installWADOImageLoader","log","setLog","useState","image","useMemo","CornerstoneSeriesImage","series","map","p","unload","unloadImage","current","end","useSeriesImagePosition","scrollTargetElement","setScrollTargetElement","useSeriesImageScroll","element","useEffect","progressSubscription","progress","subscribe","prevLog","Math","floor","imageSubscription","cornerstoneImage","console","warn","imageId","unsubscribe","style","position","top","left","padding","backgroundColor","onClick","prev","next","ref","width","height","fontSize","marginLeft","line","i","key","wheel","setElement","enabled","invert","flip","pan","adjust","zoom","resetTime","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","overflowY","isMDXComponent"],"mappings":"ulBAAA,6CAWAA,mCAEe,eACb,MAAOC,EAAKC,GAAUC,mBAAmB,IAAM,IAEzCC,EAAkCC,kBACtC,IACE,IAAIC,yBACFC,EAAOC,IAAIC,GAAM,4DAA2DA,KAC5E,CAAEC,OAAQC,gBAEd,KAGI,QAAEC,EAAF,IAAWC,GAAQC,iCAAuBV,IAEzCW,EAAqBC,GAA0Bb,mBAA6B,MAyBnF,OAvBAc,+BAAqB,CACnBb,QACAc,QAASH,IAGXI,oBAAU,KAER,MAAMC,EAAuBhB,EAAMiB,SAASC,UAAWD,IACrDnB,EAAOqB,GAAW,IAAIA,EAAU,eAAcC,KAAKC,MAAiB,IAAXJ,UAIrDK,EAAoBtB,EAAMA,MAAMkB,UAAWK,IAC/CC,QAAQC,KAAK,oBAAqBF,GAClCzB,EAAOqB,GAAW,IAAIA,EAAU,YAAD,OAAYI,QAAZ,IAAYA,OAAZ,EAAYA,EAAkBG,cAG/D,MAAO,KACLV,EAAqBW,cACrBL,EAAkBK,gBAEnB,CAAC3B,IAGF,oCACE,yBAAK4B,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMlC,EAAMmC,QAA7B,QACA,4BAAQD,QAAS,IAAMlC,EAAMoC,QAA7B,QACA,6BACA,6BACG5B,EADH,MACeC,GAEf,yBAAK4B,IAAKzB,EAAwBgB,MAAO,CAAEU,MAAO,IAAKC,OAAQ,IAAKN,gBAAiB,QAArF,iBAIF,wBAAIL,MAAO,CAAEY,SAAU,GAAIC,WAAY,MACpC5C,EAAIO,IAAI,CAACsC,EAAMC,IACd,wBAAIC,IAAKD,GAAID,Q,iCCnEvB,OAAe,qtE,iCCAf,6CAYA9C,mCAEe,eACb,MAAMI,EAAkCC,kBACtC,IACE,IAAIC,yBACFC,EAAOC,IAAIC,GAAM,4DAA2DA,KAC5E,CAAEC,OAAQC,gBAEd,IAGIsC,EAAQ5C,kBAA2B,IAAM,SAAU,KAElDa,EAASgC,GAAc/C,mBAA6B,MAQ3D,OANAc,+BAAqB,CACnBb,QACAc,UACAiC,QAAmB,WAAVF,IAIT,kBAAC,yBAAD,CAAwBR,IAAKS,EAAYR,MAAO,IAAKC,OAAQ,KAC3D,kBAAC,gBAAD,CACED,MAAO,IACPC,OAAQ,IACRS,QAAQ,EACRC,MAAM,EACNC,IAAKpC,EACLqC,QAAQ,EACRC,KAAgB,SAAVP,GAAoB/B,EAC1BuC,UAAW,EACXrD,MAAOA,EACPsD,4BAA6B,Y,iCC9CrC,OAAe,wvD,iCCCf,+EAOA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,2BAClC,qBAAG,0BAAYA,WAAW,KAAM,0BAAuC,6GACvE,qBAAG,0BAAYA,WAAW,KAAM,eAA4B,mCAAS,0BAAYA,WAAW,KAAM,eAA4B,2CAC9H,YAAC,UAAD,CAASC,QAASC,YAAU,+BAAD,aAAC,KAAD,SAAC,KAAD,gGAAkCH,QAAQ,WACvE,YAAC,UAAD,CAASpB,OAAQ,IAAKX,MAAO,CACvBmC,UAAW,QACVJ,QAAQ,aAEb,sBAAI,0BAAYC,WAAW,MAAO,mBAAgC,oCAClE,qBAAG,0BAAYA,WAAW,KAAM,mCAAgD,uBAAO,0BAAYA,WAAW,KAAM,eAA4B,qEAChJ,YAAC,UAAD,CAASC,QAASC,YAAU,uCAAD,aAAC,KAAD,SAAC,KAAD,wGAA0CH,QAAQ,WAC/E,YAAC,UAAD,CAASpB,OAAQ,IAAKoB,QAAQ,cAMhCH,EAAWQ,gBAAiB","file":"19.d0f80f94ef8e3ae7c6e0.js","sourcesContent":["import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n  useSeriesImageScroll,\n} from '@lunit/insight-viewer';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [log, setLog] = useState<string[]>(() => []);\n\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  const [scrollTargetElement, setScrollTargetElement] = useState<HTMLElement | null>(null);\n\n  useSeriesImageScroll({\n    image,\n    element: scrollTargetElement,\n  });\n\n  useEffect(() => {\n    // progress 정보를 받는다\n    const progressSubscription = image.progress.subscribe((progress: number) => {\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\n    });\n\n    // image 정보를 받는다\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\n      console.warn('cornerstoneImage:', cornerstoneImage);\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\n    });\n\n    return () => {\n      progressSubscription.unsubscribe();\n      imageSubscription.unsubscribe();\n    };\n  }, [image]);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n        <div ref={setScrollTargetElement} style={{ width: 150, height: 200, backgroundColor: 'red' }}>\n          Scroll here!\n        </div>\n      </div>\n      <ul style={{ fontSize: 11, marginLeft: 180 }}>\n        {log.map((line, i) => (\n          <li key={i}>{line}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n  useSeriesImageScroll,\\n} from '@lunit/insight-viewer';\\nimport React, { useEffect, useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>(() => []);\\n\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  const [scrollTargetElement, setScrollTargetElement] = useState<HTMLElement | null>(null);\\n\\n  useSeriesImageScroll({\\n    image,\\n    element: scrollTargetElement,\\n  });\\n\\n  useEffect(() => {\\n    // progress 정보를 받는다\\n    const progressSubscription = image.progress.subscribe((progress: number) => {\\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\\n    });\\n\\n    // image 정보를 받는다\\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\\n      console.warn('cornerstoneImage:', cornerstoneImage);\\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\\n    });\\n\\n    return () => {\\n      progressSubscription.unsubscribe();\\n      imageSubscription.unsubscribe();\\n    };\\n  }, [image]);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n        <div ref={setScrollTargetElement} style={{ width: 150, height: 200, backgroundColor: 'red' }}>\\n          Scroll here!\\n        </div>\\n      </div>\\n      <ul style={{ fontSize: 11, marginLeft: 180 }}>\\n        {log.map((line, i) => (\\n          <li key={i}>{line}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  InsightViewer,\n  InsightViewerContainer,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImageScroll,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const wheel = useMemo<'zoom' | 'scroll'>(() => 'scroll', []);\n\n  const [element, setElement] = useState<HTMLElement | null>(null);\n\n  useSeriesImageScroll({\n    image,\n    element,\n    enabled: wheel === 'scroll',\n  });\n\n  return (\n    <InsightViewerContainer ref={setElement} width={400} height={500}>\n      <InsightViewer\n        width={400}\n        height={500}\n        invert={false} // 색상을 반전한다\n        flip={false} // 이미지를 좌우로 뒤집는다\n        pan={element} // Pan Interaction을 활성화 한다\n        adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n        zoom={wheel === 'zoom' && element} // Zoom Interaction을 활성화 한다\n        resetTime={0} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n        image={image}\n        updateCornerstoneRenderData={() => {}}\n      />\n    </InsightViewerContainer>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImageScroll,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const wheel = useMemo<'zoom' | 'scroll'>(() => 'scroll', []);\\n\\n  const [element, setElement] = useState<HTMLElement | null>(null);\\n\\n  useSeriesImageScroll({\\n    image,\\n    element,\\n    enabled: wheel === 'scroll',\\n  });\\n\\n  return (\\n    <InsightViewerContainer ref={setElement} width={400} height={500}>\\n      <InsightViewer\\n        width={400}\\n        height={500}\\n        invert={false} // 색상을 반전한다\\n        flip={false} // 이미지를 좌우로 뒤집는다\\n        pan={element} // Pan Interaction을 활성화 한다\\n        adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n        zoom={wheel === 'zoom' && element} // Zoom Interaction을 활성화 한다\\n        resetTime={0} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n        image={image}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n    </InsightViewerContainer>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useSeriesImageScroll()`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`CornerstoneSeriesImage`}</inlineCode>{`를 Mouse Wheel을 사용해서 Navigation 하는데 사용한다.`}</p>\n    <p><inlineCode parentName=\"p\">{`EventTarget`}</inlineCode>{`으로 사용할 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`를 필요로 한다.`}</p>\n    <Example example={component('./useSeriesImageScroll/Basic')} mdxType=\"Example\">\n  <Preview height={380} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`<InsightViewer>`}</inlineCode>{`와 함께 사용`}</h1>\n    <p><inlineCode parentName=\"p\">{`<InsightViewerContainer ref={}>`}</inlineCode>{`를 통해 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`를 받아서 처리할 수 있다.`}</p>\n    <Example example={component('./useSeriesImageScroll/InsightViewer')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
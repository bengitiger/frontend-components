{"version":3,"sources":["webpack:///./src/_packages/@lunit/handbook/components/InsightViewerPreview.tsx","webpack:///./src/_packages/@lunit/opt-components/theme/style.ts","webpack:///./src/_packages/@lunit/opt-components/theme/theme.ts","webpack:///./src/_packages/@lunit/opt-components/theme/context.tsx","webpack:///./src/_packages/@lunit/opt-components/theme/withOPTComponentsStorybookGlobalStyle.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Button.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Panel.tsx","webpack:///./src/_packages/@lunit/opt-components/components/PanelDescription.tsx","webpack:///./src/_packages/@lunit/opt-components/components/PanelToolbar.tsx","webpack:///./src/_packages/@lunit/opt-components/components/PanelToolbarBadge.tsx","webpack:///./src/_packages/@lunit/opt-components/components/ButtonLayout.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Slider.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Tooltip.tsx","webpack:///./src/_packages/@lunit/opt-components/components/ScrollContainer.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Switch.tsx","webpack:///./src/_packages/@lunit/opt-components/theme/lighten.ts","webpack:///./src/_packages/@lunit/opt-components/components/DialogPaper.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Dialog.tsx","webpack:///./src/_packages/@lunit/opt-components/components/useAlert.tsx","webpack:///./src/_packages/@lunit/opt-components/components/useConfirm.tsx","webpack:///./src/_packages/@lunit/opt-components/components/QuarterView.tsx","webpack:///./src/_packages/@lunit/opt-components/components/SwitchRow.tsx","webpack:///./src/_packages/@lunit/opt-components/components/Snackbar.tsx","webpack:///./src/_packages/@lunit/opt-components/components/VideoBackgroundContainer.tsx","webpack:///./src/_packages/@lunit/use-dialog/useDialog.ts"],"names":["InsightViewerPreview","props","Style","data-test","injectFirst","styled","div","insightViewerStyle","componentsStyle","blockStyle","css","globalStyle","createGlobalStyle","theme","createMuiTheme","palette","type","typography","fontFamily","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","overrides","MuiTooltip","tooltip","fontSize","backgroundColor","app","ThemeProvider","children","checkIcon","buttonClasses","ButtonBase","label","icon","check","className","selected","onChange","onClick","hideCheck","style","disabled","muiButtonProps","click","useCallback","event","aria-selected","attrs","Error","layout","console","warn","Button","panelClasses","Arrow","panelStyle","panelIconHoverStyle","Panel","expanded","title","expand","content","iconElement","value","transform","getIcon","aria-expanded","aria-disabled","sessionId","defaultExpanded","id","useMemo","setExpanded","useState","sessionValue","localStorage","getItem","updateExpanded","nextExpanded","setItem","p","h3","span","verticalLayout","gap","horizontalLayout","direction","valueLabelDisplay","Tooltip","arrow","popper","classes","useTooltipStyle","arrowRef","setArrowRef","React","PopperProps","popperOptions","modifiers","enabled","Boolean","element","ref","makeStyles","position","borderRadius","color","margin","display","width","height","borderStyle","top","left","marginTop","borderWidth","borderColor","bottom","marginBottom","marginLeft","right","marginRight","blinkAnimation","keyframes","ErrorIcon","Component","lighten","Paper","Dialog","useAlert","useDialog","AlertDialogTemplate","closeDialog","description","agree","open","onClose","disableBackdropClick","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","useConfirm","ConfirmDialogTemplate","disagree","IconButton","SnackbarContent","enter","source","divProps","autoPlay","loop","muted","dialogTemplate","dialogProps","setDialogProps","async","Promise","resolve","returnValue"],"mappings":"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","file":"2.7c092252e3af09fb8d74.js","sourcesContent":["import { Preview, PreviewProps } from '@handbook/components';\nimport { blockStyle as insightViewerStyle } from '@lunit/insight-viewer';\nimport { blockStyle as componentsStyle, ThemeProvider } from '@lunit/opt-components';\nimport { SnackbarProvider } from '@ssen/snackbar';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport function InsightViewerPreview(props: PreviewProps) {\n  return (\n    <Style data-test=\"style block\">\n      <SnackbarProvider>\n        <ThemeProvider injectFirst={false}>\n          <Preview {...props} />\n        </ThemeProvider>\n      </SnackbarProvider>\n    </Style>\n  );\n}\n\nconst Style = styled.div`\n  ${insightViewerStyle};\n  ${componentsStyle};\n\n  > :first-child {\n    color: white;\n    background-color: #222232;\n    overflow: hidden;\n  }\n`;\n","import { ColorProperty } from 'csstype';\nimport { createGlobalStyle, css } from 'styled-components';\n\nexport interface OPTComponentsCSSProperties {\n  '--button-background-color'?: ColorProperty;\n  '--button-label-color'?: ColorProperty;\n  '--button-background-color-hover'?: ColorProperty;\n  '--button-label-color-hover'?: ColorProperty;\n  '--button-background-color-selected'?: ColorProperty;\n  '--button-label-color-selected'?: ColorProperty;\n  '--button-background-color-disabled'?: ColorProperty;\n  '--button-label-color-disabled'?: ColorProperty;\n\n  '--panel-background-color'?: ColorProperty;\n  '--panel-header-background-color'?: ColorProperty;\n  '--panel-icon-color'?: ColorProperty;\n  '--panel-icon-color-hover'?: ColorProperty;\n  '--panel-title-color'?: ColorProperty;\n\n  '--slider-rail-color'?: ColorProperty;\n  '--slider-thumb-color'?: ColorProperty;\n  '--slider-track-color'?: ColorProperty;\n  '--slider-value-label-color'?: ColorProperty;\n\n  '--tooltip-background-color'?: ColorProperty;\n  '--tooltip-color'?: ColorProperty;\n}\n\nexport const blockStyle = css`\n  --button-background-color: rgba(255, 255, 255, 0.2);\n  --button-label-color: rgba(255, 255, 255, 0.7);\n  --button-background-color-hover: rgba(255, 255, 255, 0.35);\n  --button-label-color-hover: rgba(255, 255, 255, 0.9);\n  --button-background-color-selected: #00a4c8;\n  --button-label-color-selected: #ffffff;\n  --button-background-color-disabled: rgba(255, 255, 255, 0.12);\n  --button-label-color-disabled: rgba(255, 255, 255, 0.2);\n\n  --panel-background-color: #242e3e;\n  --panel-header-background-color: rgba(255, 255, 255, 0.03);\n  --panel-icon-color: #8694b1;\n  --panel-icon-color-hover: #c5d8f8;\n  --panel-title-color: #ffffff;\n\n  --slider-rail-color: rgba(255, 255, 255, 0.4);\n  --slider-thumb-color: #ffffff;\n  --slider-track-color: rgba(255, 255, 255, 0.6);\n  --slider-value-label-color: rgba(0, 0, 0, 0.4);\n\n  --tooltip-background-color: rgba(0, 0, 0, 0.7);\n  --tooltip-label-color: #ffffff;\n\n  --snackbar-background-color: rgba(0, 0, 0, 0.7);\n  --snackbar-label-color: #ffffff;\n\n  --switch-color: #eeeeee;\n  --switch-track-color: rgba(255, 255, 255, 0.2);\n  --switch-color-checked: #00a5c8;\n  --switch-track-color-checked: rgba(255, 255, 255, 0.2);\n`;\n\nexport const globalStyle = css`\n  :root {\n    ${blockStyle};\n  }\n\n  body {\n    color: white;\n    background-color: #222232;\n  }\n\n  body,\n  button,\n  input,\n  optgroup,\n  select,\n  textarea,\n  pre {\n    font-family: proximanova, noto_sanslight, sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n    letter-spacing: 0.6px;\n  }\n`;\n\nexport const GlobalStyle = createGlobalStyle`\n  ${globalStyle}\n`;\n","import { createMuiTheme, Theme as MuiTheme } from '@material-ui/core/styles';\n\nconst muiTheme: MuiTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n  typography: {\n    fontFamily: 'proximanova,noto_sanslight,sans-serif',\n    fontWeightLight: 200,\n    fontWeightRegular: 400,\n    fontWeightMedium: 600,\n    fontWeightBold: 700,\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: 13,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      },\n    },\n  },\n});\n\nexport const theme = {\n  ...muiTheme,\n  app: {\n    backgroundColor: '#222232',\n  },\n};\n\nexport type Theme = typeof theme;\n","import { StylesProvider as MuiStylesProvider, ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\nimport React, { ReactNode } from 'react';\nimport { ThemeProvider as StyledComponentsThemeProvider } from 'styled-components';\nimport { theme } from './theme';\n\nexport function ThemeProvider({ children, injectFirst = true }: { children: ReactNode; injectFirst?: boolean }) {\n  return (\n    <MuiStylesProvider injectFirst={injectFirst}>\n      <StyledComponentsThemeProvider theme={theme}>\n        <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>\n      </StyledComponentsThemeProvider>\n    </MuiStylesProvider>\n  );\n}\n","import { DecoratorFunction } from '@storybook/addons';\nimport React, { createElement, isValidElement } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { ThemeProvider } from './context';\nimport { globalStyle } from './style';\n\nconst StorybookGlobalStyle = createGlobalStyle`\n  html {\n    font-size: 14px;\n    box-sizing: border-box;\n  }\n  \n  ${globalStyle}\n`;\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const withOPTComponentsStorybookGlobalStyle: DecoratorFunction<any> = storyFn => {\n  const story = storyFn();\n\n  return (\n    <ThemeProvider>\n      <StorybookGlobalStyle />\n      {typeof story === 'function' ? (\n        createElement(story)\n      ) : isValidElement(story) ? (\n        story\n      ) : (\n        <div>story is not valid element</div>\n      )}\n    </ThemeProvider>\n  );\n};\n","import { ButtonBase as MuiButtonBase } from '@material-ui/core';\nimport { ButtonBaseProps as MuiButtonBaseProps } from '@material-ui/core/ButtonBase';\nimport CheckIcon from '@material-ui/icons/Done';\nimport React, { ComponentType, MouseEvent, ReactElement, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonProps extends Omit<MuiButtonBaseProps, 'onChange'> {\n  label?: ReactElement | string;\n  icon?: ReactElement | string;\n  check?: ReactElement;\n  layout?: 'left' | 'center';\n  hideCheck?: boolean;\n  selected?: boolean;\n  onChange?: (nextSelected: boolean) => void;\n}\n\nexport const checkIcon = <CheckIcon />;\n\nexport const buttonClasses = {\n  label: 'LunitButton-label',\n  icon: 'LunitButton-icon',\n  check: 'LunitButton-check',\n} as const;\n\nexport function ButtonBase({\n  label,\n  icon,\n  check = checkIcon,\n  className = '',\n  selected,\n  onChange,\n  onClick,\n  hideCheck,\n  style = {},\n  disabled = false,\n  ...muiButtonProps\n}: ButtonProps) {\n  const click = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      if (typeof selected === 'boolean' && typeof onChange === 'function') {\n        onChange(!selected);\n      }\n\n      if (typeof onClick === 'function') {\n        onClick(event);\n      }\n    },\n    [selected, onChange, onClick],\n  );\n\n  return (\n    <MuiButtonBase\n      {...muiButtonProps}\n      className={className}\n      aria-selected={selected === true}\n      style={style}\n      onClick={click}\n      disabled={disabled}\n    >\n      {icon && <span className={buttonClasses.icon}>{icon}</span>}\n      {label && <span className={buttonClasses.label}>{label}</span>}\n      {hideCheck !== true && selected === true && <span className={buttonClasses.check}>{check}</span>}\n    </MuiButtonBase>\n  );\n}\n\nexport const IconAndLabelButton: ComponentType<ButtonProps> = styled(ButtonBase).attrs(props => {\n  if (!props.label || !props.icon) {\n    throw new Error(`the props label and icon are required to <IconAndLabelButton>`);\n  }\n\n  if (props.layout === 'left') {\n    console.warn(`<IconAndLabelButton> layout prop is only support 'center'`);\n  }\n\n  if (props.hideCheck === false) {\n    console.warn(`<IconAndLabelButton> hideCheck prop is only support 'true'`);\n  }\n\n  return {\n    ...props,\n    hideCheck: true,\n    layout: 'center',\n  };\n})`\n  && {\n    flex: 1;\n    justify-content: center;\n\n    height: 54px;\n\n    font-size: 13px;\n    color: var(--button-label-color);\n    background-color: var(--button-background-color);\n    flex-direction: column;\n\n    .${buttonClasses.icon} {\n      font-size: 21px;\n      display: block;\n      text-align: center;\n\n      .MuiSvgIcon-root {\n        font-size: 1em;\n      }\n    }\n\n    .${buttonClasses.label} {\n      display: block;\n      text-align: center;\n      margin-bottom: -2px;\n    }\n\n    &:hover {\n      background-color: var(--button-background-color-hover);\n      color: var(--button-label-color-hover);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--button-background-color-selected);\n      color: var(--button-label-color-selected);\n    }\n\n    &:disabled {\n      background-color: var(--button-background-color-disabled);\n      color: var(--button-label-color-disabled);\n    }\n  }\n`;\n\nexport const Button: ComponentType<ButtonProps> = styled(ButtonBase)`\n  && {\n    justify-content: ${({ layout }) => layout};\n    padding-left: ${({ layout }) => (layout === 'left' ? '13px' : 0)};\n\n    height: 40px;\n\n    font-size: 13px;\n    color: var(--button-label-color);\n    background-color: var(--button-background-color);\n\n    .${buttonClasses.icon} {\n      font-size: 21px;\n      margin-right: ${({ label }) => (label ? '8px' : 0)};\n      transform: translateY(2px);\n\n      .MuiSvgIcon-root {\n        font-size: 1em;\n      }\n    }\n\n    .${buttonClasses.check} {\n      ${({ layout }) => (layout !== 'left' ? 'display: none' : '')};\n      position: absolute;\n      font-size: 21px;\n      right: 5px;\n      top: 8px;\n\n      .MuiSvgIcon-root {\n        font-size: 1em;\n      }\n    }\n\n    &:hover {\n      background-color: var(--button-background-color-hover);\n      color: var(--button-label-color-hover);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--button-background-color-selected);\n      color: var(--button-label-color-selected);\n    }\n\n    &:disabled {\n      background-color: var(--button-background-color-disabled);\n      color: var(--button-label-color-disabled);\n    }\n  }\n`;\n\nexport const buttonStyle = css`\n  font-size: 13px;\n  color: var(--button-label-color);\n  background-color: var(--button-background-color);\n\n  &:hover {\n    background-color: var(--button-background-color-hover);\n    color: var(--button-label-color-hover);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--button-background-color-selected);\n    color: var(--button-label-color-selected);\n  }\n\n  &:disabled {\n    background-color: var(--button-background-color-disabled);\n    color: var(--button-label-color-disabled);\n  }\n`;\n","import { KeyboardArrowDown } from '@material-ui/icons';\nimport React, { ComponentType, CSSProperties, ReactNode, useCallback, useMemo, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface PanelProps {\n  children: ReactNode | ((expanded: boolean) => ReactNode);\n  expanded?: boolean;\n  onChange?: (nextExapnded: boolean) => void;\n  title: ReactNode | ((expanded: boolean) => ReactNode);\n  icon?: ReactNode | ((expanded: boolean) => ReactNode);\n  className?: string;\n  style?: CSSProperties;\n  disabled?: boolean;\n}\n\nexport const panelClasses = {\n  header: 'LunitPanel-header',\n  icon: 'LunitPanel-icon',\n  title: 'LunitPanel-title',\n  content: 'LunitPanel-content',\n} as const;\n\nfunction getIcon(value: ReactNode | ((expanded: boolean) => ReactNode), expanded: boolean | undefined) {\n  const icon: ReactNode | undefined = typeof value === 'function' ? value(expanded === true) : value;\n\n  if (icon) return icon;\n\n  return typeof expanded !== 'boolean' ? null : expanded ? (\n    <Arrow />\n  ) : (\n    <Arrow style={{ transform: 'rotate(180deg)' }} />\n  );\n}\n\nexport function PanelBase({\n  className = '',\n  expanded,\n  onChange,\n  style = {},\n  title,\n  icon,\n  children,\n  disabled,\n}: PanelProps) {\n  const expand = useCallback(() => {\n    if (typeof expanded === 'boolean' && typeof onChange === 'function') {\n      onChange(!expanded);\n    }\n  }, [expanded, onChange]);\n\n  const content = typeof children === 'function' ? children(expanded === true) : children;\n\n  const iconElement = getIcon(icon, expanded);\n\n  return (\n    <div className={className} aria-expanded={expanded === true} aria-disabled={disabled === true} style={style}>\n      <div className={panelClasses.header}>\n        {iconElement && (\n          <span className={panelClasses.icon} onClick={expand}>\n            {iconElement}\n          </span>\n        )}\n\n        <span className={panelClasses.title}>{typeof title === 'function' ? title(expanded === true) : title}</span>\n      </div>\n\n      {content && <div className={panelClasses.content}>{content}</div>}\n    </div>\n  );\n}\n\nexport interface SessionPanelProps extends Omit<PanelProps, 'expanded'> {\n  sessionId: string;\n  defaultExpanded?: boolean;\n}\n\nexport function SessionPanelBase({ sessionId, defaultExpanded = true, onChange, ...props }: SessionPanelProps) {\n  const id: string = useMemo(() => {\n    return `__sidebar_panel_${sessionId}__`;\n  }, [sessionId]);\n\n  const [expanded, setExpanded] = useState<boolean>(() => {\n    const sessionValue: string | null = localStorage.getItem(id);\n\n    return typeof sessionValue === 'string' ? sessionValue === 'open' : defaultExpanded;\n  });\n\n  const updateExpanded = useCallback(\n    (nextExpanded: boolean) => {\n      localStorage.setItem(id, nextExpanded ? 'open' : 'close');\n      setExpanded(nextExpanded);\n      if (typeof onChange === 'function') onChange(nextExpanded);\n    },\n    [id, onChange],\n  );\n\n  return <Panel {...props} expanded={expanded} onChange={updateExpanded} />;\n}\n\nconst Arrow = styled(KeyboardArrowDown)`\n  transition: transform 0.3s ease-out;\n`;\n\nexport const PANEL_HEADER_HEIGHT: number = 25;\n\nconst panelStyle = css`\n  background-color: var(--panel-background-color);\n  position: relative;\n\n  &[aria-disabled='true'] {\n  }\n\n  .${panelClasses.header} {\n    height: 25px;\n    background-color: var(--panel-header-background-color);\n    display: flex;\n    align-items: center;\n    font-size: 12px;\n    padding: 1px 14px 0 14px;\n\n    .${panelClasses.icon} {\n      color: var(--panel-icon-color);\n      margin-left: -8px;\n      margin-right: 6px;\n      transform: translateY(2px);\n    }\n\n    .${panelClasses.title} {\n      color: var(--panel-title-color);\n      letter-spacing: 0.2em;\n    }\n  }\n\n  .${panelClasses.content} {\n    padding: 14px;\n  }\n`;\n\nconst panelIconHoverStyle = css`\n  .${panelClasses.header} {\n    .${panelClasses.icon} {\n      cursor: pointer;\n\n      &:hover {\n        color: var(--panel-icon-color-hover);\n      }\n    }\n  }\n`;\n\nexport const panelDisabled = ({ disabled }: PanelProps) =>\n  disabled\n    ? css`\n        opacity: 0.4;\n        pointer-events: none;\n        user-select: none;\n      `\n    : css`\n        opacity: 1;\n      `;\n\nexport const Panel: ComponentType<PanelProps> = styled(PanelBase)`\n  ${panelDisabled}\n  ${panelStyle}\n  ${({ onChange }) => (typeof onChange === 'function' ? panelIconHoverStyle : '')}\n`;\n\nexport const SessionPanel: ComponentType<SessionPanelProps> = styled(SessionPanelBase)`\n  opacity: ${({ disabled }) => (disabled ? 0.4 : 1)};\n  ${panelStyle}\n  ${panelIconHoverStyle}s\n`;\n","import { ComponentType, DetailedHTMLProps, HTMLAttributes } from 'react';\nimport styled from 'styled-components';\n\nexport const PanelDescription: ComponentType<DetailedHTMLProps<\n  HTMLAttributes<HTMLParagraphElement>,\n  HTMLParagraphElement\n>> = styled.p`\n  font-size: 12px;\n  margin-top: 0;\n  color: #ffffff;\n\n  > .MuiSvgIcon-root {\n    font-size: 16px;\n    margin-bottom: 6px;\n    display: block;\n  }\n`;\n\nexport const PanelDescriptionTitle: ComponentType<DetailedHTMLProps<\n  HTMLAttributes<HTMLHeadingElement>,\n  HTMLHeadingElement\n>> = styled.h3`\n  font-size: 12px;\n  font-weight: normal;\n  margin: 5px 0 4px 0;\n  color: currentColor;\n\n  > .MuiSvgIcon-root {\n    font-size: 16px;\n    margin-right: 6px;\n    transform: translateY(3px);\n  }\n`;\n\nexport const PanelDescriptionColors = {\n  NORMAL: '#ffffff',\n  INFO: '#00a4c8',\n  WARNING: '#d6ae41',\n  ERROR: '#c9434b',\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { PANEL_HEADER_HEIGHT } from './Panel';\n\nexport interface PanelToolbarProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function PanelToolbarBase({ children, className = '' }: PanelToolbarProps) {\n  return <div className={className}>{children}</div>;\n}\n\nexport const PanelToolbar = styled(PanelToolbarBase)`\n  position: absolute;\n  height: ${PANEL_HEADER_HEIGHT}px;\n  display: flex;\n  align-items: center;\n  top: 0;\n  padding-top: 1px;\n  right: 12px;\n`;\n","import styled from 'styled-components';\n\nexport const PanelToolbarBadge = styled.span`\n  font-size: 11px;\n  color: #ffffff;\n  background-color: rgba(255, 255, 255, 0.2);\n  padding: 3px 11px;\n  border-radius: 10px;\n`;\n","import React, { ComponentType, CSSProperties, ReactNode } from 'react';\nimport styled, { css } from 'styled-components';\n\nexport interface ButtonLayoutProps {\n  gap?: number;\n  direction: 'horizontal' | 'vertical';\n  className?: string;\n  children: ReactNode;\n  style?: CSSProperties;\n}\n\nexport function ButtonLayoutBase({ className = '', children, style }: ButtonLayoutProps) {\n  return (\n    <div className={className} style={style}>\n      {children}\n    </div>\n  );\n}\n\nconst verticalLayout = ({ gap = 2 }: ButtonLayoutProps) => css`\n  display: flex;\n  flex-flow: column;\n\n  > :not(:last-child) {\n    margin-bottom: ${gap}px;\n  }\n`;\n\nconst horizontalLayout = ({ gap = 2 }: ButtonLayoutProps) => css`\n  display: flex;\n  width: 100%;\n\n  > * {\n    flex: 1;\n  }\n\n  > :not(:last-child) {\n    margin-right: ${gap}px;\n  }\n`;\n\nexport const ButtonLayout: ComponentType<ButtonLayoutProps> = styled(ButtonLayoutBase)`\n  ${({ direction }) => (direction === 'horizontal' ? horizontalLayout : verticalLayout)};\n`;\n","import { Slider as MuiSlider } from '@material-ui/core';\nimport styled from 'styled-components';\n\nexport const Slider = styled(MuiSlider).attrs({\n  valueLabelDisplay: 'on',\n})`\n  && {\n    color: var(--slider-rail-color);\n    height: 19px;\n\n    .MuiSlider-thumb {\n      width: 28px;\n      height: 19px;\n      background-color: var(--slider-thumb-color);\n      border-radius: 10px;\n      margin-top: -7px;\n      margin-left: -14px;\n    }\n\n    .MuiSlider-active {\n      cursor: none;\n    }\n\n    .MuiSlider-valueLabel {\n      left: 0;\n      top: -7px;\n      transform: none;\n\n      * {\n        text-align: center;\n        width: 28px;\n        margin: 0;\n        padding: 0;\n        transform: none;\n        background: transparent;\n        color: var(--slider-value-label-color);\n        font-size: 13px;\n      }\n    }\n\n    ,\n    .MuiSlider-rail {\n      height: 5px;\n      border-radius: 2px;\n    }\n\n    .MuiSlider-track {\n      background-color: var(--slider-track-color);\n      height: 5px;\n      border-radius: 2px;\n    }\n  }\n`;\n","import MuiTooltip, { TooltipProps as MuiTooltipProps } from '@material-ui/core/Tooltip';\nimport { Error, Help } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { Fragment } from 'react';\nimport styled, { DefaultTheme, keyframes } from 'styled-components';\n\nexport interface TooltipProps extends MuiTooltipProps {}\n\nexport function Tooltip({ className, ...props }: TooltipProps) {\n  const { arrow, popper, ...classes } = useTooltipStyle(props);\n  const [arrowRef, setArrowRef] = React.useState<HTMLSpanElement | null>(null);\n\n  return (\n    <MuiTooltip\n      classes={classes}\n      PopperProps={{\n        className: popper + ' ' + (className || ''),\n        popperOptions: {\n          modifiers: {\n            arrow: {\n              enabled: Boolean(arrowRef),\n              element: arrowRef,\n            },\n          },\n        },\n      }}\n      {...props}\n      title={\n        <Fragment>\n          {props.title}\n          <span className={arrow} ref={setArrowRef} />\n        </Fragment>\n      }\n    />\n  );\n}\n\nexport const useTooltipStyle = makeStyles<DefaultTheme, TooltipProps>({\n  tooltip: {\n    position: 'relative',\n    borderRadius: 0,\n    color: 'var(--tooltip-label-color)',\n    backgroundColor: 'var(--tooltip-background-color)',\n  },\n  arrow: {\n    position: 'absolute',\n    fontSize: 6,\n\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid',\n    },\n  },\n  popper: {\n    '&[x-placement*=\"bottom\"] $arrow': {\n      top: 0,\n      left: 0,\n      marginTop: '-1.45em',\n      width: '2em',\n      height: '1em',\n      '&::before': {\n        borderWidth: '0 1em 1.5em 1em',\n        borderColor: `transparent transparent var(--tooltip-background-color) transparent`,\n      },\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      bottom: 0,\n      left: 0,\n      marginBottom: '-0.95em',\n      width: '2em',\n      height: '1em',\n      '&::before': {\n        borderWidth: '1.5em 1em 0 1em',\n        borderColor: `var(--tooltip-background-color) transparent transparent transparent`,\n      },\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      left: 0,\n      marginLeft: '-1.45em',\n      height: '2em',\n      width: '1em',\n      '&::before': {\n        borderWidth: '1em 1.5em 1em 0',\n        borderColor: `transparent var(--tooltip-background-color) transparent transparent`,\n      },\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      right: 0,\n      marginRight: '-0.95em',\n      height: '2em',\n      width: '1em',\n      '&::before': {\n        borderWidth: '1em 0 1em 1.5em',\n        borderColor: `transparent transparent transparent var(--tooltip-background-color)`,\n      },\n    },\n  },\n});\n\nexport const NormalTooltip = styled(Tooltip).attrs({\n  children: <Help style={{ color: 'rgba(255, 255, 255, 0.6)' }} />,\n})`\n  --tooltip-background-color: rgba(255, 255, 255, 0.6);\n  --tooltip-label-color: #030a18;\n`;\n\nexport const InfoTooltip = styled(Tooltip).attrs({\n  children: <Help style={{ color: '#00a4c8' }} />,\n})`\n  --tooltip-background-color: #00a4c8;\n  --tooltip-label-color: #ffffff;\n`;\n\nconst blinkAnimation = keyframes`\n  0% {\n    opacity: 0.7;\n  }\n  \n  49% {\n    opacity: 0.7;\n  }\n  \n  50% {\n    opacity: 1;\n  }\n`;\n\nconst ErrorIcon = styled(Error)`\n  animation: ${blinkAnimation} 1s infinite;\n`;\n\nexport const WarningTooltip = styled(Tooltip).attrs({\n  children: <ErrorIcon style={{ color: '#d6ae41' }} />,\n})`\n  --tooltip-background-color: #d6ae41;\n  --tooltip-label-color: #ffffff;\n`;\n\nexport const ErrorTooltip = styled(Tooltip).attrs({\n  children: <ErrorIcon style={{ color: '#c9434b' }} />,\n})`\n  --tooltip-background-color: #c9434b;\n  --tooltip-label-color: #ffffff;\n`;\n","import React, { Component, createRef, CSSProperties, DetailedHTMLProps, HTMLAttributes, RefObject } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface ScrollContainerProps extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  sessionId?: string;\n}\n\ninterface ScrollContainerState {}\n\nconst divStyle: CSSProperties = { overflow: 'hidden' };\n\nexport class ScrollContainer extends Component<ScrollContainerProps, ScrollContainerState> {\n  private resizeObserver: ResizeObserver;\n  private containerRef: RefObject<HTMLDivElement> = createRef();\n\n  constructor(props: ScrollContainerProps) {\n    super(props);\n\n    this.resizeObserver = new ResizeObserver(this.resizeHandler);\n  }\n\n  render() {\n    const { sessionId, ...divProps } = this.props;\n    return <div {...divProps} ref={this.containerRef} style={divStyle} />;\n  }\n\n  componentDidMount() {\n    const div: HTMLDivElement = this.containerRef.current!;\n    this.resizeObserver.observe(div);\n    div.addEventListener('wheel', this.wheelHandler);\n  }\n\n  componentDidUpdate(prevProps: Readonly<ScrollContainerProps>) {\n    if (prevProps.sessionId !== this.props.sessionId) {\n      this.scrollTo(0);\n    }\n  }\n\n  scrollTo = (top: number) => {\n    const div: HTMLDivElement | null = this.containerRef.current;\n    if (!div) return;\n    div.scrollTop = top;\n  };\n\n  private wheelHandler = (event: WheelEvent) => {\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n\n    const div: HTMLDivElement | null = this.containerRef.current;\n    if (!div) return;\n    div.scrollTop = Math.min(Math.max(0, div.scrollTop + event.deltaY), div.scrollHeight - div.offsetHeight);\n  };\n\n  private resizeHandler = (entries: ResizeObserverEntry[]) => {\n    for (const entry of entries) {\n      if (entry.target === this.containerRef.current) {\n        const div: HTMLDivElement | null = this.containerRef.current;\n        if (!div) return;\n        div.scrollTop = Math.min(Math.max(0, div.scrollTop), div.scrollHeight - div.offsetHeight);\n      }\n    }\n  };\n}\n","import { Switch as MuiSwitch } from '@material-ui/core';\nimport styled from 'styled-components';\n\nexport const Switch = styled(MuiSwitch)`\n  && {\n    .MuiSwitch-track {\n      opacity: 1;\n      background-color: var(--switch-track-color);\n    }\n\n    .MuiSwitch-switchBase {\n      color: var(--switch-color);\n\n      &.Mui-checked {\n        color: var(--switch-color-checked);\n      }\n    }\n\n    .Mui-checked + .MuiSwitch-track {\n      opacity: 1;\n      background-color: var(--switch-track-color-checked);\n    }\n  }\n`;\n","import { createMuiTheme, Theme as MuiTheme } from '@material-ui/core/styles';\nimport { css } from 'styled-components';\n\nexport const lighten = css`\n  color: #242e3e;\n\n  --button-background-color: #00a4c8;\n  --button-label-color: rgba(255, 255, 255, 0.8);\n  --button-background-color-hover: #008cb0;\n  --button-label-color-hover: rgba(255, 255, 255, 1);\n  --button-background-color-selected: #007294;\n  --button-label-color-selected: rgba(255, 255, 255, 1);\n  --button-background-color-disabled: rgba(0, 164, 200, 0.65);\n  --button-label-color-disabled: rgba(255, 255, 255, 0.2);\n\n  --slider-rail-color: rgba(86, 81, 136, 0.4);\n  --slider-thumb-color: #6b6b9b;\n  --slider-track-color: rgba(86, 81, 136, 0.6);\n  --slider-value-label-color: #ffffff;\n`;\n\nexport const lightenTheme: MuiTheme = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n  typography: {\n    fontFamily: 'proximanova,noto_sanslight,sans-serif',\n    fontWeightLight: 200,\n    fontWeightRegular: 400,\n    fontWeightMedium: 600,\n    fontWeightBold: 700,\n  },\n  overrides: {\n    MuiTooltip: {\n      tooltip: {\n        fontSize: 13,\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n      },\n    },\n  },\n});\n","import { Paper } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { lighten } from '../theme/lighten';\n\nexport const DialogPaper = styled(Paper)`\n  ${lighten};\n\n  background-color: #ffffff;\n  width: fit-content;\n  height: fit-content;\n  padding: 30px 50px;\n  border-radius: 0;\n\n  > div {\n    text-align: center;\n  }\n`;\n","import { Dialog as MuiDialog, DialogProps } from '@material-ui/core';\nimport { ComponentType } from 'react';\nimport styled from 'styled-components';\nimport { lighten } from '../theme/lighten';\n\nexport { DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\n\nexport const Dialog: ComponentType<DialogProps> = styled(MuiDialog)`\n  && {\n    .MuiDialog-paper {\n      ${lighten};\n\n      background-color: #ffffff;\n\n      border-radius: 0;\n\n      padding: 30px 50px;\n\n      .MuiDialogTitle-root {\n        color: inherit;\n        padding: 0;\n        margin: 0 0 15px 0;\n      }\n\n      .MuiDialogContent-root {\n        color: inherit;\n        padding: 0;\n        margin: 0;\n        overflow: unset;\n      }\n\n      .MuiDialogActions-root {\n        padding: 0;\n        margin: 15px 0 0 0;\n        justify-content: center;\n      }\n\n      .MuiTypography-root {\n        color: inherit;\n      }\n    }\n  }\n`;\n","import { DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\nimport React, { ReactNode } from 'react';\nimport { Button } from './Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from './Dialog';\n\n/**\n * const [openAlert, alertElement] = useAlert()\n *\n * 필요할 때 `openAlert({description: '...'})` 형태로 호출하면 Alert이 열린다\n *\n * `<div>{alertElement}</div>` 와 같이 `alertElement`는 화면에 포함되어 있어야 한다.\n */\nexport function useAlert(): [OpenDialog<AlertParams, void>, ReactNode] {\n  return useDialog(AlertDialogTemplate);\n}\n\nexport interface AlertParams {\n  title?: ReactNode;\n  description: ReactNode;\n  agree?: string;\n}\n\nexport const AlertDialogTemplate: DialogTemplate<AlertParams, void> = ({\n  closeDialog,\n  title,\n  description,\n  agree = 'Agree',\n}) => {\n  return (\n    <Dialog\n      open\n      onClose={() => closeDialog()}\n      disableBackdropClick\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      {title && <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>}\n\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">{description}</DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button autoFocus layout=\"center\" label={agree} style={{ width: 150 }} onClick={() => closeDialog()} />\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { DialogTemplate, OpenDialog, useDialog } from '@lunit/use-dialog';\nimport React, { ReactNode } from 'react';\nimport { Button } from './Button';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from './Dialog';\n\nexport function useConfirm(): [OpenDialog<ConfirmParams, boolean>, ReactNode] {\n  return useDialog(ConfirmDialogTemplate);\n}\n\nexport interface ConfirmParams {\n  title?: ReactNode;\n  description: ReactNode;\n  agree?: string;\n  disagree?: string;\n}\n\nexport const ConfirmDialogTemplate: DialogTemplate<ConfirmParams, boolean> = ({\n  closeDialog,\n  title,\n  description,\n  agree = 'Agree',\n  disagree = 'Disagree',\n}) => {\n  return (\n    <Dialog\n      open\n      onClose={() => closeDialog(false)}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      {title && <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>}\n\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">{description}</DialogContentText>\n      </DialogContent>\n\n      <DialogActions>\n        <Button layout=\"center\" label={disagree} style={{ width: 150 }} onClick={() => closeDialog(false)} />\n        <Button autoFocus layout=\"center\" label={agree} style={{ width: 150 }} onClick={() => closeDialog(true)} />\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import { IconButton } from '@material-ui/core';\nimport { Fullscreen, FullscreenExit } from '@material-ui/icons';\nimport React, { Children, ReactNode, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport useResizeObserver from 'use-resize-observer/polyfilled';\n\nexport interface QuarterViewProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function QuarterView({ children, className }: QuarterViewProps) {\n  const { ref: resizeRef, width = 500, height = 500 } = useResizeObserver<HTMLDivElement>({});\n  const [solo, setSolo] = useState<number>(-1);\n\n  const soloEnabled: boolean = solo > -1;\n\n  return (\n    <div\n      ref={resizeRef}\n      className={className}\n      css={`\n        ${soloEnabled ? soloContainerStyle : width / height < 1.2 ? gridContainerStyle : verticalContainerStyle}\n      `}\n    >\n      {Children.map(children, (child, i) => {\n        return (\n          <div\n            key={'quarter-' + i}\n            css={`\n              ${!soloEnabled || solo === i ? itemStyle : hiddenStyle}\n            `}\n          >\n            {child}\n            <ExpandButton\n              onClick={event => {\n                event.preventDefault();\n                event.stopPropagation();\n                event.nativeEvent.stopImmediatePropagation();\n                setSolo(soloEnabled ? -1 : i);\n              }}\n            >\n              {soloEnabled ? <FullscreenExit /> : <Fullscreen />}\n            </ExpandButton>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst verticalContainerStyle = css`\n  display: flex;\n  background-color: #1c2331; // line color\n\n  > div {\n    flex: 1;\n\n    &:not(:last-of-type) {\n      margin-right: 1px;\n    }\n  }\n`;\n\nconst gridContainerStyle = css`\n  display: grid;\n  background-color: #1c2331; // line color\n\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  grid-gap: 1px;\n`;\n\nconst soloContainerStyle = css`\n  display: block;\n  position: relative;\n`;\n\nconst itemStyle = css`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst hiddenStyle = css`\n  position: absolute;\n  left: 100vw;\n  top: 0;\n  width: 200px;\n  height: 300px;\n`;\n\nconst ExpandButton = styled(IconButton)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 0;\n  padding: 4px 6px;\n  color: #8694b1;\n  font-size: 18px;\n\n  .MuiSvgIcon-root {\n    font-size: 1em;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const SwitchRow = styled.div`\n  display: flex;\n  align-items: center;\n\n  > :first-child {\n    margin-right: 10px;\n  }\n\n  > :last-child {\n    flex: 1;\n    text-align: right;\n  }\n`;\n","import { SnackbarContent as MuiSnackbarContent, SnackbarContentProps } from '@material-ui/core';\nimport { ComponentType } from 'react';\nimport styled from 'styled-components';\n\nexport const SnackbarContent: ComponentType<SnackbarContentProps> = styled(MuiSnackbarContent)`\n  && {\n    border-radius: 0;\n    background-color: var(--snackbar-background-color);\n    color: var(--snackbar-label-color);\n\n    .MuiButton-label,\n    .MuiIconButton-label {\n      opacity: 0.6;\n    }\n  }\n`;\n\nexport const NormalSnackbarContent: ComponentType<SnackbarContentProps> = styled(SnackbarContent)`\n  --snackbar-background-color: rgba(255, 255, 255, 0.6);\n  --snackbar-label-color: #030a18;\n`;\n\nexport const InfoSnackbarContent: ComponentType<SnackbarContentProps> = styled(SnackbarContent)`\n  --snackbar-background-color: #00a4c8;\n  --snackbar-label-color: #ffffff;\n`;\n\nexport const WarningSnackbarContent: ComponentType<SnackbarContentProps> = styled(SnackbarContent)`\n  --snackbar-background-color: #d6ae41;\n  --snackbar-label-color: #ffffff;\n`;\n\nexport const ErrorSnackbarContent: ComponentType<SnackbarContentProps> = styled(SnackbarContent)`\n  --snackbar-background-color: #c9434b;\n  --snackbar-label-color: #ffffff;\n`;\n","import React, { DetailedHTMLProps, HTMLAttributes, ReactElement, SourceHTMLAttributes } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nexport interface VideoBackgroundContainerProps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  source: ReactElement<DetailedHTMLProps<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>>;\n}\n\nfunction VideoBackgroundContainerBase({ source, children, ...divProps }: VideoBackgroundContainerProps) {\n  return (\n    <div {...divProps}>\n      <video autoPlay loop muted>\n        {source}\n      </video>\n\n      {children}\n    </div>\n  );\n}\n\nconst enter = keyframes`\n  0% {\n    opacity: 0;\n  }\n  \n  100% {\n    opacity: 1;\n  }\n`;\n\nexport const VideoBackgroundContainer = styled(VideoBackgroundContainerBase)`\n  position: relative;\n  overflow: hidden;\n\n  > * {\n    position: relative;\n  }\n\n  > video {\n    top: 50%;\n    left: 50%;\n    position: absolute;\n    object-fit: cover;\n    min-width: 100%;\n    min-height: 100%;\n    transform: translate3d(-50%, -50%, 0);\n\n    animation: ${enter} 1s ease-out;\n  }\n`;\n","import { ReactNode, useCallback, useMemo, useState } from 'react';\n\nexport type DialogProps<P, R> = P & {\n  closeDialog: (returnValue: R) => void;\n};\n\nexport type OpenDialog<P, R> = (p: P) => Promise<R>;\n\nexport type DialogTemplate<P = {}, R = void> = (props: DialogProps<P, R>) => ReactNode;\n\nexport function useDialog<P = {}, R = void>(dialogTemplate: DialogTemplate<P, R>): [OpenDialog<P, R>, ReactNode] {\n  const [dialogProps, setDialogProps] = useState<DialogProps<P, R> | null>(null);\n\n  const openDialog: OpenDialog<P, R> = useCallback(async (props: P) => {\n    return new Promise<R>(resolve => {\n      setDialogProps({\n        ...props,\n        closeDialog: (returnValue: R) => {\n          resolve(returnValue);\n          setDialogProps(null);\n        },\n      });\n    });\n  }, []);\n\n  const dialog = useMemo<ReactNode>(() => {\n    return dialogProps ? dialogTemplate(dialogProps) : null;\n  }, [dialogProps, dialogTemplate]);\n\n  return [openDialog, dialog];\n}\n"],"sourceRoot":""}
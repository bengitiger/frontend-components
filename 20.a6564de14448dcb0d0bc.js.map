{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/GetBytes/fetchBuffer.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/GetBytes/fetchBuffer.tsx?b37d","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/GetBytes/fileToBuffer.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/GetBytes/fileToBuffer.tsx?3431","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/GetArrayBuffer.mdx"],"names":["log","setLog","useState","useEffect","abort","AbortController","subscription","fetchBuffer","url","signal","subscribe","progressOrBytes","prev","byteLength","unsubscribe","style","fontSize","map","line","i","key","files","setFiles","length","fileToBuffer","blob","slice","onDragOver","useCallback","event","preventDefault","dataTransfer","dropEffect","onDrop","test","name","DropTarget","marginLeft","styled","div","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","height","overflowY","isMDXComponent"],"mappings":"2FAAA,oCAGe,eACb,MAAOA,EAAKC,GAAUC,mBAAmB,IAqBzC,OAnBAC,oBAAU,KACR,MAAMC,EAAQ,IAAIC,gBACZC,EAAeC,sBAAY,CAC/BC,IAAK,8EACLC,OAAQL,EAAMK,SACbC,UAAUC,IAETV,EAD6B,kBAApBU,EACFC,GAAQ,IAAIA,EAAO,cAAaD,KAEhCC,GAAQ,IAAIA,EAAO,iBAAgBD,EAAgBE,iBAI9D,MAAO,KACLT,EAAMA,QACNE,EAAaQ,gBAEd,IAGD,wBAAIC,MAAO,CAAEC,SAAU,KACpBhB,EAAIiB,IAAI,CAACC,EAAMC,IACd,wBAAIC,IAAKD,GAAID,O,iCC5BrB,OAAe,26B,iCCAf,4CAIe,eACb,MAAOlB,EAAKC,GAAUC,mBAAmB,KAElCmB,EAAOC,GAAYpB,mBAA0B,MAEpDC,oBAAU,KACR,GAAIkB,GAASA,EAAME,OAAS,EAAG,CAC7B,MAAMnB,EAAQ,IAAIC,gBACZC,EAAekB,uBAAa,CAChCf,OAAQL,EAAMK,OACdgB,KAAMJ,EAAM,GAAGK,UACdhB,UAAUC,IAETV,EAD6B,kBAApBU,EACFC,GAAQ,IAAIA,EAAO,cAAaD,KAEhCC,GAAQ,IAAIA,EAAO,iBAAgBD,EAAgBE,iBAI9D,MAAO,KACLT,EAAMA,QACNE,EAAaQ,iBAGhB,CAACO,IAEJ,MAAMM,EAAaC,sBAAaC,IAC9BA,EAAMC,iBACND,EAAME,aAAaC,WAAa,QAC/B,IAEGC,EAASL,sBAAaC,IAC1BA,EAAMC,iBAEFD,EAAME,aAAaV,MAAME,OAAS,GAAK,QAAQW,KAAKL,EAAME,aAAaV,MAAM,GAAGc,OAClFb,EAASO,EAAME,aAAaV,QAE7B,IAEH,OACE,oCACE,kBAACe,EAAD,CAAYH,OAAQA,EAAQN,WAAYA,GAAxC,qBAIA,wBAAIZ,MAAO,CAAEC,SAAU,GAAIqB,WAAY,MACpCrC,EAAIiB,IAAI,CAACC,EAAMC,IACd,wBAAIC,IAAKD,GAAID,OAOvB,MAAMkB,EAAaE,UAAOC,GAAI;;;;;;;;;;;oCC1D9B,OAAe,i3D,iCCCf,+EAOA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAM,OAAM,0BAAYC,WAAW,MAAO,gBAC1C,qBAAK,0DAA2B,0BAAYA,WAAW,KAAM,SAAsB,qEACnF,qBAAK,sGACL,qBAAK,gBAAK,0BAAYA,WAAW,KAAM,eAA4B,oIACnE,sBAAI,0BAAYA,WAAW,MAAO,kBAClC,qBAAK,uCAAa,0BAAYA,WAAW,KAAM,eAA4B,oCAC3E,YAAC,UAAD,CAASC,QAASC,YAAU,yBAAD,aAAC,KAAD,SAAC,KAAD,uFAA4BH,QAAQ,WACjE,YAAC,UAAD,CAASI,OAAQ,IAAKjC,MAAO,CACvBkC,UAAW,QACVL,QAAQ,aAEb,sBAAI,0BAAYC,WAAW,MAAO,mBAClC,qBAAK,gDAAsB,0BAAYA,WAAW,KAAM,SAAsB,uBAAO,0BAAYA,WAAW,KAAM,eAA4B,oCAC9I,8BACE,iBAAGA,WAAW,cAAe,6BAAuB,+BAAGA,WAAW,KAAQ,CACtE,KAAQ,uFACL,wFAET,YAAC,UAAD,CAASC,QAASC,YAAU,0BAAD,aAAC,KAAD,SAAC,KAAD,wFAA6BH,QAAQ,WAClE,YAAC,UAAD,CAASI,OAAQ,IAAKjC,MAAO,CACvBkC,UAAW,QACVL,QAAQ,cAMjBH,EAAWS,gBAAiB","file":"20.a6564de14448dcb0d0bc.js","sourcesContent":["import { fetchBuffer } from '@lunit/insight-viewer';\nimport React, { useEffect, useState } from 'react';\n\nexport default () => {\n  const [log, setLog] = useState<string[]>([]);\n\n  useEffect(() => {\n    const abort = new AbortController();\n    const subscription = fetchBuffer({\n      url: 'https://opt-frontend.s3.ap-northeast-2.amazonaws.com/fixtures/npy/image.npy',\n      signal: abort.signal,\n    }).subscribe(progressOrBytes => {\n      if (typeof progressOrBytes === 'number') {\n        setLog(prev => [...prev, `[progress] ${progressOrBytes}`]);\n      } else {\n        setLog(prev => [...prev, `[done] bytes: ${progressOrBytes.byteLength}`]);\n      }\n    });\n\n    return () => {\n      abort.abort();\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <ul style={{ fontSize: 11 }}>\n      {log.map((line, i) => (\n        <li key={i}>{line}</li>\n      ))}\n    </ul>\n  );\n};\n","export default \"import { fetchBuffer } from '@lunit/insight-viewer';\\nimport React, { useEffect, useState } from 'react';\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>([]);\\n\\n  useEffect(() => {\\n    const abort = new AbortController();\\n    const subscription = fetchBuffer({\\n      url: 'https://opt-frontend.s3.ap-northeast-2.amazonaws.com/fixtures/npy/image.npy',\\n      signal: abort.signal,\\n    }).subscribe(progressOrBytes => {\\n      if (typeof progressOrBytes === 'number') {\\n        setLog(prev => [...prev, `[progress] ${progressOrBytes}`]);\\n      } else {\\n        setLog(prev => [...prev, `[done] bytes: ${progressOrBytes.byteLength}`]);\\n      }\\n    });\\n\\n    return () => {\\n      abort.abort();\\n      subscription.unsubscribe();\\n    };\\n  }, []);\\n\\n  return (\\n    <ul style={{ fontSize: 11 }}>\\n      {log.map((line, i) => (\\n        <li key={i}>{line}</li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\"","import { fileToBuffer } from '@lunit/insight-viewer';\nimport React, { DragEvent, useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nexport default () => {\n  const [log, setLog] = useState<string[]>([]);\n\n  const [files, setFiles] = useState<FileList | null>(null);\n\n  useEffect(() => {\n    if (files && files.length > 0) {\n      const abort = new AbortController();\n      const subscription = fileToBuffer({\n        signal: abort.signal,\n        blob: files[0].slice(),\n      }).subscribe(progressOrBytes => {\n        if (typeof progressOrBytes === 'number') {\n          setLog(prev => [...prev, `[progress] ${progressOrBytes}`]);\n        } else {\n          setLog(prev => [...prev, `[done] bytes: ${progressOrBytes.byteLength}`]);\n        }\n      });\n\n      return () => {\n        abort.abort();\n        subscription.unsubscribe();\n      };\n    }\n  }, [files]);\n\n  const onDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }, []);\n\n  const onDrop = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n\n    if (event.dataTransfer.files.length > 0 && /.npy$/.test(event.dataTransfer.files[0].name)) {\n      setFiles(event.dataTransfer.files);\n    }\n  }, []);\n\n  return (\n    <>\n      <DropTarget onDrop={onDrop} onDragOver={onDragOver}>\n        Drop CT npy File!\n      </DropTarget>\n\n      <ul style={{ fontSize: 11, marginLeft: 220 }}>\n        {log.map((line, i) => (\n          <li key={i}>{line}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst DropTarget = styled.div`\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 10px;\n  top: 10px;\n`;\n","export default \"import { fileToBuffer } from '@lunit/insight-viewer';\\nimport React, { DragEvent, useCallback, useEffect, useState } from 'react';\\nimport styled from 'styled-components';\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>([]);\\n\\n  const [files, setFiles] = useState<FileList | null>(null);\\n\\n  useEffect(() => {\\n    if (files && files.length > 0) {\\n      const abort = new AbortController();\\n      const subscription = fileToBuffer({\\n        signal: abort.signal,\\n        blob: files[0].slice(),\\n      }).subscribe(progressOrBytes => {\\n        if (typeof progressOrBytes === 'number') {\\n          setLog(prev => [...prev, `[progress] ${progressOrBytes}`]);\\n        } else {\\n          setLog(prev => [...prev, `[done] bytes: ${progressOrBytes.byteLength}`]);\\n        }\\n      });\\n\\n      return () => {\\n        abort.abort();\\n        subscription.unsubscribe();\\n      };\\n    }\\n  }, [files]);\\n\\n  const onDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\\n    event.preventDefault();\\n    event.dataTransfer.dropEffect = 'copy';\\n  }, []);\\n\\n  const onDrop = useCallback((event: DragEvent<HTMLDivElement>) => {\\n    event.preventDefault();\\n\\n    if (event.dataTransfer.files.length > 0 && /.npy$/.test(event.dataTransfer.files[0].name)) {\\n      setFiles(event.dataTransfer.files);\\n    }\\n  }, []);\\n\\n  return (\\n    <>\\n      <DropTarget onDrop={onDrop} onDragOver={onDragOver}>\\n        Drop CT npy File!\\n      </DropTarget>\\n\\n      <ul style={{ fontSize: 11, marginLeft: 220 }}>\\n        {log.map((line, i) => (\\n          <li key={i}>{line}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n};\\n\\nconst DropTarget = styled.div`\\n  width: 200px;\\n  height: 200px;\\n  background-color: red;\\n  color: white;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: absolute;\\n  left: 10px;\\n  top: 10px;\\n`;\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Get `}<inlineCode parentName=\"h1\">{`ArrayBuffer`}</inlineCode></h1>\n    <p>{`CT 관련 이미지는 Python NumPy (`}<inlineCode parentName=\"p\">{`*.npy`}</inlineCode>{`) 형식으로 넘어오게 된다.`}</p>\n    <p>{`NumPy Data를 Bytes로 읽어들여 사용해야 하므로,`}</p>\n    <p>{`일단 `}<inlineCode parentName=\"p\">{`ArrayBuffer`}</inlineCode>{` 형태의 데이터를 얻을 수 있는 수단들이 필요하다.`}</p>\n    <h1><inlineCode parentName=\"h1\">{`fetchBuffer()`}</inlineCode></h1>\n    <p>{`URL 상의 파일을 `}<inlineCode parentName=\"p\">{`ArrayBuffer`}</inlineCode>{`로 가져온다.`}</p>\n    <Example example={component('./GetBytes/fetchBuffer')} mdxType=\"Example\">\n  <Preview height={300} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`fileToBuffer()`}</inlineCode></h1>\n    <p>{`Drag and Drop으로 던져진 `}<inlineCode parentName=\"p\">{`*.npy`}</inlineCode>{` 파일을 `}<inlineCode parentName=\"p\">{`ArrayBuffer`}</inlineCode>{`로 변환한다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Download file here → `}<a parentName=\"p\" {...{\n          \"href\": \"https://drive.google.com/file/d/16NtQKztrP6xRddscqtUigeW3--0FrhiH/view?usp=sharing\"\n        }}>{`https://drive.google.com/file/d/16NtQKztrP6xRddscqtUigeW3--0FrhiH/view?usp=sharing`}</a></p>\n    </blockquote>\n    <Example example={component('./GetBytes/fileToBuffer')} mdxType=\"Example\">\n  <Preview height={300} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/hooks/useSeriesImageScroll.ts?c552","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/Basic.tsx?6013","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/InsightViewer.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll/InsightViewer.tsx?788f","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useSeriesImageScroll.mdx"],"names":["installWADOImageLoader","log","setLog","useState","image","useMemo","CornerstoneSeriesImage","series","map","p","unload","unloadImage","current","end","useSeriesImagePosition","scrollTargetElement","setScrollTargetElement","useSeriesImageScroll","element","useEffect","progressSubscription","progress","subscribe","prevLog","Math","floor","imageSubscription","cornerstoneImage","console","warn","imageId","unsubscribe","style","position","top","left","padding","backgroundColor","onClick","prev","next","ref","width","height","fontSize","marginLeft","line","i","key","wheel","setElement","enabled","interactions","useViewerInteractions","invert","flip","resetTime","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","overflowY","isMDXComponent"],"mappings":"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","file":"21.45b5470106c6da231db7.js","sourcesContent":["export default \"import { CornerstoneSequenceImage } from '@lunit/insight-viewer';\\nimport { isTouchDevice } from '@lunit/is-touch-device';\\nimport { useEffect } from 'react';\\n\\ninterface SeriesImageScrollParams {\\n  image: CornerstoneSequenceImage;\\n\\n  /** Wheel Event를 처리할 EventTarget */\\n  element: HTMLElement | null;\\n\\n  /** User Interaction 활성화 여부 */\\n  enabled?: boolean;\\n\\n  /** Touch Direction */\\n  touchDirection?: 'horizontal' | 'vertical';\\n}\\n\\nexport function useSeriesImageScroll({\\n  image,\\n  element,\\n  enabled = true,\\n  touchDirection = 'vertical',\\n}: SeriesImageScrollParams) {\\n  useEffect(() => {\\n    if (!element || enabled !== true) {\\n      return () => {};\\n    }\\n\\n    // ---------------------------------------------\\n    // wheel handler\\n    // ---------------------------------------------\\n    function wheel(event: WheelEvent) {\\n      event.preventDefault();\\n      event.stopPropagation();\\n      event.stopImmediatePropagation();\\n\\n      if (event.deltaY > 0) {\\n        image.prev();\\n      } else if (event.deltaY < 0) {\\n        image.next();\\n      }\\n    }\\n\\n    // ---------------------------------------------\\n    // touch handler\\n    // ---------------------------------------------\\n    let startIndex: number = -1;\\n    let startPoint: { x: number; y: number } | null = null;\\n\\n    function touchStart(event: TouchEvent) {\\n      if (event.targetTouches.length !== 2) return;\\n\\n      event.stopPropagation();\\n      event.stopImmediatePropagation();\\n      event.preventDefault();\\n\\n      startIndex = image.getIndex();\\n\\n      startPoint = {\\n        x: event.targetTouches[0].pageX,\\n        y: event.targetTouches[0].pageY,\\n      };\\n\\n      if (!element) {\\n        throw new Error(`undefined element!!!`);\\n      }\\n\\n      element.removeEventListener('touchstart', touchStart);\\n\\n      element.addEventListener('touchmove', touchMove);\\n      element.addEventListener('touchend', touchEnd);\\n      element.addEventListener('touchcancel', touchEnd);\\n    }\\n\\n    function touchMove(event: TouchEvent) {\\n      if (event.targetTouches.length !== 2 || event.changedTouches.length !== 2 || !startPoint) return;\\n\\n      event.stopPropagation();\\n      event.stopImmediatePropagation();\\n      event.preventDefault();\\n\\n      const dx: number = event.targetTouches[0].pageX - startPoint.x;\\n      const dy: number = event.targetTouches[0].pageY - startPoint.y;\\n      const d: number = touchDirection === 'vertical' ? dy : dx;\\n\\n      image.goto(startIndex + Math.floor(d / 10));\\n    }\\n\\n    function touchEnd(event: TouchEvent) {\\n      if (!element) {\\n        throw new Error(`undefined element!!!`);\\n      }\\n\\n      element.removeEventListener('touchmove', touchMove);\\n      element.removeEventListener('touchend', touchEnd);\\n      element.removeEventListener('touchcancel', touchEnd);\\n\\n      element.addEventListener('touchstart', touchStart);\\n    }\\n\\n    // ---------------------------------------------\\n    // start\\n    // ---------------------------------------------\\n    element.addEventListener('wheel', wheel);\\n\\n    if (isTouchDevice()) {\\n      element.addEventListener('touchstart', touchStart);\\n    }\\n\\n    // ---------------------------------------------\\n    // end\\n    // ---------------------------------------------\\n    return () => {\\n      element.removeEventListener('wheel', wheel);\\n\\n      element.removeEventListener('touchstart', touchStart);\\n\\n      element.removeEventListener('touchmove', touchMove);\\n      element.removeEventListener('touchend', touchEnd);\\n      element.removeEventListener('touchcancel', touchEnd);\\n    };\\n  }, [image, element, enabled, touchDirection]);\\n}\\n\\n/** @deprecated use useSeriesImageScroll */\\nexport const useBulkImageScroll = useSeriesImageScroll;\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n  useSeriesImageScroll,\n} from '@lunit/insight-viewer';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [log, setLog] = useState<string[]>(() => []);\n\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  const [scrollTargetElement, setScrollTargetElement] = useState<HTMLElement | null>(null);\n\n  useSeriesImageScroll({\n    image,\n    element: scrollTargetElement,\n  });\n\n  useEffect(() => {\n    // progress 정보를 받는다\n    const progressSubscription = image.progress.subscribe((progress: number) => {\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\n    });\n\n    // image 정보를 받는다\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\n      console.warn('cornerstoneImage:', cornerstoneImage);\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\n    });\n\n    return () => {\n      progressSubscription.unsubscribe();\n      imageSubscription.unsubscribe();\n    };\n  }, [image]);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n        <div ref={setScrollTargetElement} style={{ width: 150, height: 200, backgroundColor: 'red' }}>\n          Scroll here!\n        </div>\n      </div>\n      <ul style={{ fontSize: 11, marginLeft: 180 }}>\n        {log.map((line, i) => (\n          <li key={i}>{line}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n  useSeriesImageScroll,\\n} from '@lunit/insight-viewer';\\nimport React, { useEffect, useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>(() => []);\\n\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  const [scrollTargetElement, setScrollTargetElement] = useState<HTMLElement | null>(null);\\n\\n  useSeriesImageScroll({\\n    image,\\n    element: scrollTargetElement,\\n  });\\n\\n  useEffect(() => {\\n    // progress 정보를 받는다\\n    const progressSubscription = image.progress.subscribe((progress: number) => {\\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\\n    });\\n\\n    // image 정보를 받는다\\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\\n      console.warn('cornerstoneImage:', cornerstoneImage);\\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\\n    });\\n\\n    return () => {\\n      progressSubscription.unsubscribe();\\n      imageSubscription.unsubscribe();\\n    };\\n  }, [image]);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n        <div ref={setScrollTargetElement} style={{ width: 150, height: 200, backgroundColor: 'red' }}>\\n          Scroll here!\\n        </div>\\n      </div>\\n      <ul style={{ fontSize: 11, marginLeft: 180 }}>\\n        {log.map((line, i) => (\\n          <li key={i}>{line}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImageScroll,\n  useViewerInteractions,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const wheel = useMemo<'zoom' | 'scroll'>(() => 'scroll', []);\n\n  const [element, setElement] = useState<HTMLElement | null>(null);\n\n  useSeriesImageScroll({\n    image,\n    element,\n    enabled: wheel === 'scroll',\n  });\n\n  const interactions = useViewerInteractions(['pan', wheel], { element });\n  // 아래와 동일하다\n  //const interactions = useMemo(\n  //  () => [\n  //    pan({ element }), // pan\n  //    wheel === 'zoom' && zoom({ element }), // zoom\n  //  ],\n  //  [element, wheel],\n  //);\n\n  return (\n    <InsightViewerContainer ref={setElement} width={400} height={500}>\n      <CornerstoneViewer\n        width={400}\n        height={500}\n        invert={false} // 색상을 반전한다\n        flip={false} // 이미지를 좌우로 뒤집는다\n        interactions={interactions}\n        resetTime={0} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n        image={image}\n        updateCornerstoneRenderData={() => {}}\n      />\n    </InsightViewerContainer>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  CornerstoneViewer,\\n  InsightViewerContainer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImageScroll,\\n  useViewerInteractions,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const wheel = useMemo<'zoom' | 'scroll'>(() => 'scroll', []);\\n\\n  const [element, setElement] = useState<HTMLElement | null>(null);\\n\\n  useSeriesImageScroll({\\n    image,\\n    element,\\n    enabled: wheel === 'scroll',\\n  });\\n\\n  const interactions = useViewerInteractions(['pan', wheel], { element });\\n  // 아래와 동일하다\\n  //const interactions = useMemo(\\n  //  () => [\\n  //    pan({ element }), // pan\\n  //    wheel === 'zoom' && zoom({ element }), // zoom\\n  //  ],\\n  //  [element, wheel],\\n  //);\\n\\n  return (\\n    <InsightViewerContainer ref={setElement} width={400} height={500}>\\n      <CornerstoneViewer\\n        width={400}\\n        height={500}\\n        invert={false} // 색상을 반전한다\\n        flip={false} // 이미지를 좌우로 뒤집는다\\n        interactions={interactions}\\n        resetTime={0} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n        image={image}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n    </InsightViewerContainer>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useSeriesImageScroll()`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`CornerstoneSeriesImage`}</inlineCode>{`를 Mouse Wheel을 사용해서 Navigation 하는데 사용한다.`}</p>\n    <p><inlineCode parentName=\"p\">{`EventTarget`}</inlineCode>{`으로 사용할 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`를 필요로 한다.`}</p>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/hooks/useSeriesImageScroll')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <Example example={component('./useSeriesImageScroll/Basic')} mdxType=\"Example\">\n  <Preview height={380} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`<CornerstoneViewer>`}</inlineCode>{`와 함께 사용`}</h1>\n    <p><inlineCode parentName=\"p\">{`<InsightViewerContainer ref={}>`}</inlineCode>{`를 통해 `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{`를 받아서 처리할 수 있다.`}</p>\n    <Example example={component('./useSeriesImageScroll/InsightViewer')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/components/ProgressViewer.tsx?f702","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/ProgressViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/ProgressViewer/Basic.tsx?fdde","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/ProgressViewer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSeriesImage","series","map","p","unload","unloadImage","options","resetTime","interactions","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","isMDXComponent"],"mappings":"ulBAAA,OAAe,+8H,iCCAf,6CAcAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGI,eACb,MAAMC,EAAkCC,kBACtC,IACE,IAAIC,yBACFC,EAAOC,IAAKC,GAAO,4DAA2DA,KAC9E,CAAEC,OAAQC,gBAEd,IAGF,OACE,kBAAC,8BAAD,CAA6BC,QAASf,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOY,YAAWC,kBAC1D,kBAAC,yBAAD,CAAwBhB,MAAOA,EAAOC,OAAQA,GAC5C,kBAAC,oBAAD,CACED,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNY,aAAcA,EACdD,UAAWA,EACXT,MAAOA,EACPW,4BAA6B,SAE/B,kBAAC,iBAAD,CAAgBjB,MAAOA,EAAOC,OAAQA,EAAQK,MAAOA,Q,iCCjD/D,OAAe,6mD,iCCCf,wFAQA,MAKMY,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,qBAClC,qBAAG,0BAAYA,WAAW,KAAM,oBAAiC,0GAA8B,kBAAIA,WAAW,MAAW,KAC3H,0BAAYA,WAAW,KAAM,oBAAiC,sJAC5D,sBAAM,OACN,YAAC,UAAD,CAASC,QAASC,YAAO,kDAAD,UAAC,KAAD,+EAAqDC,KAAG,EAACJ,QAAQ,YACzF,sBAAM,UACN,YAAC,UAAD,CAASE,QAASG,YAAU,yBAAD,aAAC,KAAD,SAAC,KAAD,+FAA4BL,QAAQ,WACjE,YAAC,IAAD,CAAsBrB,OAAQ,IAAKqB,QAAQ,2BAM7CH,EAAWS,gBAAiB","file":"24.45b5470106c6da231db7.js","sourcesContent":["export default \"import { CircularProgress } from '@material-ui/core';\\nimport React, {\\n  Context,\\n  createContext,\\n  CSSProperties,\\n  ReactNode,\\n  useCallback,\\n  useContext,\\n  useEffect,\\n  useMemo,\\n  useState,\\n} from 'react';\\nimport styled from 'styled-components';\\nimport { useImageProgress } from '../hooks/useImageProgress';\\nimport { CornerstoneImage } from '../image/types';\\n\\nexport interface ProgressViewerProps {\\n  width: number;\\n  height: number;\\n  inProgress?: boolean;\\n  image?: CornerstoneImage | null | undefined;\\n}\\n\\nlet count: number = 0;\\n\\nexport function ProgressViewer({ width, height, inProgress, image }: ProgressViewerProps) {\\n  const id: number = useMemo(() => ++count, []);\\n  const imageProgress = useImageProgress(image);\\n  const { setProgress, unsetProgress } = useProgressCollection();\\n\\n  useEffect(() => {\\n    if (inProgress === true || typeof imageProgress === 'number') {\\n      setProgress(id, imageProgress || 0);\\n    } else {\\n      unsetProgress(id);\\n    }\\n  }, [id, imageProgress, inProgress, setProgress, unsetProgress]);\\n\\n  return (\\n    <>\\n      {(inProgress === true || typeof imageProgress === 'number') && (\\n        <Div\\n          style={{\\n            width,\\n            height,\\n            backgroundColor: 'rgba(0, 0, 0, 0.3)',\\n          }}\\n        >\\n          <CircularProgress size={120} />\\n        </Div>\\n      )}\\n      {typeof imageProgress === 'number' && (\\n        <Div\\n          style={{\\n            width,\\n            height,\\n          }}\\n        >\\n          <CircularProgress size={100} variant=\\\"static\\\" value={imageProgress * 100} />\\n        </Div>\\n      )}\\n    </>\\n  );\\n}\\n\\ninterface ProgressCollectorProps {\\n  children: ReactNode;\\n}\\n\\ninterface ProgressCollection {\\n  inProgress: boolean;\\n  setProgress: (id: number, progress: number) => void;\\n  unsetProgress: (id: number) => void;\\n}\\n\\nconst ProgressCollectionContext: Context<ProgressCollection> = createContext<ProgressCollection>({\\n  inProgress: false,\\n\\n  setProgress: () => {\\n    // DO NOTHING\\n  },\\n  unsetProgress: () => {\\n    // DO NOTHING\\n  },\\n});\\n\\nexport function ProgressCollector({ children }: ProgressCollectorProps) {\\n  const [collection, setCollection] = useState<Map<number, number>>(() => new Map());\\n\\n  const setProgress = useCallback(\\n    (id: number, progress: number) => {\\n      setCollection(prevCollection => {\\n        const nextCollection: Map<number, number> = new Map(prevCollection);\\n        nextCollection.set(id, progress);\\n        return nextCollection;\\n      });\\n    },\\n    [setCollection],\\n  );\\n\\n  const unsetProgress = useCallback(\\n    (id: number) => {\\n      setCollection(prevCollection => {\\n        if (prevCollection.has(id)) {\\n          const nextCollection: Map<number, number> = new Map(prevCollection);\\n          nextCollection.delete(id);\\n          return nextCollection;\\n        }\\n        return prevCollection;\\n      });\\n    },\\n    [setCollection],\\n  );\\n\\n  const inProgress: boolean = useMemo(() => {\\n    return collection.size > 0;\\n  }, [collection]);\\n\\n  const state: ProgressCollection = useMemo<ProgressCollection>(() => {\\n    return {\\n      inProgress,\\n      setProgress,\\n      unsetProgress,\\n    };\\n  }, [inProgress, setProgress, unsetProgress]);\\n\\n  return <ProgressCollectionContext.Provider value={state}>{children}</ProgressCollectionContext.Provider>;\\n}\\n\\nfunction useProgressCollection(): ProgressCollection {\\n  return useContext(ProgressCollectionContext);\\n}\\n\\nexport function useProgressViewersActivity(): boolean {\\n  return useContext(ProgressCollectionContext).inProgress;\\n}\\n\\nexport function useContainerStyleOfProgressViewersInactivity(\\n  style: CSSProperties = { pointerEvents: 'none' },\\n): CSSProperties {\\n  const { inProgress } = useContext(ProgressCollectionContext);\\n  return inProgress ? style : {};\\n}\\n\\nconst Div = styled.div`\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n`;\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  CornerstoneViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  ProgressViewer,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\n        <InsightViewerContainer width={width} height={height}>\n          <CornerstoneViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            interactions={interactions}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={() => {}}\n          />\n          <ProgressViewer width={width} height={height} image={image} />\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  CornerstoneViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  ProgressViewer,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map((p) => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\\n        <InsightViewerContainer width={width} height={height}>\\n          <CornerstoneViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            interactions={interactions}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={() => {}}\\n          />\\n          <ProgressViewer width={width} height={height} image={image} />\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<ProgressViewer>`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{`가 Loading 중이라는 것을 사용자에게 알리고,`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{`가 Loading 되지 않은 상태에서 User Interaction이 발생하지 않게 해준다.`}</p>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/components/ProgressViewer')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <Example example={component('./ProgressViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
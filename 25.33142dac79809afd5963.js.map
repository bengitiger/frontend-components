{"version":3,"sources":["webpack:///./src/_packages/@lunit/heatmap/draw/getRGBArray.ts?6ad8","webpack:///./src/_packages/@lunit/heatmap/draw/getAlpha.ts?1312","webpack:///./src/_packages/@lunit/heatmap/draw/getRGBAArray.ts?5e26","webpack:///./src/_packages/@lunit/heatmap/__tests__/heatmap.test.ts","webpack:///./src/_packages/@lunit/heatmap/__pages__/PixelComputation.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","example","source","isMDXComponent"],"mappings":"2FAAA,OAAe,ghB,iCCAf,OAAe,+L,iCCAf,OAAe,+Z,iCCAf,OAAe,qmD,iCCCf,+EAOA,MAKMA,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,iBAA8B,KAAI,0BAAYA,WAAW,MAAO,cAA2B,KAAI,0BAAYA,WAAW,MAAO,mBAC/J,qBAAK,8DACL,qBAAG,0BAAYA,WAAW,KAAM,SAAsB,4JACtD,sBAAI,0BAAYA,WAAW,MAAO,kBAClC,YAAC,UAAD,CAASC,QAASC,YAAO,sBAAD,UAAC,KAAD,8DAAyBH,QAAQ,YACzD,sBAAI,0BAAYC,WAAW,MAAO,eAClC,YAAC,UAAD,CAASC,QAASC,YAAO,mBAAD,UAAC,KAAD,2DAAsBH,QAAQ,YACtD,sBAAI,0BAAYC,WAAW,MAAO,mBAClC,YAAC,UAAD,CAASC,QAASC,YAAO,uBAAD,UAAC,KAAD,+DAA0BH,QAAQ,YAC1D,sBAAM,QACN,YAAC,UAAD,CAASE,QAASC,YAAO,4BAAD,UAAC,KAAD,oEAA+BH,QAAQ,aAKnEH,EAAWO,gBAAiB","file":"25.33142dac79809afd5963.js","sourcesContent":["export default \"export function getRGBArray(value: number): [number, number, number] {\\n  let r: number, g: number, b: number;\\n  const v: number = Math.max(Math.min(value, 1), 0);\\n\\n  if (v < 0.25) {\\n    r = 0;\\n    g = 4 * v;\\n    b = 1;\\n  } else if (v < 0.5) {\\n    r = 0;\\n    g = 1;\\n    b = 1 + 4 * (0.25 - v);\\n  } else if (v < 0.75) {\\n    r = 4 * (v - 0.5);\\n    g = 1;\\n    b = 0;\\n  } else {\\n    r = 1;\\n    g = 1 + 4 * (0.75 - v);\\n    b = 0;\\n  }\\n\\n  return [(r * 255) << 0, (g * 255) << 0, (b * 255) << 0];\\n}\\n\"","export default \"export function getAlpha({ stop, threshold }: { stop: number; threshold: number }): number {\\n  return stop < threshold ? 0 : ((stop - threshold) * 0.75) / (1 - threshold);\\n}\\n\"","export default \"import { getAlpha } from './getAlpha';\\nimport { getRGBArray } from './getRGBArray';\\n\\nexport function getRGBAArray({\\n  stop,\\n  threshold,\\n}: {\\n  stop: number;\\n  threshold: number;\\n}): [number, number, number, number] {\\n  const alpha: number = getAlpha({ stop, threshold });\\n\\n  if (alpha <= 0) return [0, 0, 0, 0];\\n\\n  const [r, g, b] = getRGBArray(stop);\\n\\n  return [r, g, b, alpha];\\n}\\n\"","export default \"import { getAlpha, getRGBAArray, getRGBArray } from '@lunit/heatmap';\\n\\ndescribe('@lunit/heatmap', () => {\\n  test('getRGBArray', () => {\\n    expect(getRGBArray(0)).toEqual([0, 0, 255]);\\n    expect(getRGBArray(0.25)).toEqual([0, 255, 255]);\\n    expect(getRGBArray(0.5)).toEqual([0, 255, 0]);\\n    expect(getRGBArray(0.75)).toEqual([255, 255, 0]);\\n    expect(getRGBArray(1)).toEqual([255, 0, 0]);\\n  });\\n\\n  test('getAlpha', () => {\\n    expect(getAlpha({ threshold: 0, stop: 0 })).toEqual(0);\\n    expect(getAlpha({ threshold: 0, stop: 0.25 })).toEqual(0.1875);\\n    expect(getAlpha({ threshold: 0, stop: 0.5 })).toEqual(0.375);\\n    expect(getAlpha({ threshold: 0, stop: 0.75 })).toEqual(0.5625);\\n    expect(getAlpha({ threshold: 0, stop: 1 })).toEqual(0.75);\\n\\n    // threshold : 특정 stop 영역을 drop (alpha 0) 시키기 위한 값\\n    // stop < threshold -> alpha는 0이 된다\\n    expect(getAlpha({ threshold: 0.5, stop: 0.49 })).toEqual(0);\\n  });\\n\\n  test('getRGBAArray', () => {\\n    expect(getRGBAArray({ threshold: 0, stop: 0 })).toEqual([0, 0, 0, 0]);\\n    expect(getRGBAArray({ threshold: 0, stop: 0.25 })).toEqual([0, 255, 255, 0.1875]);\\n    expect(getRGBAArray({ threshold: 0, stop: 0.5 })).toEqual([0, 255, 0, 0.375]);\\n    expect(getRGBAArray({ threshold: 0, stop: 0.75 })).toEqual([255, 255, 0, 0.5625]);\\n    expect(getRGBAArray({ threshold: 0, stop: 1 })).toEqual([255, 0, 0, 0.75]);\\n\\n    // stop < threshold -> alpha는 0이 된다\\n    expect(getRGBAArray({ threshold: 0.5, stop: 0.49 })).toEqual([0, 0, 0, 0]);\\n  });\\n});\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { source } from '@handbook/source';\nimport { Example } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`getRGBArray()`}</inlineCode>{`, `}<inlineCode parentName=\"h1\">{`getAlpha()`}</inlineCode>{`, `}<inlineCode parentName=\"h1\">{`getRGBAArray()`}</inlineCode></h1>\n    <p>{`Heatmap Pixel 계산 공식들이다.`}</p>\n    <p><inlineCode parentName=\"p\">{`0 ~ 1`}</inlineCode>{` 형태로 들어오는 Posmap Value를 RGBA Pixel로 어떻게 계산 할지 결정한다. `}</p>\n    <h2><inlineCode parentName=\"h2\">{`getRGBArray()`}</inlineCode></h2>\n    <Example example={source('../draw/getRGBArray')} mdxType=\"Example\" />\n    <h2><inlineCode parentName=\"h2\">{`getAlpha()`}</inlineCode></h2>\n    <Example example={source('../draw/getAlpha')} mdxType=\"Example\" />\n    <h2><inlineCode parentName=\"h2\">{`getRGBAArray()`}</inlineCode></h2>\n    <Example example={source('../draw/getRGBAArray')} mdxType=\"Example\" />\n    <h2>{`Test`}</h2>\n    <Example example={source('../__tests__/heatmap.test')} mdxType=\"Example\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
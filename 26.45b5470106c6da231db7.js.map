{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/hooks/useImageLoadedTime.ts?4320","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageLoadedTime/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageLoadedTime/Basic.tsx?be13","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageLoadedTime.mdx"],"names":["installWADOImageLoader","images","useMemo","series","slice","map","p","CornerstoneSingleImage","progresses","image","progress","imageLoadedTime","useImageLoadedTime","toDateString","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","component","height","isMDXComponent"],"mappings":"ulBAAA,OAAe,23D,iCCAf,6CASAA,mCAEe,eACb,MAAMC,EAA6BC,kBACjC,IACEC,EACGC,MAAM,EAAG,GACTC,IAAIC,GAAK,IAAIC,yBAAwB,4DAA2DD,MACrG,IAGIE,EAAaN,kBAAQ,IAAMD,EAAOI,IAAII,GAASA,EAAMC,UAAW,CAACT,IAEjEU,EAAkBC,6BAAmBJ,GAE3C,OACE,6BACE,2BAAIG,EAAmB,mBAAkBA,EAAgBE,iBAAmB,qB,iCC1BlF,OAAe,6zB,iCCCf,+EAOA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,yBAClC,sBAAM,OACN,YAAC,UAAD,CAASC,QAASC,YAAO,iDAAD,UAAC,KAAD,6EAAoDC,KAAG,EAACJ,QAAQ,YACxF,sBAAM,UACN,YAAC,UAAD,CAASE,QAASG,YAAU,6BAAD,aAAC,KAAD,SAAC,KAAD,8FAAgCL,QAAQ,WACrE,YAAC,UAAD,CAASM,OAAQ,IAAKN,QAAQ,cAMhCH,EAAWU,gBAAiB","file":"26.45b5470106c6da231db7.js","sourcesContent":["export default \"import { useEffect, useState } from 'react';\\nimport { combineLatest, Observable } from 'rxjs';\\nimport { map } from 'rxjs/operators';\\n\\n/**\\n * Progress가 완료된 시간을 찾기 위해 사용된다.\\n *\\n * (A. Task 시작)\\n * → User가 행동할 수 없는 Image Loading 시간\\n * → (B. Image가 로딩되어 Task가 시작된 시간)\\n * → Task 진행\\n * → (C. Task 완료 시점)\\n *\\n * User가 Task를 진행한 시간을 좀 더 정확하게 계산하기 위해 사용된다.\\n *\\n * C - A = User가 행동할 수 없는 Image Loading 시간 때문에 부정확\\n * B - A = C - A 보다 좀 더 User가 행동할 수 있는 시간을 기준으로 계산\\n *\\n * ```ts\\n * const progress = useMemo(() => [image.progress], [image]);\\n * const imageLoadedTime = useImageLoadedTime(progress);\\n * ```\\n *\\n * 여기서 `imageLoadedTime`은 Image가 최종적으로 Load된 시간이다.\\n */\\nexport function useImageLoadedTime(progresses: Observable<number>[] | null): Date | null {\\n  const [time, setTime] = useState<Date | null>(null);\\n\\n  useEffect(() => {\\n    if (progresses) {\\n      const subscription = combineLatest(progresses)\\n        .pipe(map((numbers: number[]) => numbers.reduce((t, x) => t + x, 0) / numbers.length))\\n        .subscribe(value => {\\n          if (value >= 1) {\\n            setTime(new Date());\\n            subscription.unsubscribe();\\n          }\\n        });\\n\\n      return () => {\\n        subscription.unsubscribe();\\n      };\\n    }\\n  }, [progresses]);\\n\\n  return time;\\n}\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  installWADOImageLoader,\n  useImageLoadedTime,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const images: CornerstoneImage[] = useMemo(\n    () =>\n      series\n        .slice(0, 5)\n        .map(p => new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`)),\n    [],\n  );\n\n  const progresses = useMemo(() => images.map(image => image.progress), [images]);\n\n  const imageLoadedTime = useImageLoadedTime(progresses);\n\n  return (\n    <div>\n      <p>{imageLoadedTime ? `Image loaded at ${imageLoadedTime.toDateString()}` : 'in progress...'}</p>\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  installWADOImageLoader,\\n  useImageLoadedTime,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const images: CornerstoneImage[] = useMemo(\\n    () =>\\n      series\\n        .slice(0, 5)\\n        .map(p => new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`)),\\n    [],\\n  );\\n\\n  const progresses = useMemo(() => images.map(image => image.progress), [images]);\\n\\n  const imageLoadedTime = useImageLoadedTime(progresses);\\n\\n  return (\\n    <div>\\n      <p>{imageLoadedTime ? `Image loaded at ${imageLoadedTime.toDateString()}` : 'in progress...'}</p>\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useImageLoadedTime()`}</inlineCode></h1>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/hooks/useImageLoadedTime')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <Example example={component('./useImageLoadedTime/Basic')} mdxType=\"Example\">\n  <Preview height={100} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
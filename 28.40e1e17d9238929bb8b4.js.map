{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/components/InsightViewerContainer.tsx?092e","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerContainer/Holders.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerContainer/Holders.tsx?10da","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerContainer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","divElement","setDivElement","useState","options","resetTime","ref","pan","adjust","zoom","updateCornerstoneRenderData","style","color","fontSize","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","component","isMDXComponent"],"mappings":"2FAAA,OAAe,6qB,iCCAf,oCAgBAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGI,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,KAGKC,EAAYC,GAAiBC,mBAAgC,MAEpE,OACE,kBAAC,8BAAD,CAA6BC,QAASf,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOY,eAC/C,kBAAC,yBAAD,CAAwBC,IAAKJ,EAAeZ,MAAOA,EAAOC,OAAQA,GAChE,kBAAC,gBAAD,CACED,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNa,IAAiB,QAAZf,GAAqBS,EAC1BO,OAAoB,WAAZhB,GAAwBS,EAChCQ,KAAgB,SAAVhB,GAAoBQ,EAC1BI,UAAWA,EACXT,MAAOA,EACPc,4BAA6B,SAG/B,kBAAC,gBAAD,KACE,0BAAMC,MAAO,CAAEC,MAAO,MAAOC,SAAU,KAAvC,eAGF,kBAAC,iBAAD,KACE,0BAAMF,MAAO,CAAEC,MAAO,MAAOC,SAAU,KAAvC,gBAGF,kBAAC,mBAAD,KACE,0BAAMF,MAAO,CAAEC,MAAO,MAAOC,SAAU,KAAvC,kBAGF,kBAAC,oBAAD,KACE,0BAAMF,MAAO,CAAEC,MAAO,MAAOC,SAAU,KAAvC,uB,iCCpEZ,OAAe,2vE,iCCCf,wFAQA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,6BAClC,qBAAK,uDACL,qBAAK,4HAAsC,0BAAYA,WAAW,KAAM,sBAAmC,wDAC3G,YAAC,UAAD,CAASC,QAASC,YAAO,0CAAD,UAAC,KAAD,uFAA6CH,QAAQ,YAC7E,sBAAM,WACN,qBAAG,0BAAYC,WAAW,KAAM,mBAAgC,KAAI,0BAAYA,WAAW,KAAM,oBAAiC,KAAI,0BAAYA,WAAW,KAAM,uBAAoC,iBAAM,0BAAYA,WAAW,KAAM,sBAAmC,2IAC7Q,8BACE,iBAAGA,WAAW,cAAe,4LAE/B,YAAC,UAAD,CAASC,QAASE,YAAU,mCAAD,aAAC,KAAD,SAAC,KAAD,yGAAsCJ,QAAQ,WAC3E,YAAC,IAAD,CAAsB3B,OAAQ,IAAK2B,QAAQ,2BAM7CH,EAAWQ,gBAAiB","file":"28.40e1e17d9238929bb8b4.js","sourcesContent":["export default \"import styled from 'styled-components';\\n\\nexport const InsightViewerContainer = styled.div<{ width: number; height: number }>`\\n  background-color: #000000;\\n  position: relative;\\n  width: ${({ width }) => width}px;\\n  height: ${({ height }) => height}px;\\n`;\\n\\nexport const LeftTopHolder = styled.div`\\n  position: absolute;\\n  left: 5px;\\n  top: 5px;\\n`;\\n\\nexport const LeftBottomHolder = styled.div`\\n  position: absolute;\\n  left: 5px;\\n  bottom: 5px;\\n`;\\n\\nexport const RightTopHolder = styled.div`\\n  position: absolute;\\n  right: 5px;\\n  top: 5px;\\n`;\\n\\nexport const RightBottomHolder = styled.div`\\n  position: absolute;\\n  right: 5px;\\n  bottom: 5px;\\n`;\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  LeftTopHolder,\n  RightTopHolder,\n  LeftBottomHolder,\n  RightBottomHolder,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useState } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\n          <InsightViewer\n            width={width}\n            height={height}\n            invert={invert}\n            flip={flip}\n            pan={control === 'pan' && divElement}\n            adjust={control === 'adjust' && divElement}\n            zoom={wheel === 'zoom' && divElement}\n            resetTime={resetTime}\n            image={image}\n            updateCornerstoneRenderData={() => {}}\n          />\n\n          <LeftTopHolder>\n            <span style={{ color: 'red', fontSize: 13 }}>LEFT / TOP</span>\n          </LeftTopHolder>\n\n          <RightTopHolder>\n            <span style={{ color: 'red', fontSize: 13 }}>RIGHT / TOP</span>\n          </RightTopHolder>\n\n          <LeftBottomHolder>\n            <span style={{ color: 'red', fontSize: 13 }}>LEFT / BOTTOM</span>\n          </LeftBottomHolder>\n\n          <RightBottomHolder>\n            <span style={{ color: 'red', fontSize: 13 }}>RIGHT / BOTTOM</span>\n          </RightBottomHolder>\n        </InsightViewerContainer>\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  LeftTopHolder,\\n  RightTopHolder,\\n  LeftBottomHolder,\\n  RightBottomHolder,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useState } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const [divElement, setDivElement] = useState<HTMLDivElement | null>(null);\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewerContainer ref={setDivElement} width={width} height={height}>\\n          <InsightViewer\\n            width={width}\\n            height={height}\\n            invert={invert}\\n            flip={flip}\\n            pan={control === 'pan' && divElement}\\n            adjust={control === 'adjust' && divElement}\\n            zoom={wheel === 'zoom' && divElement}\\n            resetTime={resetTime}\\n            image={image}\\n            updateCornerstoneRenderData={() => {}}\\n          />\\n\\n          <LeftTopHolder>\\n            <span style={{ color: 'red', fontSize: 13 }}>LEFT / TOP</span>\\n          </LeftTopHolder>\\n\\n          <RightTopHolder>\\n            <span style={{ color: 'red', fontSize: 13 }}>RIGHT / TOP</span>\\n          </RightTopHolder>\\n\\n          <LeftBottomHolder>\\n            <span style={{ color: 'red', fontSize: 13 }}>LEFT / BOTTOM</span>\\n          </LeftBottomHolder>\\n\\n          <RightBottomHolder>\\n            <span style={{ color: 'red', fontSize: 13 }}>RIGHT / BOTTOM</span>\\n          </RightBottomHolder>\\n        </InsightViewerContainer>\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<InsightViewerContainer>`}</inlineCode></h1>\n    <p>{`특별한 기능은 없다.`}</p>\n    <p>{`단순히 Element들이 Layer로 겹쳐서 배치되게 하기 위한 `}<inlineCode parentName=\"p\">{`position: relative`}</inlineCode>{` 선언만 가지고 있다.`}</p>\n    <Example example={source('../../components/InsightViewerContainer')} mdxType=\"Example\" />\n    <h1>{`Holders`}</h1>\n    <p><inlineCode parentName=\"p\">{`<LeftTopHolder>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<RightTopHolder>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<RightBottomHolder>`}</inlineCode>{` 또는 `}<inlineCode parentName=\"p\">{`<LeftBottomHolder>`}</inlineCode>{`를 사용해서 각 코너에 필요한 정보를 표시할 수 있다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`단순한 Styled-Component 이기 때문에 필요에 따라 Holder는 그냥 만들어 사용해도 된다.`}</p>\n    </blockquote>\n    <Example example={component('./InsightViewerContainer/Holders')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
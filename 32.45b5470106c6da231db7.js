(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{758:function(e,t,n){"use strict";n.r(t),t.default="export function getRGBArray(value: number): [number, number, number] {\n  let r: number, g: number, b: number;\n  const v: number = Math.max(Math.min(value, 1), 0);\n\n  if (v < 0.25) {\n    r = 0;\n    g = 4 * v;\n    b = 1;\n  } else if (v < 0.5) {\n    r = 0;\n    g = 1;\n    b = 1 + 4 * (0.25 - v);\n  } else if (v < 0.75) {\n    r = 4 * (v - 0.5);\n    g = 1;\n    b = 0;\n  } else {\n    r = 1;\n    g = 1 + 4 * (0.75 - v);\n    b = 0;\n  }\n\n  return [(r * 255) << 0, (g * 255) << 0, (b * 255) << 0];\n}\n"},759:function(e,t,n){"use strict";n.r(t),t.default="export function getAlpha({ stop, threshold }: { stop: number; threshold: number }): number {\n  return stop < threshold ? 0 : ((stop - threshold) * 0.75) / (1 - threshold);\n}\n"},760:function(e,t,n){"use strict";n.r(t),t.default="import { getAlpha } from './getAlpha';\nimport { getRGBArray } from './getRGBArray';\n\nexport function getRGBAArray({\n  stop,\n  threshold,\n}: {\n  stop: number;\n  threshold: number;\n}): [number, number, number, number] {\n  const alpha: number = getAlpha({ stop, threshold });\n\n  if (alpha <= 0) return [0, 0, 0, 0];\n\n  const [r, g, b] = getRGBArray(stop);\n\n  return [r, g, b, alpha];\n}\n"},761:function(e,t,n){"use strict";n.r(t),t.default="import { getAlpha, getRGBAArray, getRGBArray } from '@lunit/heatmap';\n\ndescribe('@lunit/heatmap', () => {\n  test('getRGBArray', () => {\n    expect(getRGBArray(0)).toEqual([0, 0, 255]);\n    expect(getRGBArray(0.25)).toEqual([0, 255, 255]);\n    expect(getRGBArray(0.5)).toEqual([0, 255, 0]);\n    expect(getRGBArray(0.75)).toEqual([255, 255, 0]);\n    expect(getRGBArray(1)).toEqual([255, 0, 0]);\n  });\n\n  test('getAlpha', () => {\n    expect(getAlpha({ threshold: 0, stop: 0 })).toEqual(0);\n    expect(getAlpha({ threshold: 0, stop: 0.25 })).toEqual(0.1875);\n    expect(getAlpha({ threshold: 0, stop: 0.5 })).toEqual(0.375);\n    expect(getAlpha({ threshold: 0, stop: 0.75 })).toEqual(0.5625);\n    expect(getAlpha({ threshold: 0, stop: 1 })).toEqual(0.75);\n\n    // threshold : \ud2b9\uc815 stop \uc601\uc5ed\uc744 drop (alpha 0) \uc2dc\ud0a4\uae30 \uc704\ud55c \uac12\n    // stop < threshold -> alpha\ub294 0\uc774 \ub41c\ub2e4\n    expect(getAlpha({ threshold: 0.5, stop: 0.49 })).toEqual(0);\n  });\n\n  test('getRGBAArray', () => {\n    expect(getRGBAArray({ threshold: 0, stop: 0 })).toEqual([0, 0, 0, 0]);\n    expect(getRGBAArray({ threshold: 0, stop: 0.25 })).toEqual([0, 255, 255, 0.1875]);\n    expect(getRGBAArray({ threshold: 0, stop: 0.5 })).toEqual([0, 255, 0, 0.375]);\n    expect(getRGBAArray({ threshold: 0, stop: 0.75 })).toEqual([255, 255, 0, 0.5625]);\n    expect(getRGBAArray({ threshold: 0, stop: 1 })).toEqual([255, 0, 0, 0.75]);\n\n    // stop < threshold -> alpha\ub294 0\uc774 \ub41c\ub2e4\n    expect(getRGBAArray({ threshold: 0.5, stop: 0.49 })).toEqual([0, 0, 0, 0]);\n  });\n});\n"},917:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return o}));n(0);var r=n(62),a=n(7),p=n(89);const l={};function o({components:e,...t}){return Object(r.b)("wrapper",Object.assign({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("h1",null,Object(r.b)("inlineCode",{parentName:"h1"},"getRGBArray()"),", ",Object(r.b)("inlineCode",{parentName:"h1"},"getAlpha()"),", ",Object(r.b)("inlineCode",{parentName:"h1"},"getRGBAArray()")),Object(r.b)("p",null,"Heatmap Pixel \uacc4\uc0b0 \uacf5\uc2dd\ub4e4\uc774\ub2e4."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"0 ~ 1")," \ud615\ud0dc\ub85c \ub4e4\uc5b4\uc624\ub294 Posmap Value\ub97c RGBA Pixel\ub85c \uc5b4\ub5bb\uac8c \uacc4\uc0b0 \ud560\uc9c0 \uacb0\uc815\ud55c\ub2e4. "),Object(r.b)("h2",null,Object(r.b)("inlineCode",{parentName:"h2"},"getRGBArray()")),Object(r.b)(p.Example,{example:Object(a.d)("../draw/getRGBArray",{source:n(758),filename:"src/_packages/@lunit/heatmap/draw/getRGBArray.ts"}),mdxType:"Example"}),Object(r.b)("h2",null,Object(r.b)("inlineCode",{parentName:"h2"},"getAlpha()")),Object(r.b)(p.Example,{example:Object(a.d)("../draw/getAlpha",{source:n(759),filename:"src/_packages/@lunit/heatmap/draw/getAlpha.ts"}),mdxType:"Example"}),Object(r.b)("h2",null,Object(r.b)("inlineCode",{parentName:"h2"},"getRGBAArray()")),Object(r.b)(p.Example,{example:Object(a.d)("../draw/getRGBAArray",{source:n(760),filename:"src/_packages/@lunit/heatmap/draw/getRGBAArray.ts"}),mdxType:"Example"}),Object(r.b)("h2",null,"Test"),Object(r.b)(p.Example,{example:Object(a.d)("../__tests__/heatmap.test",{source:n(761),filename:"src/_packages/@lunit/heatmap/__tests__/heatmap.test.ts"}),mdxType:"Example"}))}o.isMDXComponent=!0}}]);
//# sourceMappingURL=32.45b5470106c6da231db7.js.map
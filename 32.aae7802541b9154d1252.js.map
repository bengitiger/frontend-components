{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageStore/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageStore/Basic.tsx?94f0","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useImageStore.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","imageIds","series","slice","map","p","Sample","fetch","useImageStore","imageId","setImageId","useState","image","useMemo","useEffect","style","display","options","resetTime","pan","adjust","zoom","updateCornerstoneRenderData","i","key","onClick","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"6oBAeAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGLC,EAAqBC,EACxBC,MAAM,EAAG,IACTC,IAAIC,GAAM,4DAA2DA,KAExE,SAASC,IACP,MAAM,MAAEC,GAAUC,2BAEXC,EAASC,GAAcC,mBAAiB,IAAMV,EAAS,IAExDW,EAAQC,kBAA0B,IAAMN,EAAME,GAAU,CAACF,EAAOE,IAWtE,OATAK,oBAAU,KAGRP,EAAMN,EAAS,IACfM,EAAMN,EAAS,IACfM,EAAMN,EAAS,IACfM,EAAMN,EAAS,KACd,CAACM,IAGF,yBAAKQ,MAAO,CAAEC,QAAS,SACrB,kBAAC,8BAAD,CAA6BC,QAASvB,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOoB,eAC/C,kBAAC,yBAAD,CAAwBvB,MAAOA,EAAOC,OAAQA,GAC5C,kBAAC,gBAAD,CACED,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNoB,IAAiB,QAAZtB,EACLuB,OAAoB,WAAZvB,EACRwB,KAAgB,SAAVvB,EACNoB,UAAWA,EACXN,MAAOA,EACPU,4BAA6B,SAE/B,kBAAC,iBAAD,CAAgB3B,MAAOA,EAAOC,OAAQA,EAAQgB,MAAOA,MAI3D,6BACE,4BACGX,EAASG,IAAI,CAACK,EAASc,IACtB,wBAAIC,IAAKf,GACP,uBAAQgB,QAAS,IAAMf,EAAWD,IAAlC,cAAwDc,QAUvD,cACb,kBAAC,qBAAD,KACE,kBAACjB,EAAD,Q,iCCnFJ,OAAe,qnF,iCCCf,wFAQA,MAKMoB,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,oBAClC,qBAAG,0BAAYA,WAAW,KAAM,SAAsB,oFACtD,qBAAK,kGAAsB,0BAAYA,WAAW,KAAM,oBAAiC,4DACzF,sBACE,kBAAIA,WAAW,MAAO,oEACtB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,mDAAgE,yGAEpH,YAAC,UAAD,CAASC,QAASC,YAAU,wBAAD,aAAC,KAAD,SAAC,KAAD,yFAA2BH,QAAQ,WAChE,YAAC,IAAD,CAAsBlC,OAAQ,IAAKkC,QAAQ,2BAM7CH,EAAWO,gBAAiB","file":"32.aae7802541b9154d1252.js","sourcesContent":["import {\n  CornerstoneImage,\n  ImageStoreProvider,\n  InsightViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  ProgressViewer,\n  useImageStore,\n} from '@lunit/insight-viewer';\nimport { Button } from '@material-ui/core';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nconst imageIds: string[] = series\n  .slice(0, 10)\n  .map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`);\n\nfunction Sample() {\n  const { fetch } = useImageStore();\n\n  const [imageId, setImageId] = useState<string>(() => imageIds[0]);\n\n  const image = useMemo<CornerstoneImage>(() => fetch(imageId), [fetch, imageId]);\n\n  useEffect(() => {\n    // 1 ~ 4번 이미지들을 Prefetch 한다\n    // 1 ~ 4번 이미지들은 빠르게 뜨게 될 것이다\n    fetch(imageIds[1]);\n    fetch(imageIds[2]);\n    fetch(imageIds[3]);\n    fetch(imageIds[4]);\n  }, [fetch]);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <InsightViewerTestController options={controllerOptions}>\n        {({ width, height, invert, flip, control, wheel, resetTime }) => (\n          <InsightViewerContainer width={width} height={height}>\n            <InsightViewer\n              width={width}\n              height={height}\n              invert={invert}\n              flip={flip}\n              pan={control === 'pan'}\n              adjust={control === 'adjust'}\n              zoom={wheel === 'zoom'}\n              resetTime={resetTime}\n              image={image}\n              updateCornerstoneRenderData={() => {}}\n            />\n            <ProgressViewer width={width} height={height} image={image} />\n          </InsightViewerContainer>\n        )}\n      </InsightViewerTestController>\n      <div>\n        <ul>\n          {imageIds.map((imageId, i) => (\n            <li key={imageId}>\n              <Button onClick={() => setImageId(imageId)}>Show Image {i}</Button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n// 상위에 <ImageStoreProvider>가 반드시 필요하다\nexport default () => (\n  <ImageStoreProvider>\n    <Sample />\n  </ImageStoreProvider>\n);\n","export default \"import {\\n  CornerstoneImage,\\n  ImageStoreProvider,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  ProgressViewer,\\n  useImageStore,\\n} from '@lunit/insight-viewer';\\nimport { Button } from '@material-ui/core';\\nimport React, { useEffect, useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nconst imageIds: string[] = series\\n  .slice(0, 10)\\n  .map(p => `wadouri:https://fixtures.front.lunit.io/dcm-files/series/${p}`);\\n\\nfunction Sample() {\\n  const { fetch } = useImageStore();\\n\\n  const [imageId, setImageId] = useState<string>(() => imageIds[0]);\\n\\n  const image = useMemo<CornerstoneImage>(() => fetch(imageId), [fetch, imageId]);\\n\\n  useEffect(() => {\\n    // 1 ~ 4번 이미지들을 Prefetch 한다\\n    // 1 ~ 4번 이미지들은 빠르게 뜨게 될 것이다\\n    fetch(imageIds[1]);\\n    fetch(imageIds[2]);\\n    fetch(imageIds[3]);\\n    fetch(imageIds[4]);\\n  }, [fetch]);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <InsightViewerTestController options={controllerOptions}>\\n        {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n          <InsightViewerContainer width={width} height={height}>\\n            <InsightViewer\\n              width={width}\\n              height={height}\\n              invert={invert}\\n              flip={flip}\\n              pan={control === 'pan'}\\n              adjust={control === 'adjust'}\\n              zoom={wheel === 'zoom'}\\n              resetTime={resetTime}\\n              image={image}\\n              updateCornerstoneRenderData={() => {}}\\n            />\\n            <ProgressViewer width={width} height={height} image={image} />\\n          </InsightViewerContainer>\\n        )}\\n      </InsightViewerTestController>\\n      <div>\\n        <ul>\\n          {imageIds.map((imageId, i) => (\\n            <li key={imageId}>\\n              <Button onClick={() => setImageId(imageId)}>Show Image {i}</Button>\\n            </li>\\n          ))}\\n        </ul>\\n      </div>\\n    </div>\\n  );\\n}\\n\\n// 상위에 <ImageStoreProvider>가 반드시 필요하다\\nexport default () => (\\n  <ImageStoreProvider>\\n    <Sample />\\n  </ImageStoreProvider>\\n);\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useImageStore()`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`*.dcm`}</inlineCode>{` 파일을 Prefetch 하기 위해 사용한다.`}</p>\n    <p>{`사용자가 다음에 볼 것이라 예상되는 `}<inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{`를 미리 Prefetch 할 수 있다.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`현재 1번 Image를 보고 있다면`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`useEffect(() => fetch(imageIds[2]), [imageIds])`}</inlineCode>{` 이와 같은 식으로 2번 이미지를 Prefetch 한다`}</li>\n    </ul>\n    <Example example={component('./useImageStore/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
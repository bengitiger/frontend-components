{"version":3,"sources":["webpack:///./src/_packages/@handbook/source/__pages__/Transpile/filterExports.tsx","webpack:///./src/_packages/@handbook/source/__pages__/Transpile/filterExports.tsx?023b","webpack:///./src/_packages/@handbook/source/__pages__/Transpile.mdx"],"names":["codes","api","Array","from","map","name","code","key","language","children","layoutProps","MDXContent","components","props","mdxType","example","component","height","style","overflowY","isMDXComponent"],"mappings":"2FAAA,0CAmEe,eACb,MAAMA,EAAQC,YAAI,IAAK,IAAK,IAAK,QAAnBA,CAhEQ,syBAkEtB,OACE,6BACGC,MAAMC,KAAKH,GAAOI,IAAI,EAAEC,EAAMC,KAE3B,kBAAC,WAAD,CAAUC,IAAKF,GACb,4BAAKA,GACL,kBAAC,IAAD,CAAWG,SAAS,aAAaC,SAAUH,S,iCC5EvD,OAAe,s0C,iCCCf,+EAOA,MAKMI,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAM,SACN,YAAC,UAAD,CAASC,QAASC,YAAU,4BAAD,aAAC,KAAD,SAAC,KAAD,kFAA+BF,QAAQ,WACpE,YAAC,UAAD,CAASG,OAAQ,IAAKC,MAAO,CACvBC,UAAW,QACVL,QAAQ,cAMjBH,EAAWS,gBAAiB","file":"33.4df3d27af3d2d49331b1.js","sourcesContent":["import { CodeBlock } from '@handbook/code-block';\nimport { api } from '@handbook/source';\nimport React, { Fragment } from 'react';\n\nconst source: string = `\n/**\n * Foo....\n */\nexport interface X {\n  a: string;\n  b: number;\n}\n\nexport interface Y {\n  /** foo... */\n  a: string;\n  \n  /** bar... */\n  b: number;\n}\n\ninterface Z {\n}\n\n/**\n * hello?\n */\nexport function x({ a, b }: { a: number, b: number }): number {\n  console.log('hello world?');\n  return a + b;\n}\n\nexport function y() {\n  console.log('hello world?');\n}\n\n/**\n * ????\n */\nexport const q = () => () => {\n  console.log('xxx');\n}\n\n/**\n * hello?\n */\nfunction z() {\n  console.log('hello world?');\n}\n\n/** skjsksjk */\nexport const xx: string = 'aaaa';\n\nexport const yy: number = 12323;\n\nconst zz: string = 'sss';\n\n/** kkdkdjdk */\nexport const nodes = <div>Hello?</div>;\n\n/** fldjkjek */\nexport class Test {\n  constructor(hello: string) {\n  }\n}\n`;\n\nexport default () => {\n  const codes = api('X', 'x', 'q', 'nodes')(source);\n\n  return (\n    <div>\n      {Array.from(codes).map(([name, code]) => {\n        return (\n          <Fragment key={name}>\n            <h2>{name}</h2>\n            <CodeBlock language=\"typescript\" children={code} />\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n};\n","export default \"import { CodeBlock } from '@handbook/code-block';\\nimport { api } from '@handbook/source';\\nimport React, { Fragment } from 'react';\\n\\nconst source: string = `\\n/**\\n * Foo....\\n */\\nexport interface X {\\n  a: string;\\n  b: number;\\n}\\n\\nexport interface Y {\\n  /** foo... */\\n  a: string;\\n  \\n  /** bar... */\\n  b: number;\\n}\\n\\ninterface Z {\\n}\\n\\n/**\\n * hello?\\n */\\nexport function x({ a, b }: { a: number, b: number }): number {\\n  console.log('hello world?');\\n  return a + b;\\n}\\n\\nexport function y() {\\n  console.log('hello world?');\\n}\\n\\n/**\\n * ????\\n */\\nexport const q = () => () => {\\n  console.log('xxx');\\n}\\n\\n/**\\n * hello?\\n */\\nfunction z() {\\n  console.log('hello world?');\\n}\\n\\n/** skjsksjk */\\nexport const xx: string = 'aaaa';\\n\\nexport const yy: number = 12323;\\n\\nconst zz: string = 'sss';\\n\\n/** kkdkdjdk */\\nexport const nodes = <div>Hello?</div>;\\n\\n/** fldjkjek */\\nexport class Test {\\n  constructor(hello: string) {\\n  }\\n}\\n`;\\n\\nexport default () => {\\n  const codes = api('X', 'x', 'q', 'nodes')(source);\\n\\n  return (\\n    <div>\\n      {Array.from(codes).map(([name, code]) => {\\n        return (\\n          <Fragment key={name}>\\n            <h2>{name}</h2>\\n            <CodeBlock language=\\\"typescript\\\" children={code} />\\n          </Fragment>\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Slice`}</h1>\n    <Example example={component('./Transpile/filterExports')} mdxType=\"Example\">\n  <Preview height={600} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
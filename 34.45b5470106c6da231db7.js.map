{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/MirrorData.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/MirrorData.tsx?2a4b","webpack:///./src/_packages/@lunit/insight-viewer/hooks/useViewportMirroring.ts?3f3d","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useViewportMirroring.mdx"],"names":["installWADOImageLoader","image1","useMemo","CornerstoneSingleImage","unload","unloadImage","image2","image3","viewer2","useRef","viewer3","updateMasterRenderData","useViewportMirroring","resetTime","Date","now","interactions","useViewerInteractions","style","display","width","height","invert","flip","image","updateCornerstoneRenderData","ref","layoutProps","MDXContent","components","props","mdxType","parentName","to","example","source","api","component","isMDXComponent"],"mappings":"2FAAA,oCAWAA,mCAEe,eACb,MAAMC,EAA2BC,kBAC/B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,IAGIC,EAA2BJ,kBAC/B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,IAGIE,EAA2BL,kBAC/B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,IAGIG,EAAUC,iBAA0B,MACpCC,EAAUD,iBAA0B,OAEpC,uBAAEE,GAA2BC,+BAAqBJ,EAASE,GAE3DG,EAAYX,kBAAgB,IAAMY,KAAKC,MAAO,IAE9CC,EAAeC,gCAAsB,CAAC,MAAO,SAEnD,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAAC,oBAAD,CACEC,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,MAAM,EACNP,aAAcA,EACdH,UAAWA,EACXW,MAAOvB,EACPwB,4BAA6Bd,IAE/B,kBAAC,oBAAD,CACEe,IAAKlB,EACLY,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,MAAM,EACNP,aAAcA,EACdH,UAAWA,EACXW,MAAOlB,EACPmB,4BAA6B,SAE/B,kBAAC,oBAAD,CACEC,IAAKhB,EACLU,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,MAAM,EACNP,aAAcA,EACdH,UAAWA,EACXW,MAAOjB,EACPkB,4BAA6B,Y,iCC/ErC,OAAe,4rE,iCCAf,OAAe,4jD,iCCCf,uFAQA,MAKME,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,2BAClC,qBAAK,4BAAO,0BAAYA,WAAW,KAAM,uBAAoC,oGAC7E,qBAAK,0IAA8D,kBAAIA,WAAW,MAAW,KAC7F,6BAAa,0BAAYA,WAAW,KAAM,uBAAoC,sEAA6B,kBAAIA,WAAW,MAAW,KACrI,gDAAiB,0BAAYA,WAAW,KAAM,uBAAoC,0FAClF,8BACE,iBAAGA,WAAW,cAAe,yGAE/B,YAAC,IAAD,CAAMC,GAAG,wCAAwCF,QAAQ,QAAzD,8GACA,sBAAM,OACN,YAAC,UAAD,CAASG,QAASC,YAAO,mDAAD,UAAC,KAAD,+EAAsDC,KAAG,EAACL,QAAQ,YAC1F,sBAAM,UACN,YAAC,UAAD,CAASG,QAASG,YAAU,4CAAD,aAAC,KAAD,SAAC,KAAD,sGAA+CN,QAAQ,WACpF,YAAC,UAAD,CAASV,OAAQ,IAAKU,QAAQ,cAMhCH,EAAWU,gBAAiB","file":"34.45b5470106c6da231db7.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useViewerInteractions,\n  useViewportMirroring,\n} from '@lunit/insight-viewer';\nimport React, { useMemo, useRef } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image1: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const image2: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000020.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const image3: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000030.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const viewer2 = useRef<CornerstoneViewer>(null);\n  const viewer3 = useRef<CornerstoneViewer>(null);\n\n  const { updateMasterRenderData } = useViewportMirroring(viewer2, viewer3);\n\n  const resetTime = useMemo<number>(() => Date.now(), []);\n\n  const interactions = useViewerInteractions(['pan', 'zoom']);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <CornerstoneViewer\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image1}\n        updateCornerstoneRenderData={updateMasterRenderData}\n      />\n      <CornerstoneViewer\n        ref={viewer2}\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image2}\n        updateCornerstoneRenderData={() => {}}\n      />\n      <CornerstoneViewer\n        ref={viewer3}\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        interactions={interactions}\n        resetTime={resetTime}\n        image={image3}\n        updateCornerstoneRenderData={() => {}}\n      />\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useViewerInteractions,\\n  useViewportMirroring,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo, useRef } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image1: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const image2: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000020.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const image3: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000030.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const viewer2 = useRef<CornerstoneViewer>(null);\\n  const viewer3 = useRef<CornerstoneViewer>(null);\\n\\n  const { updateMasterRenderData } = useViewportMirroring(viewer2, viewer3);\\n\\n  const resetTime = useMemo<number>(() => Date.now(), []);\\n\\n  const interactions = useViewerInteractions(['pan', 'zoom']);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <CornerstoneViewer\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image1}\\n        updateCornerstoneRenderData={updateMasterRenderData}\\n      />\\n      <CornerstoneViewer\\n        ref={viewer2}\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image2}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n      <CornerstoneViewer\\n        ref={viewer3}\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        interactions={interactions}\\n        resetTime={resetTime}\\n        image={image3}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n    </div>\\n  );\\n};\\n\"","export default \"import { RefObject, useCallback, useMemo } from 'react';\\nimport { InsightViewer } from '../components/InsightViewer';\\nimport { CornerstoneRenderData, CornerstoneViewerLike } from '../types';\\n\\ninterface ViewportMirroring {\\n  /** <CornerstoneViewer updateCornerstoneRenderData={}> 에 사용한다 */\\n  updateMasterRenderData: (renderData: CornerstoneRenderData) => void;\\n}\\n\\n/**\\n * 여러개의 <CornerstoneViewer>를 동기화 시키기 위해 사용된다\\n */\\nexport function useViewportMirroring(\\n  ...destinations: (\\n    | InsightViewer\\n    | RefObject<InsightViewer>\\n    | CornerstoneViewerLike\\n    | RefObject<CornerstoneViewerLike>\\n  )[]\\n): ViewportMirroring {\\n  const updateMasterRenderData = useCallback(\\n    ({ viewport }: CornerstoneRenderData) => {\\n      const { hflip, vfilip, translation, scale } = viewport;\\n\\n      for (const dest of destinations) {\\n        if ('updateViewport' in dest) {\\n          dest.updateViewport({\\n            hflip,\\n            vfilip,\\n            translation,\\n            scale,\\n          });\\n        } else if ('current' in dest && dest.current) {\\n          dest.current.updateViewport({\\n            hflip,\\n            vfilip,\\n            translation,\\n            scale,\\n          });\\n        }\\n      }\\n    },\\n    //eslint-disable-next-line react-hooks/exhaustive-deps\\n    [...destinations],\\n  );\\n\\n  return useMemo<ViewportMirroring>(\\n    () => ({\\n      updateMasterRenderData,\\n    }),\\n    [updateMasterRenderData],\\n  );\\n}\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useViewportMirroring()`}</inlineCode></h1>\n    <p>{`여러개의 `}<inlineCode parentName=\"p\">{`<CornerstoneViewer>`}</inlineCode>{` 화면을 동기화 시키기 위해 필요하다.`}</p>\n    <p>{`Many-to-Many 구조의 Sync가 아니라, One-to-Many 형태의 Mirroing 이기 때문에,`}<br parentName=\"p\"></br>{`\n`}{`Master가 되는 `}<inlineCode parentName=\"p\">{`<CornerstoneViewer>`}</inlineCode>{`에서만 User Interaction이 가능하고,`}<br parentName=\"p\"></br>{`\n`}{`그 외의 Slave가 되는 `}<inlineCode parentName=\"p\">{`<CornerstoneViewer>`}</inlineCode>{`에서는 단순 User Interaction이 불가능하다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Many-to-Many 구조의 Sync가 필요하면, 나중에 개발`}</p>\n    </blockquote>\n    <Link to=\"/insight-viewer/cornerstonerenderdata\" mdxType=\"Link\">CornerstoneRenderData에서 좀 더 자세히 확인할 수 있다.</Link>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/insight-viewer/hooks/useViewportMirroring')} api mdxType=\"Example\" />\n    <h1>{`Sample`}</h1>\n    <Example example={component('../Basic/CornerstoneRenderData/MirrorData')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
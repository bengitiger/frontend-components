{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/SetData.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneRenderData/SetData.tsx?fe43","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Hooks/useInsightViewerSync.mdx"],"names":["installWADOImageLoader","image","useMemo","CornerstoneSingleImage","unload","unloadImage","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","resetTime","Date","now","style","display","width","height","invert","flip","pan","adjust","zoom","position","backgroundColor","posMap","data","engine_result","pos_map","threshold","layoutProps","MDXContent","components","props","mdxType","parentName","to","example","component","isMDXComponent"],"mappings":"2FAAA,6CAYAA,mCAEe,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,KAGI,sBAAEC,EAAF,4BAAyBC,GAAgCC,iCAEzDC,EAAYP,kBAAgB,IAAMQ,KAAKC,MAAO,IAEpD,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAAC,gBAAD,CACEC,MAAO,IACPC,OAAQ,IACRC,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNX,UAAWA,EACXR,MAAOA,EACPM,4BAA6BA,IAE/B,yBAAKK,MAAO,CAAES,SAAU,WAAYP,MAAO,IAAKC,OAAQ,IAAKO,gBAAiB,SAC5E,kBAAC,gBAAD,CACER,MAAO,IACPC,OAAQ,IACRQ,OAAQC,EAAKC,cAAcA,cAAcC,QACzCC,UAAW,GACXrB,sBAAuBA,Q,iCC/CjC,OAAe,u+C,iCCCf,uFAQA,MAKMsB,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,2BAClC,qBAAG,0BAAYA,WAAW,KAAM,mBAAgC,iDAAkB,0BAAYA,WAAW,KAAM,mBAAgC,KAAI,0BAAYA,WAAW,KAAM,mBAAgC,yIAChN,YAAC,IAAD,CAAMC,GAAG,wCAAwCF,QAAQ,QAAzD,8GACA,sBAAM,UACN,YAAC,UAAD,CAASG,QAASC,YAAU,yCAAD,aAAC,KAAD,SAAC,KAAD,mGAA4CJ,QAAQ,WACjF,YAAC,UAAD,CAASjB,OAAQ,IAAKiB,QAAQ,cAMhCH,EAAWQ,gBAAiB","file":"36.02b2d200355355642645.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  HeatmapViewer,\n  InsightViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport data from '../../../__fixtures__/posMap.sample.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  const resetTime = useMemo<number>(() => Date.now(), []);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <InsightViewer\n        width={400}\n        height={500}\n        invert={false}\n        flip={false}\n        pan={true}\n        adjust={false}\n        zoom={true}\n        resetTime={resetTime}\n        image={image}\n        updateCornerstoneRenderData={updateCornerstoneRenderData} // 받아서\n      />\n      <div style={{ position: 'relative', width: 400, height: 500, backgroundColor: 'navy' }}>\n        <HeatmapViewer\n          width={400}\n          height={500}\n          posMap={data.engine_result.engine_result.pos_map}\n          threshold={0.1}\n          cornerstoneRenderData={cornerstoneRenderData} // 넣어준다\n        />\n      </div>\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  HeatmapViewer,\\n  InsightViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport data from '../../../__fixtures__/posMap.sample.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  const resetTime = useMemo<number>(() => Date.now(), []);\\n\\n  return (\\n    <div style={{ display: 'flex' }}>\\n      <InsightViewer\\n        width={400}\\n        height={500}\\n        invert={false}\\n        flip={false}\\n        pan={true}\\n        adjust={false}\\n        zoom={true}\\n        resetTime={resetTime}\\n        image={image}\\n        updateCornerstoneRenderData={updateCornerstoneRenderData} // 받아서\\n      />\\n      <div style={{ position: 'relative', width: 400, height: 500, backgroundColor: 'navy' }}>\\n        <HeatmapViewer\\n          width={400}\\n          height={500}\\n          posMap={data.engine_result.engine_result.pos_map}\\n          threshold={0.1}\\n          cornerstoneRenderData={cornerstoneRenderData} // 넣어준다\\n        />\\n      </div>\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'react-router-dom';\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useInsightViewerSync()`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`와 그 위에 Layer 되는 `}<inlineCode parentName=\"p\">{`<ContourViewer>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<ContourDrawer>`}</inlineCode>{`와 같은 Component들의 Viewport를 동기화 시키기 위해 사용된다.`}</p>\n    <Link to=\"/insight-viewer/cornerstonerenderdata\" mdxType=\"Link\">CornerstoneRenderData에서 좀 더 자세히 확인할 수 있다.</Link>\n    <h1>{`Sample`}</h1>\n    <Example example={component('../Basic/CornerstoneRenderData/SetData')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
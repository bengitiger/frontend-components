(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{814:function(e,n,t){"use strict";t.r(n),n.default="import { posMapToImageData } from '@lunit/heatmap';\nimport React, { Component, createRef, RefObject } from 'react';\nimport styled from 'styled-components';\nimport { InsightViewerGuestProps } from '../hooks/useInsightViewerSync';\nimport { cleanCanvas } from './draw/cleanCanvas';\n\nexport interface HeatmapViewerProps extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n\n  /** AI \uacb0\uacfc\ub85c \ub098\uc624\ub294 Heatmap \ub370\uc774\ud130 \ud615\uc2dd */\n  posMap: number[][];\n\n  /** Threshold \uac12 (CXR = 0.15, MMG = 0.1) */\n  threshold: number;\n}\n\nexport class HeatmapViewer extends Component<HeatmapViewerProps, {}> {\n  private canvasRef: RefObject<HTMLCanvasElement> = createRef();\n  private ctx: CanvasRenderingContext2D | null = null;\n  private imageData: ImageData | null = null;\n  private imageResourceCanvas: HTMLCanvasElement | null = null;\n\n  render() {\n    return (\n      <Canvas\n        ref={this.canvasRef}\n        width={this.props.width}\n        height={this.props.height}\n        style={{\n          width: this.props.width,\n          height: this.props.height,\n        }}\n      />\n    );\n  }\n\n  componentDidMount() {\n    this.imageResourceCanvas = document.createElement('canvas');\n\n    if (!this.canvasRef.current) throw new Error('<canvas> is not initialized');\n\n    this.ctx = this.canvasRef.current.getContext('2d');\n\n    if (!this.ctx) throw new Error('<canvas> context 2d is not initialized');\n\n    this.imageData = posMapToImageData(this.props.posMap, this.props.threshold);\n\n    this.drawHeatmap(this.props);\n  }\n\n  componentDidUpdate(prevProps: Readonly<HeatmapViewerProps>) {\n    const { width, height, posMap, threshold, cornerstoneRenderData } = this.props;\n\n    if (prevProps.posMap !== posMap || prevProps.threshold !== threshold) {\n      this.imageData = posMapToImageData(posMap, threshold);\n    }\n\n    if (\n      prevProps.posMap !== posMap ||\n      prevProps.threshold !== threshold ||\n      prevProps.cornerstoneRenderData !== cornerstoneRenderData\n    ) {\n      cleanCanvas(this.ctx!, width, height);\n\n      this.drawHeatmap(this.props);\n    }\n  }\n\n  drawHeatmap = ({ cornerstoneRenderData }: Readonly<HeatmapViewerProps>) => {\n    if (!this.imageData || !this.imageResourceCanvas || !this.ctx || !cornerstoneRenderData) {\n      return;\n    }\n\n    try {\n      this.ctx.save();\n\n      this.imageResourceCanvas.width = this.imageData.width;\n      this.imageResourceCanvas.height = this.imageData.height;\n      this.imageResourceCanvas.getContext('2d')!.putImageData(this.imageData, 0, 0);\n\n      cornerstone.setToPixelCoordinateSystem(cornerstoneRenderData.enabledElement, this.ctx);\n\n      const imageWidth: number = cornerstoneRenderData.image.width;\n      const imageHeight: number = cornerstoneRenderData.image.height;\n\n      this.ctx.drawImage(\n        this.imageResourceCanvas,\n        0,\n        0,\n        this.imageResourceCanvas.width,\n        this.imageResourceCanvas.height,\n        0,\n        0,\n        imageWidth,\n        imageHeight,\n      );\n\n      this.ctx.restore();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nconst Canvas = styled.canvas`\n  position: absolute;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n`;\n\n/**\n * @deprecated use HeatmapViewer instead\n */\nexport const MachineHeatmapViewer = HeatmapViewer;\n"},815:function(e,n,t){"use strict";t.r(n);var a=t(666),r=t(0),i=t.n(r),s=t(693);Object(a.installWADOImageLoader)();const o={width:[600,400,1e3],height:[700,400,1e3],control:["pan",["none","pan","adjust"]],wheel:["zoom",["none","zoom"]],flip:[!1],invert:[!1]};n.default=()=>{const e=Object(r.useMemo)(()=>new a.CornerstoneSingleImage("wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm",{unload:a.unloadImage}),[]),{cornerstoneRenderData:n,updateCornerstoneRenderData:t}=Object(a.useInsightViewerSync)();return i.a.createElement("div",null,i.a.createElement(a.InsightViewerTestController,{options:o},({width:r,height:o,invert:p,flip:h,control:m,wheel:l,resetTime:c,element:d,setElement:g,interactions:u})=>i.a.createElement(a.InsightViewerContainer,{ref:g,width:r,height:o},i.a.createElement(a.CornerstoneViewer,{width:r,height:o,invert:p,flip:h,interactions:u,resetTime:c,image:e,updateCornerstoneRenderData:t}),Array.isArray(s.engine_result.engine_result.pos_map)&&n&&i.a.createElement(a.HeatmapViewer,{width:r,height:o,posMap:s.engine_result.engine_result.pos_map,threshold:.1,cornerstoneRenderData:n}))))}},816:function(e,n,t){"use strict";t.r(n),n.default="import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  HeatmapViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport data from '../../../__fixtures__/posMap.sample.json';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  return (\n    <div>\n      <InsightViewerTestController options={controllerOptions}>\n        {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n          <InsightViewerContainer ref={setElement} width={width} height={height}>\n            <CornerstoneViewer\n              width={width}\n              height={height}\n              invert={invert}\n              flip={flip}\n              interactions={interactions}\n              resetTime={resetTime}\n              image={image}\n              updateCornerstoneRenderData={updateCornerstoneRenderData} // Render data\ub97c \ubc1b\ub294\ub2e4\n            />\n            {Array.isArray(data.engine_result.engine_result.pos_map) && cornerstoneRenderData && (\n              <HeatmapViewer\n                width={width}\n                height={height}\n                posMap={data.engine_result.engine_result.pos_map}\n                threshold={0.1}\n                cornerstoneRenderData={cornerstoneRenderData} // Render data\ub97c \uc804\ub2ec\ud55c\ub2e4\n              />\n            )}\n          </InsightViewerContainer>\n        )}\n      </InsightViewerTestController>\n    </div>\n  );\n};\n"},930:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return p}));t(0);var a=t(62),r=t(7),i=t(89),s=t(667);const o={};function p({components:e,...n}){return Object(a.b)("wrapper",Object.assign({},o,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",null,Object(a.b)("inlineCode",{parentName:"h1"},"<HeatmapViewer>")),Object(a.b)("p",null,"AI\uc5d0\uc11c \ub0b4\ub824\ubc1b\ub294 Heatmap \ub370\uc774\ud130 \ud615\uc2dd\uc744 \ud654\uba74\uc5d0 \uadf8\ub9b0\ub2e4."),Object(a.b)("h1",null,"API"),Object(a.b)(i.Example,{example:Object(r.d)("@lunit/insight-viewer/components/HeatmapViewer",{source:t(814),filename:"src/_packages/@lunit/insight-viewer/components/HeatmapViewer.tsx"}),api:!0,mdxType:"Example"}),Object(a.b)("h1",null,"Sample"),Object(a.b)(i.Example,{example:Object(r.b)("./HeatmapViewer/Basic",{component:t(815),source:t(816),filename:"src/_packages/@lunit/insight-viewer/__pages__/Components/HeatmapViewer/Basic.tsx"}),mdxType:"Example"},Object(a.b)(s.a,{height:720,mdxType:"InsightViewerPreview"})))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=36.45b5470106c6da231db7.js.map
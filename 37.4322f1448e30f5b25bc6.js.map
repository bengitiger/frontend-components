{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/ConvertToImages/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/ConvertToImages/Basic.tsx?45cb","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/CT/ConvertToImages.mdx"],"names":["installWADOImageLoader","Viewer","image","element","setElement","useState","useSeriesImageScroll","current","end","useSeriesImagePosition","ref","width","height","invert","flip","pan","adjust","zoom","resetTime","updateCornerstoneRenderData","fill","axial","setAxial","coronal","setCoronal","sagittal","setSagittal","useEffect","abort","AbortController","buffer","fetchBuffer","url","signal","progress","pipe","map","progressOrBytes","images","filter","mapNpyBufferToImages","id","sliceSpacing","rowPixelSpacing","columnPixelSpacing","windowWidth","windowCenter","CornerstoneStaticSeriesImage","style","display","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"2FAAA,sDAmBAA,mCAKA,SAASC,GAAO,MAAEC,IAChB,MAAOC,EAASC,GAAcC,mBAAgC,MAE9DC,+BAAqB,CACnBJ,QACAC,YAGF,MAAM,QAAEI,EAAF,IAAWC,GAAQC,iCAAuBP,GAEhD,OACE,kBAAC,yBAAD,CAAwBQ,IAAKN,EAAYO,MAdvB,IAcqCC,OAbpC,KAcjB,kBAAC,gBAAD,CACED,MAhBc,IAiBdC,OAhBe,IAiBfC,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNC,UAAW,EACXhB,MAAOA,EACPiB,4BAA6B,SAE/B,kBAAC,iBAAD,CAAgBR,MA3BA,IA2BcC,OA1Bb,IA0B6BV,MAAOA,IACrD,kBAAC,iBAAD,KACE,kBAAC,aAAD,KACE,8BACE,2BAAOkB,KAAK,WAAWb,GADzB,YAGE,2BAAOa,KAAK,WAAZ,KAHF,YAKE,2BAAOA,KAAK,WAAWZ,OAQpB,eACb,MAAOa,EAAOC,GAAYjB,mBAA0C,OAC7DkB,EAASC,GAAcnB,mBAA0C,OACjEoB,EAAUC,GAAerB,mBAA0C,MAuC1E,OArCAsB,oBAAU,KACR,MAAMC,EAAQ,IAAIC,gBAEZC,EAA+CC,sBAAY,CAC/DC,IAAK,8EACLC,OAAQL,EAAMK,SAGVC,EAA+BJ,EAAOK,KAC1CC,YAAIC,GAA+C,kBAApBA,EAA+BA,EAAkBA,EAAkB,EAAI,IAGlGC,EAA2CR,EAAOK,KACtDI,YACGF,GACmC,kBAApBA,KAAkCA,GAGpDG,+BAAqB,CACnBC,GAAI,UACJC,aAAc,EACdC,gBAAiB,SACjBC,mBAAoB,SACpBC,YAAa,KACbC,cAAe,OAQnB,OAJAxB,EAAS,IAAIyB,+BAA6B,CAAEb,WAAUI,OAAQA,EAAOH,KAAKC,YAAI,EAAGf,WAAYA,OAC7FG,EAAW,IAAIuB,+BAA6B,CAAEb,WAAUI,OAAQA,EAAOH,KAAKC,YAAI,EAAGb,aAAcA,OACjGG,EAAY,IAAIqB,+BAA6B,CAAEb,WAAUI,OAAQA,EAAOH,KAAKC,YAAI,EAAGX,cAAeA,OAE5F,KACLG,EAAMA,UAEP,IAEIP,GAASE,GAAWE,EACzB,yBAAKuB,MAAO,CAAEC,QAAS,SACrB,kBAAChD,EAAD,CAAQC,MAAOmB,IACf,kBAACpB,EAAD,CAAQC,MAAOqB,IACf,kBAACtB,EAAD,CAAQC,MAAOuB,KAGjB,iD,iCCjHJ,OAAe,yhH,iCCCf,+EAOA,MAKMyB,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAM,kBACN,qBAAG,0BAAYC,WAAW,KAAM,eAA4B,yEAAiB,0BAAYA,WAAW,KAAM,oBAAiC,8DAC3I,YAAC,UAAD,CAASC,QAASC,YAAU,0BAAD,aAAC,KAAD,SAAC,KAAD,wFAA6BH,QAAQ,WAClE,YAAC,UAAD,CAAS1C,OAAQ,IAAK0C,QAAQ,cAMhCH,EAAWO,gBAAiB","file":"37.4322f1448e30f5b25bc6.js","sourcesContent":["import {\n  CornerstoneSequenceImage,\n  CornerstoneStaticSeriesImage,\n  fetchBuffer,\n  InsightViewer,\n  InsightViewerContainer,\n  installWADOImageLoader,\n  mapNpyBufferToImages,\n  NpyCornerstoneImages,\n  ProgressViewer,\n  RightTopHolder,\n  StrokeText,\n  useSeriesImagePosition,\n  useSeriesImageScroll,\n} from '@lunit/insight-viewer';\nimport React, { useEffect, useState } from 'react';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\ninstallWADOImageLoader();\n\nconst width: number = 300;\nconst height: number = 300;\n\nfunction Viewer({ image }: { image: CornerstoneSequenceImage }) {\n  const [element, setElement] = useState<HTMLDivElement | null>(null);\n\n  useSeriesImageScroll({\n    image,\n    element,\n  });\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  return (\n    <InsightViewerContainer ref={setElement} width={width} height={height}>\n      <InsightViewer\n        width={width}\n        height={height}\n        invert={false}\n        flip={false}\n        pan={true}\n        adjust={false}\n        zoom={false}\n        resetTime={0}\n        image={image}\n        updateCornerstoneRenderData={() => {}}\n      />\n      <ProgressViewer width={width} height={height} image={image} />\n      <RightTopHolder>\n        <StrokeText>\n          <text>\n            <tspan fill=\"#ffffff\">{current}</tspan>\n            &nbsp; &nbsp;\n            <tspan fill=\"#8694B1\">/</tspan>\n            &nbsp; &nbsp;\n            <tspan fill=\"#ffffff\">{end}</tspan>\n          </text>\n        </StrokeText>\n      </RightTopHolder>\n    </InsightViewerContainer>\n  );\n}\n\nexport default () => {\n  const [axial, setAxial] = useState<CornerstoneSequenceImage | null>(null);\n  const [coronal, setCoronal] = useState<CornerstoneSequenceImage | null>(null);\n  const [sagittal, setSagittal] = useState<CornerstoneSequenceImage | null>(null);\n\n  useEffect(() => {\n    const abort = new AbortController();\n\n    const buffer: Observable<number | ArrayBufferLike> = fetchBuffer({\n      url: 'https://opt-frontend.s3.ap-northeast-2.amazonaws.com/fixtures/npy/image.npy',\n      signal: abort.signal,\n    });\n\n    const progress: Observable<number> = buffer.pipe(\n      map(progressOrBytes => (typeof progressOrBytes === 'number' ? progressOrBytes : progressOrBytes ? 1 : 0)),\n    );\n\n    const images: Observable<NpyCornerstoneImages> = buffer.pipe(\n      filter<number | ArrayBufferLike, ArrayBufferLike>(\n        (progressOrBytes: number | ArrayBufferLike): progressOrBytes is ArrayBufferLike => {\n          return typeof progressOrBytes !== 'number' && !!progressOrBytes;\n        },\n      ),\n      mapNpyBufferToImages({\n        id: 'ct-test',\n        sliceSpacing: 3.0,\n        rowPixelSpacing: 0.9765625,\n        columnPixelSpacing: 0.9765625,\n        windowWidth: 1500.0,\n        windowCenter: -600.0,\n      }),\n    );\n\n    setAxial(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ axial }) => axial)) }));\n    setCoronal(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ coronal }) => coronal)) }));\n    setSagittal(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ sagittal }) => sagittal)) }));\n\n    return () => {\n      abort.abort();\n    };\n  }, []);\n\n  return axial && coronal && sagittal ? (\n    <div style={{ display: 'flex' }}>\n      <Viewer image={axial} />\n      <Viewer image={coronal} />\n      <Viewer image={sagittal} />\n    </div>\n  ) : (\n    <div>...in progress</div>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneStaticSeriesImage,\\n  fetchBuffer,\\n  InsightViewer,\\n  InsightViewerContainer,\\n  installWADOImageLoader,\\n  mapNpyBufferToImages,\\n  NpyCornerstoneImages,\\n  ProgressViewer,\\n  RightTopHolder,\\n  StrokeText,\\n  useSeriesImagePosition,\\n  useSeriesImageScroll,\\n} from '@lunit/insight-viewer';\\nimport React, { useEffect, useState } from 'react';\\nimport { Observable } from 'rxjs';\\nimport { filter, map } from 'rxjs/operators';\\n\\ninstallWADOImageLoader();\\n\\nconst width: number = 300;\\nconst height: number = 300;\\n\\nfunction Viewer({ image }: { image: CornerstoneSequenceImage }) {\\n  const [element, setElement] = useState<HTMLDivElement | null>(null);\\n\\n  useSeriesImageScroll({\\n    image,\\n    element,\\n  });\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  return (\\n    <InsightViewerContainer ref={setElement} width={width} height={height}>\\n      <InsightViewer\\n        width={width}\\n        height={height}\\n        invert={false}\\n        flip={false}\\n        pan={true}\\n        adjust={false}\\n        zoom={false}\\n        resetTime={0}\\n        image={image}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n      <ProgressViewer width={width} height={height} image={image} />\\n      <RightTopHolder>\\n        <StrokeText>\\n          <text>\\n            <tspan fill=\\\"#ffffff\\\">{current}</tspan>\\n            &nbsp; &nbsp;\\n            <tspan fill=\\\"#8694B1\\\">/</tspan>\\n            &nbsp; &nbsp;\\n            <tspan fill=\\\"#ffffff\\\">{end}</tspan>\\n          </text>\\n        </StrokeText>\\n      </RightTopHolder>\\n    </InsightViewerContainer>\\n  );\\n}\\n\\nexport default () => {\\n  const [axial, setAxial] = useState<CornerstoneSequenceImage | null>(null);\\n  const [coronal, setCoronal] = useState<CornerstoneSequenceImage | null>(null);\\n  const [sagittal, setSagittal] = useState<CornerstoneSequenceImage | null>(null);\\n\\n  useEffect(() => {\\n    const abort = new AbortController();\\n\\n    const buffer: Observable<number | ArrayBufferLike> = fetchBuffer({\\n      url: 'https://opt-frontend.s3.ap-northeast-2.amazonaws.com/fixtures/npy/image.npy',\\n      signal: abort.signal,\\n    });\\n\\n    const progress: Observable<number> = buffer.pipe(\\n      map(progressOrBytes => (typeof progressOrBytes === 'number' ? progressOrBytes : progressOrBytes ? 1 : 0)),\\n    );\\n\\n    const images: Observable<NpyCornerstoneImages> = buffer.pipe(\\n      filter<number | ArrayBufferLike, ArrayBufferLike>(\\n        (progressOrBytes: number | ArrayBufferLike): progressOrBytes is ArrayBufferLike => {\\n          return typeof progressOrBytes !== 'number' && !!progressOrBytes;\\n        },\\n      ),\\n      mapNpyBufferToImages({\\n        id: 'ct-test',\\n        sliceSpacing: 3.0,\\n        rowPixelSpacing: 0.9765625,\\n        columnPixelSpacing: 0.9765625,\\n        windowWidth: 1500.0,\\n        windowCenter: -600.0,\\n      }),\\n    );\\n\\n    setAxial(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ axial }) => axial)) }));\\n    setCoronal(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ coronal }) => coronal)) }));\\n    setSagittal(new CornerstoneStaticSeriesImage({ progress, images: images.pipe(map(({ sagittal }) => sagittal)) }));\\n\\n    return () => {\\n      abort.abort();\\n    };\\n  }, []);\\n\\n  return axial && coronal && sagittal ? (\\n    <div style={{ display: 'flex' }}>\\n      <Viewer image={axial} />\\n      <Viewer image={coronal} />\\n      <Viewer image={sagittal} />\\n    </div>\\n  ) : (\\n    <div>...in progress</div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`Convert Images`}</h1>\n    <p><inlineCode parentName=\"p\">{`ArrayBuffer`}</inlineCode>{` 형태로 가져온 데이터들은 `}<inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{` 형태로 변환해야 한다.`}</p>\n    <Example example={component('./ConvertToImages/Basic')} mdxType=\"Example\">\n  <Preview height={320} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
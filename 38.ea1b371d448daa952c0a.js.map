{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer/Basic.tsx?9a36","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/CornerstoneViewer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","options","resetTime","interactions","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"2FAAA,oCAWAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGI,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,IAGF,OACE,kBAAC,8BAAD,CAA6BC,QAASZ,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOS,YAAWC,kBAC1D,kBAAC,oBAAD,CACEb,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNS,aAAcA,EACdD,UAAWA,EACXN,MAAOA,EACPQ,4BAA6B,Y,iCC1CvC,OAAe,2gD,iCCCf,wFAQA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,wBAClC,YAAC,UAAD,CAASC,QAASC,YAAU,4BAAD,aAAC,KAAD,SAAC,KAAD,kGAA+BH,QAAQ,WACpE,YAAC,IAAD,CAAsBlB,OAAQ,IAAKkB,QAAQ,2BAM7CH,EAAWO,gBAAiB","file":"38.ea1b371d448daa952c0a.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\n        <CornerstoneViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          interactions={interactions}\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime, interactions }) => (\\n        <CornerstoneViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          interactions={interactions}\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<CornerstoneViewer>`}</inlineCode></h1>\n    <Example example={component('./CornerstoneViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
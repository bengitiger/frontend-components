{"version":3,"sources":["webpack:///./src/_packages/@lunit/new-window/index.tsx","webpack:///./src/handbook-new-window-sample/components/MainContent.tsx","webpack:///./src/handbook-new-window-sample/components/WindowContent.tsx","webpack:///./src/_packages/@lunit/new-window/__pages__/Basic.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","isMDXComponent"],"mappings":"2FAAA,OAAe,0rG,iCCAf,OAAe,guD,iCCAf,OAAe,s9B,iCCCf,sFAQA,MAKMA,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,sBAClC,qBAAG,0BAAYA,WAAW,KAAM,iBAA8B,8FAC9D,qBAAK,sHAAyD,kBAAIA,WAAW,MAAW,KACxF,wIACA,8BACE,iBAAGA,WAAW,cAAa,0BAAYA,WAAW,KAAM,iBAA8B,kDAAmB,0BAAYA,WAAW,KAAM,kBAA+B,kGAAsB,kBAAIA,WAAW,MAAW,KACvN,sBAAM,0BAAYA,WAAW,KAAM,UAAuB,kKAAoC,kBAAIA,WAAW,MAAW,KACxH,8OAEA,sBAAM,OACN,YAAC,UAAD,CAASC,QAASC,YAAO,0BAAD,UAAC,KAAD,uDAA6BC,KAAG,EAACJ,QAAQ,YACjE,sBAAM,SACN,qBAAG,+BAAGC,WAAW,KAAQ,CACrB,KAAQ,2EACL,gBACP,qBAAK,2DAAuB,0BAAYA,WAAW,KAAM,eAA4B,4EACrF,YAAC,UAAD,CAASC,QAASC,YAAO,gEAAD,UAAC,KAAD,uEAAmEH,QAAQ,YACnG,qBAAK,+CAAgB,0BAAYC,WAAW,KAAM,oBAAiC,2HACnF,YAAC,UAAD,CAASC,QAASC,YAAO,kEAAD,UAAC,KAAD,yEAAqEH,QAAQ,aAKzGH,EAAWQ,gBAAiB","file":"39.45b5470106c6da231db7.js","sourcesContent":["export default \"import { Component, useEffect, useState } from 'react';\\n\\n/** window.open() 새 창의 width, height */\\nexport interface WindowFeatures {\\n  width: number;\\n  height: number;\\n}\\n\\nexport interface NewWindowProps<T> {\\n  /** Window의 URL */\\n  url: string;\\n\\n  /** Window로 전달할 Data */\\n  value: T;\\n\\n  /** window.open() 의 3번째 인자로 전달되는 features */\\n  features: WindowFeatures | string;\\n\\n  /** Window가 열렸을때 */\\n  onOpen?: (window: Window) => void;\\n\\n  /** Window가 닫혔을때 */\\n  onClose?: () => void;\\n\\n  /** Window를 열려고 했지만, Browser Pop-up 제한에 막혔을때 */\\n  onBlock?: () => void;\\n}\\n\\nconst VALUE: string = '__window_value__';\\nconst UPDATE: string = '__window_value_update__';\\n\\n/**\\n * Window를 연다\\n */\\nexport class NewWindow<T> extends Component<NewWindowProps<T>, {}> {\\n  private windowObject!: Window;\\n  private intervalId!: number;\\n\\n  render() {\\n    return null;\\n  }\\n\\n  close = () => {\\n    const { onClose } = this.props;\\n\\n    if (typeof onClose === 'function') {\\n      onClose();\\n    }\\n\\n    clearInterval(this.intervalId);\\n    this.windowObject.removeEventListener('close', this.close);\\n    window.removeEventListener('beforeunload', this.close);\\n\\n    if (!this.windowObject.closed) {\\n      this.windowObject.close();\\n    }\\n  };\\n\\n  componentDidMount() {\\n    const { url, value, features, onOpen, onBlock } = this.props;\\n\\n    const windowObject: Window | null = window.open(\\n      url,\\n      '_blank',\\n      typeof features === 'string' ? features : `width=${features.width}, height=${features.height}`,\\n    );\\n\\n    if (windowObject) {\\n      if (typeof onOpen === 'function') {\\n        onOpen(windowObject);\\n      }\\n      this.windowObject = windowObject;\\n      windowObject[VALUE] = value;\\n      windowObject.addEventListener('close', this.close);\\n      window.addEventListener('beforeunload', this.close);\\n      this.intervalId = setInterval(() => {\\n        if (this.windowObject.closed) {\\n          this.close();\\n        }\\n      }, 100);\\n    } else {\\n      if (typeof onBlock === 'function') {\\n        onBlock();\\n      }\\n    }\\n  }\\n\\n  componentDidUpdate(prevProps: Readonly<NewWindowProps<T>>) {\\n    const { url, value } = this.props;\\n\\n    if (prevProps.url !== url) {\\n      this.windowObject.history.pushState({}, '', url);\\n    }\\n\\n    if (prevProps.value !== value) {\\n      this.windowObject[VALUE] = value;\\n      this.windowObject.dispatchEvent(new Event(UPDATE));\\n    }\\n  }\\n\\n  componentWillUnmount() {\\n    this.close();\\n  }\\n}\\n\\n/**\\n * Window에서 <NewWindow value={}/> 로 넣어진 Data를 받는다\\n */\\nexport function useWindowValue<T>(): T | undefined {\\n  const [value, setValue] = useState<T | undefined>(() => {\\n    return window[VALUE];\\n  });\\n\\n  useEffect(() => {\\n    function callback() {\\n      setValue(window[VALUE]);\\n    }\\n\\n    window.addEventListener(UPDATE, callback);\\n\\n    return () => {\\n      window.removeEventListener(UPDATE, callback);\\n    };\\n  }, []);\\n\\n  return value;\\n}\\n\"","export default \"import { NewWindow } from '@lunit/new-window';\\nimport { Button, TextField } from '@material-ui/core';\\nimport React, { useState } from 'react';\\n\\nexport function MainContent() {\\n  // window open\\n  const [open, setOpen] = useState<boolean>(false);\\n\\n  // values\\n  const [a, setA] = useState<number>(1);\\n  const [b, setB] = useState<number>(2);\\n\\n  return (\\n    <div>\\n      <div>\\n        <TextField value={a} onChange={({ target }) => setA(+target.value)} /> +{' '}\\n        <TextField value={b} onChange={({ target }) => setB(+target.value)} /> = <span>{a + b}</span>\\n      </div>\\n\\n      {open ? (\\n        <>\\n          <div style={{ marginTop: 20 }}>\\n            {/* Window를 닫는다 */}\\n            <Button variant=\\\"contained\\\" color=\\\"primary\\\" onClick={() => setOpen(false)}>\\n              Close Window\\n            </Button>\\n          </div>\\n\\n          {/* Window */}\\n          <NewWindow\\n            url=\\\"/window\\\"\\n            value={{\\n              a,\\n              b,\\n              updateA: setA,\\n              updateB: setB,\\n            }}\\n            features={{ width: 500, height: 400 }}\\n            onOpen={(popupWindow: Window) => console.log(popupWindow)}\\n            onClose={() => setOpen(false)}\\n            onBlock={() => {\\n              alert('Browser Pop-up 제한을 해제해주세요.');\\n              setOpen(false);\\n            }}\\n          />\\n        </>\\n      ) : (\\n        <div style={{ marginTop: 20 }}>\\n          {/* Window를 연다 */}\\n          <Button variant=\\\"contained\\\" color=\\\"primary\\\" onClick={() => setOpen(true)}>\\n            Open Window\\n          </Button>\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\"","export default \"import { useWindowValue } from '@lunit/new-window';\\nimport { Button, TextField } from '@material-ui/core';\\nimport React from 'react';\\nimport { WindowValue } from '../model/window-value';\\n\\nexport function WindowContent() {\\n  // <NewWindow value={}> 에서 전달한 값들을 받는다\\n  const value: WindowValue | undefined = useWindowValue<WindowValue>();\\n\\n  return value ? (\\n    <div>\\n      <div>\\n        <TextField value={value.a} onChange={({ target }) => value.updateA(+target.value)} /> +{' '}\\n        <TextField value={value.b} onChange={({ target }) => value.updateB(+target.value)} /> ={' '}\\n        <span>{value.a + value.b}</span>\\n      </div>\\n\\n      <div style={{ marginTop: 20 }}>\\n        {/* Window를 닫는다 */}\\n        <Button variant=\\\"contained\\\" color=\\\"primary\\\" onClick={() => window.close()}>\\n          Close Window\\n        </Button>\\n      </div>\\n    </div>\\n  ) : null;\\n}\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`@lunit/new-window`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`window.open()`}</inlineCode>{`을 대체하는 용도로 사용할 수 있다.`}</p>\n    <p>{`Main Window와 Popup Window의 Data가 React Hook으로 연결되기 때문에,`}<br parentName=\"p\"></br>{`\n`}{`Main Window를 보조하는 Popup을 만드는 용도로 사용할 수 있다.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`window.open()`}</inlineCode>{` 으로 Window를 연 다음 `}<inlineCode parentName=\"p\">{`createPortal()`}</inlineCode>{`을 사용해서 제어하는 방법도 있지만,`}<br parentName=\"p\"></br>{`\n`}{`양측의 `}<inlineCode parentName=\"p\">{`window`}</inlineCode>{` 객체가 다르다는 것에 의해 여러가지 문제들이 발생하게 된다.`}<br parentName=\"p\"></br>{`\n`}{`양측을 분리된 별개의 Window로 구성하고, 단순히 Data로만 연결하는 것이 더 안정적인 방법이었다.`}</p>\n    </blockquote>\n    <h1>{`API`}</h1>\n    <Example example={source('@lunit/new-window/index')} api mdxType=\"Example\" />\n    <h1>{`Usage`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://dist-handbook-new-window-sample.d2vum99qvuarsy.amplifyapp.com/\"\n      }}>{`Sample Site`}</a></p>\n    <p>{`아래와 같이 Main Window에서 `}<inlineCode parentName=\"p\">{`<NewWindow>`}</inlineCode>{`를 사용해서 Window를 열 수 있다.`}</p>\n    <Example example={source('../../../../handbook-new-window-sample/components/MainContent')} mdxType=\"Example\" />\n    <p>{`열려진 Window에서는 `}<inlineCode parentName=\"p\">{`useWindowValue()`}</inlineCode>{`를 사용해서 Main Window에서 전달한 Data를 받을 수 있다.`}</p>\n    <Example example={source('../../../../handbook-new-window-sample/components/WindowContent')} mdxType=\"Example\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
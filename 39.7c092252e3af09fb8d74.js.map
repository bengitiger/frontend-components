{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerTestController/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerTestController/Basic.tsx?0290","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/InsightViewerTestController.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","options","resetTime","pan","adjust","zoom","updateCornerstoneRenderData","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"2FAAA,oCAWAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGI,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,qFAAqF,CAC/GC,OAAQC,gBAEZ,IAGF,OACE,kBAAC,8BAAD,CAA6BC,QAASZ,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOS,eAC/C,kBAAC,gBAAD,CACEZ,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNS,IAAiB,QAAZX,EACLY,OAAoB,WAAZZ,EACRa,KAAgB,SAAVZ,EACNS,UAAWA,EACXN,MAAOA,EACPU,4BAA6B,Y,iCC5CvC,OAAe,6zD,iCCCf,wFAQA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,kCAClC,qBAAK,kHAAsC,0BAAYA,WAAW,KAAM,mBAAgC,8CAAyB,0BAAYA,WAAW,KAAM,gBAA6B,0CAC3L,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,6OAUP,qBAAK,iGACL,qBAAG,sBAAQA,WAAW,KAAM,8GAC5B,qBAAG,0BAAYA,WAAW,KAAM,qBAAkC,UAAI,0BAAYA,WAAW,KAAM,mBAAgC,iQACnI,qBAAK,gJACL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,8/CAuCP,YAAC,UAAD,CAASC,QAASC,YAAU,sCAAD,aAAC,KAAD,SAAC,KAAD,4GAAyCH,QAAQ,WAC9E,YAAC,IAAD,CAAsBpB,OAAQ,IAAKoB,QAAQ,2BAM7CH,EAAWO,gBAAiB","file":"39.7c092252e3af09fb8d74.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [true],\n  invert: [true],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewerTestController options={controllerOptions}>\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\n        <InsightViewer\n          width={width}\n          height={height}\n          invert={invert} // 색상을 반전한다\n          flip={flip} // 이미지를 좌우로 뒤집는다\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      )}\n    </InsightViewerTestController>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [true],\\n  invert: [true],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewerTestController options={controllerOptions}>\\n      {({ width, height, invert, flip, control, wheel, resetTime }) => (\\n        <InsightViewer\\n          width={width}\\n          height={height}\\n          invert={invert} // 색상을 반전한다\\n          flip={flip} // 이미지를 좌우로 뒤집는다\\n          pan={control === 'pan'} // Pan Interaction을 활성화 한다\\n          adjust={control === 'adjust'} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n          zoom={wheel === 'zoom'} // Zoom Interaction을 활성화 한다\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      )}\\n    </InsightViewerTestController>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<InsightViewerTestController>`}</inlineCode></h1>\n    <p>{`options의 상태를 관리해주고 이 상태들을 children인 `}<inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`와 좌측 Controller panel인 `}<inlineCode parentName=\"p\">{`<Controller>`}</inlineCode>{`에게 전달한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`function InsightViewerTestController({ children, options }: InsightViewerControllerProps) {\n  // code 생략...\n  return (\n    <Fragment>\n      {children(state)}\n      <Controller {...state} />\n    </Fragment>\n  );\n}\n`}</code></pre>\n    <p>{`options의 값들은 2가지 형태가 될 수 있다.`}</p>\n    <p><strong parentName=\"p\">{`Array 타입이 아닐경우 Controller가 비활성화 된다.`}</strong></p>\n    <p><inlineCode parentName=\"p\">{`{children(state)}`}</inlineCode>{`로 `}<inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`에게 state가 전달되기 때문에 정확한 default값으로 전달해야 한다. 기능을 끄는용으로 사용해서는 안된다.`}</p>\n    <p>{`array의 index 마다 역할이 다르니 하단 interface선언문을 참고하자`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface InsightViewerControllerProps {\n  children: (controllerState: InsightViewerControllerState) => ReactNode;\n  options: InsightViewerControllerOptions;\n}\n\nexport interface InsightViewerControllerOptions {\n  /**\n  * [default, min, max]\n  * default는 사용자에게 보여줄 width와 height값, min과 max는 Controller의 최솟값과 최댓값\n  * number는 width Controller가 비활성화 된다.\n  */\n  width: [number, number, number] | number;\n  height: [number, number, number] | number;\n\n  /**\n  * Control 타입을 살펴보면,\n  * export const controls = ['none', 'pen', 'pan', 'adjust', 'magnify'] as const;\n  * export type Control = typeof controls[number];\n  *\n  * control: ['pan', ['none', 'pan', 'adjust']]\n  * [default, [사용자가 선택할 수 있는 options]]\n  * 'pan'과 'adjust'는 같이 사용할 수 없다.\n  */\n  control: [Control, Control[]] | Control;\n\n  /**\n   * type Wheel = 'none' | 'zoom' | 'scroll';\n   * wheel: ['zoom', ['none', 'zoom']]\n   * [default, [사용자가 선택할 수 있는 options]]\n   */\n  wheel: [Wheel, Wheel[]] | Wheel;\n\n  // 색상을 반전한다. [default]\n  invert: [boolean] | boolean;\n\n  // 이미지를 좌우로 뒤집는다. [default]\n  flip: [boolean] | boolean;\n}\n`}</code></pre>\n    <Example example={component('./InsightViewerTestController/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/HeatmapViewer/Basic.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/HeatmapViewer/Basic.tsx?03c3","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Components/HeatmapViewer.mdx"],"names":["installWADOImageLoader","controllerOptions","width","height","control","wheel","flip","invert","image","useMemo","CornerstoneSingleImage","unload","unloadImage","cornerstoneRenderData","updateCornerstoneRenderData","useInsightViewerSync","options","resetTime","element","setElement","interactions","ref","Array","isArray","data","engine_result","pos_map","posMap","threshold","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","isMDXComponent"],"mappings":"2FAAA,6CAeAA,mCAEA,MAAMC,EAAoD,CACxDC,MAAO,CAAC,IAAK,IAAK,KAClBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,MAAO,CAAC,OAAQ,MAAO,WACjCC,MAAO,CAAC,OAAQ,CAAC,OAAQ,SACzBC,KAAM,EAAC,GACPC,OAAQ,EAAC,IAGI,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,wEAAwE,CAClGC,OAAQC,gBAEZ,KAGI,sBAAEC,EAAF,4BAAyBC,GAAgCC,iCAE/D,OACE,6BACE,kBAAC,8BAAD,CAA6BC,QAASf,GACnC,EAAGC,QAAOC,SAAQI,SAAQD,OAAMF,UAASC,QAAOY,YAAWC,UAASC,aAAYC,kBAC/E,kBAAC,yBAAD,CAAwBC,IAAKF,EAAYjB,MAAOA,EAAOC,OAAQA,GAC7D,kBAAC,oBAAD,CACED,MAAOA,EACPC,OAAQA,EACRI,OAAQA,EACRD,KAAMA,EACNc,aAAcA,EACdH,UAAWA,EACXT,MAAOA,EACPM,4BAA6BA,IAE9BQ,MAAMC,QAAQC,EAAKC,cAAcA,cAAcC,UAAYb,GAC1D,kBAAC,gBAAD,CACEX,MAAOA,EACPC,OAAQA,EACRwB,OAAQH,EAAKC,cAAcA,cAAcC,QACzCE,UAAW,GACXf,sBAAuBA,S,iCC1DvC,OAAe,msE,iCCCf,wFAQA,MAKMgB,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,oBAClC,qBAAK,gIACL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,uTAWP,YAAC,UAAD,CAASC,QAASC,YAAU,wBAAD,aAAC,KAAD,SAAC,KAAD,8FAA2BH,QAAQ,WAChE,YAAC,IAAD,CAAsB9B,OAAQ,IAAK8B,QAAQ,2BAM7CH,EAAWO,gBAAiB","file":"39.ea1b371d448daa952c0a.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  CornerstoneViewer,\n  HeatmapViewer,\n  InsightViewerContainer,\n  InsightViewerControllerOptions,\n  InsightViewerTestController,\n  installWADOImageLoader,\n  unloadImage,\n  useInsightViewerSync,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport data from '../../../__fixtures__/posMap.sample.json';\n\ninstallWADOImageLoader();\n\nconst controllerOptions: InsightViewerControllerOptions = {\n  width: [600, 400, 1000],\n  height: [700, 400, 1000],\n  control: ['pan', ['none', 'pan', 'adjust']],\n  wheel: ['zoom', ['none', 'zoom']],\n  flip: [false],\n  invert: [false],\n};\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\n\n  return (\n    <div>\n      <InsightViewerTestController options={controllerOptions}>\n        {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\n          <InsightViewerContainer ref={setElement} width={width} height={height}>\n            <CornerstoneViewer\n              width={width}\n              height={height}\n              invert={invert}\n              flip={flip}\n              interactions={interactions}\n              resetTime={resetTime}\n              image={image}\n              updateCornerstoneRenderData={updateCornerstoneRenderData} // Render data를 받는다\n            />\n            {Array.isArray(data.engine_result.engine_result.pos_map) && cornerstoneRenderData && (\n              <HeatmapViewer\n                width={width}\n                height={height}\n                posMap={data.engine_result.engine_result.pos_map}\n                threshold={0.1}\n                cornerstoneRenderData={cornerstoneRenderData} // Render data를 전달한다\n              />\n            )}\n          </InsightViewerContainer>\n        )}\n      </InsightViewerTestController>\n    </div>\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  CornerstoneViewer,\\n  HeatmapViewer,\\n  InsightViewerContainer,\\n  InsightViewerControllerOptions,\\n  InsightViewerTestController,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useInsightViewerSync,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport data from '../../../__fixtures__/posMap.sample.json';\\n\\ninstallWADOImageLoader();\\n\\nconst controllerOptions: InsightViewerControllerOptions = {\\n  width: [600, 400, 1000],\\n  height: [700, 400, 1000],\\n  control: ['pan', ['none', 'pan', 'adjust']],\\n  wheel: ['zoom', ['none', 'zoom']],\\n  flip: [false],\\n  invert: [false],\\n};\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://fixtures.front.lunit.io/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  const { cornerstoneRenderData, updateCornerstoneRenderData } = useInsightViewerSync();\\n\\n  return (\\n    <div>\\n      <InsightViewerTestController options={controllerOptions}>\\n        {({ width, height, invert, flip, control, wheel, resetTime, element, setElement, interactions }) => (\\n          <InsightViewerContainer ref={setElement} width={width} height={height}>\\n            <CornerstoneViewer\\n              width={width}\\n              height={height}\\n              invert={invert}\\n              flip={flip}\\n              interactions={interactions}\\n              resetTime={resetTime}\\n              image={image}\\n              updateCornerstoneRenderData={updateCornerstoneRenderData} // Render data를 받는다\\n            />\\n            {Array.isArray(data.engine_result.engine_result.pos_map) && cornerstoneRenderData && (\\n              <HeatmapViewer\\n                width={width}\\n                height={height}\\n                posMap={data.engine_result.engine_result.pos_map}\\n                threshold={0.1}\\n                cornerstoneRenderData={cornerstoneRenderData} // Render data를 전달한다\\n              />\\n            )}\\n          </InsightViewerContainer>\\n        )}\\n      </InsightViewerTestController>\\n    </div>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example } from '@handbook/components';\nimport { InsightViewerPreview } from '@lunit/handbook';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`<HeatmapViewer>`}</inlineCode></h1>\n    <p>{`AI에서 내려받는 Heatmap 데이터 형식을 화면에 그린다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface HeatmapViewerProps extends InsightViewerGuestProps {\n  width: number;\n  height: number;\n  \n  /** AI 결과로 나오는 Heatmap 데이터 형식 */\n  posMap: number[][];\n  \n  /** Threshold 값 (CXR = 0.15, MMG = 0.1) */\n  threshold: number;\n}\n`}</code></pre>\n    <Example example={component('./HeatmapViewer/Basic')} mdxType=\"Example\">\n  <InsightViewerPreview height={720} mdxType=\"InsightViewerPreview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
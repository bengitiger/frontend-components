{"version":3,"sources":["webpack:///./src/_packages/@lunit/use-shortcut/__pages__/Sample.tsx?3600","webpack:///./src/_packages/@lunit/use-shortcut/index.ts","webpack:///./src/_packages/@lunit/use-shortcut/__pages__/Sample.tsx","webpack:///./src/_packages/@lunit/use-shortcut/__pages__/Basic.mdx"],"names":["useShortcut","test","callback","windows","window","useEffect","handler","event","forEach","addEventListener","removeEventListener","key","ctrl","alt","shift","toLowerCase","map","k","indexOf","ctrlKey","altKey","shiftKey","result","setResult","useState","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","height","isMDXComponent"],"mappings":"2FAAA,OAAe,s3C,4DCgBR,SAASA,GAAY,KAAEC,EAAF,SAAQC,EAAR,QAAkBC,EAAU,CAACC,UACvDC,oBAAU,KACR,SAASC,EAAQC,GAEXN,EAAKM,IACPL,IAMJ,OAFAC,EAAQK,QAAQJ,GAAUA,EAAOK,iBAAiB,QAASH,IAEpD,KACLH,EAAQK,QAAQJ,GAAUA,EAAOM,oBAAoB,QAASJ,MAE/D,CAACL,EAAMC,EAAUC,IAGf,MAAMQ,EAAM,CACjBA,GACEC,QAAO,EAAOC,OAAM,EAAOC,SAAQ,GAA8D,KAC/FP,IACkC,kBAARI,EAAmB,CAACA,EAAII,eAAiBJ,EAAIK,IAAIC,GAAKA,EAAEF,gBAG/EG,QAAQX,EAAMI,IAAII,gBAAkB,KACxCH,GAAOL,EAAMY,YACbN,GAAMN,EAAMa,WACZN,GAAQP,EAAMc,UCxCJ,eACb,MAAOC,EAAQC,GAAaC,mBAAoB,MAgChD,OA9BAxB,EAAY,CAEVC,KAAMM,GAAqC,MAA5BA,EAAMI,IAAII,cACzBb,SAAU,IAAMqB,EAAU,kBAG5BvB,EAAY,CAEVC,KAAMU,EAAI,KACVT,SAAU,IAAMqB,EAAU,kBAG5BvB,EAAY,CACVC,KAAMU,EAAI,KACVT,SAAU,IAAMqB,EAAU,kBAG5BvB,EAAY,CAEVC,KAAMU,EAAI,CAAC,IAAK,MAChBT,SAAU,IAAMqB,EAAU,kBAG5BvB,EAAY,CAGVC,KAAMU,EAAI,IAAK,CAAEC,MAAM,IACvBV,SAAU,IAAMqB,EAAU,kBAI1B,6BACE,oEACCD,K,iCCtCP,+EAOA,MAKMG,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,wBAClC,qBAAK,6EACL,YAAC,UAAD,CAASC,QAASC,YAAU,WAAD,aAAC,KAAD,SAAC,KAAD,oEAAcH,QAAQ,WACnD,YAAC,UAAD,CAASI,OAAQ,IAAKJ,QAAQ,cAMhCH,EAAWQ,gBAAiB","file":"41.1dcca9a74dfbe786faa8.js","sourcesContent":["export default \"import { key, useShortcut } from '@lunit/use-shortcut';\\nimport React, { ReactNode, useState } from 'react';\\n\\nexport default () => {\\n  const [result, setResult] = useState<ReactNode>(null);\\n\\n  useShortcut({\\n    // 직접 KeyboardEvent를 받아서 처리해도 되고,\\n    test: event => event.key.toLowerCase() === 'a',\\n    callback: () => setResult('🍏'),\\n  });\\n\\n  useShortcut({\\n    // key()를 사용해도 된다\\n    test: key('b'),\\n    callback: () => setResult('🍌'),\\n  });\\n\\n  useShortcut({\\n    test: key('c'),\\n    callback: () => setResult('🍒'),\\n  });\\n\\n  useShortcut({\\n    // 여러개의 key를 할당할 수도 있다\\n    test: key(['d', 'e']),\\n    callback: () => setResult('📖'),\\n  });\\n\\n  useShortcut({\\n    // ctrl, alt, shift 를 같이 할댱할 수도 있다\\n    // Browser, OS Key들이 보통 Meta key와 함께 발동되기 때문에 가능한 사용하지 않는게 좋다.\\n    test: key('f', { ctrl: true }),\\n    callback: () => setResult('🚒'),\\n  });\\n\\n  return (\\n    <div>\\n      <p>Key down \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"</p>\\n      {result}\\n    </div>\\n  );\\n};\\n\"","import { DependencyList, useEffect } from 'react';\n\ninterface UseShortcutParameters {\n  /** KeyboardEvent Test */\n  test: (event: KeyboardEvent) => boolean;\n\n  /** Shortcut Handler */\n  callback: () => void;\n\n  /** @deprecated 입력하지 않아도 된다 */\n  deps?: DependencyList;\n\n  /** Popup과 같이 여러개의 Window를 일괄 통제해야 하는 경우 */\n  windows?: Window[];\n}\n\nexport function useShortcut({ test, callback, windows = [window] }: UseShortcutParameters) {\n  useEffect(() => {\n    function handler(event: KeyboardEvent) {\n      // event.target instanceof HTMLElement ) block... from input, text field...\n      if (test(event)) {\n        callback();\n      }\n    }\n\n    windows.forEach(window => window.addEventListener('keyup', handler));\n\n    return () => {\n      windows.forEach(window => window.removeEventListener('keyup', handler));\n    };\n  }, [test, callback, windows]);\n}\n\nexport const key = (\n  key: string | string[],\n  { ctrl = false, alt = false, shift = false }: { ctrl?: boolean; alt?: boolean; shift?: boolean } = {},\n) => (event: KeyboardEvent) => {\n  const keys: string[] = typeof key === 'string' ? [key.toLowerCase()] : key.map(k => k.toLowerCase());\n\n  return (\n    keys.indexOf(event.key.toLowerCase()) > -1 &&\n    (ctrl ? event.ctrlKey : true) &&\n    (alt ? event.altKey : true) &&\n    (shift ? event.shiftKey : true)\n  );\n};\n","import { key, useShortcut } from '@lunit/use-shortcut';\nimport React, { ReactNode, useState } from 'react';\n\nexport default () => {\n  const [result, setResult] = useState<ReactNode>(null);\n\n  useShortcut({\n    // 직접 KeyboardEvent를 받아서 처리해도 되고,\n    test: event => event.key.toLowerCase() === 'a',\n    callback: () => setResult('🍏'),\n  });\n\n  useShortcut({\n    // key()를 사용해도 된다\n    test: key('b'),\n    callback: () => setResult('🍌'),\n  });\n\n  useShortcut({\n    test: key('c'),\n    callback: () => setResult('🍒'),\n  });\n\n  useShortcut({\n    // 여러개의 key를 할당할 수도 있다\n    test: key(['d', 'e']),\n    callback: () => setResult('📖'),\n  });\n\n  useShortcut({\n    // ctrl, alt, shift 를 같이 할댱할 수도 있다\n    // Browser, OS Key들이 보통 Meta key와 함께 발동되기 때문에 가능한 사용하지 않는게 좋다.\n    test: key('f', { ctrl: true }),\n    callback: () => setResult('🚒'),\n  });\n\n  return (\n    <div>\n      <p>Key down \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"</p>\n      {result}\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`@lunit/use-shortcut`}</inlineCode></h1>\n    <p>{`단축키를 구현하기 위한 React Hook`}</p>\n    <Example example={component('./Sample')} mdxType=\"Example\">\n  <Preview height={120} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
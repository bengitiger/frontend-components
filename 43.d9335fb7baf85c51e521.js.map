{"version":3,"sources":["webpack:///./src/handbook-insight-viewer-sample/index.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/Getting-Started.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","example","source","isMDXComponent"],"mappings":"2FAAA,OAAe,ujD,iCCCf,+EAOA,MAKMA,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAM,cACN,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBACV,8CAEP,sBAAM,kDACN,qBAAG,0BAAYA,WAAW,KAAM,oBAAiC,uBAAiB,0BAAYA,WAAW,KAAM,6BAA0C,0CACzJ,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBACV,uPAOP,qBAAK,mCAAS,0BAAYA,WAAW,KAAM,8CAA2D,4JACtG,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,kBAA+B,WAAK,0BAAYA,WAAW,MAAO,iCACpH,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,kCAClD,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,iCAClD,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,oBAEpD,8BACE,iBAAGA,WAAW,cAAa,0BAAYA,WAAW,KAAM,oBAAiC,gDAAY,0BAAYA,WAAW,KAAM,8CAA2D,kGAAsB,0BAAYA,WAAW,KAAM,WAAwB,2EAE1Q,qBAAK,uDAAc,0BAAYA,WAAW,KAAM,QAAqB,6BAAQ,0BAAYA,WAAW,KAAM,QAAqB,0EAC/H,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBACV,8wBAuBP,sBAAM,MAAK,0BAAYA,WAAW,MAAO,4BAAyC,iBAAM,0BAAYA,WAAW,MAAO,2BAAwC,iBAC9J,qBAAG,0BAAYA,WAAW,KAAM,aAA0B,uDAAc,0BAAYA,WAAW,KAAM,4BAAyC,iBAAM,0BAAYA,WAAW,KAAM,2BAAwC,0CACzN,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBACV,gYAiBP,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,SAAsB,6DAAe,0BAAYA,WAAW,MAAO,4BAAyC,oCAC9J,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAO,SAAsB,KAAI,0BAAYA,WAAW,MAAO,SAAsB,yGAAwB,0BAAYA,WAAW,MAAO,2BAAwC,qCAEhO,sBAAM,YACN,qBAAK,gBAAK,0BAAYA,WAAW,KAAM,qBAAkC,mCAAS,0BAAYA,WAAW,KAAM,kBAA+B,0CAC9I,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,sjBA0BP,qBAAK,IAAG,0BAAYA,WAAW,KAAM,yBAAsC,oGAC3E,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBACV,0eAuBP,qBAAK,6BAAQ,0BAAYA,WAAW,KAAM,kBAA+B,iDACzE,sBAAM,sCACN,qBAAK,mCAAS,0BAAYA,WAAW,KAAM,mBAAgC,kIAC3E,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,+EACL,gBACP,YAAC,UAAD,CAASC,QAASC,YAAO,uCAAD,UAAC,KAAD,0DAA0CH,QAAQ,aAK9EH,EAAWO,gBAAiB","file":"43.d9335fb7baf85c51e521.js","sourcesContent":["export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport { render } from 'react-dom';\\nimport { GlobalStyle } from './components/GlobalStyle';\\n\\ninstallWADOImageLoader();\\n\\nfunction App() {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <div>\\n      <GlobalStyle />\\n      <InsightViewer\\n        width={700}\\n        height={600}\\n        invert={false} // 색상을 반전한다\\n        flip={false} // 이미지를 좌우로 뒤집는다\\n        pan={true} // Pan Interaction을 활성화 한다\\n        adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n        zoom={true} // Zoom Interaction을 활성화 한다\\n        resetTime={Date.now()} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n        image={image}\\n        updateCornerstoneRenderData={() => {}}\\n      />\\n    </div>\\n  );\\n}\\n\\nrender(<App />, document.querySelector('#app'));\\n\\n// Hot Module Replacement\\nif (process.env.NODE_ENV === 'development' && module.hot) {\\n  module.hot.accept();\\n}\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { source } from '@handbook/source';\nimport { Example } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1>{`1. Install`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install @lunit/insight-viewer@alpha\n`}</code></pre>\n    <h1>{`2. Static Files 포함시키기`}</h1>\n    <p><inlineCode parentName=\"p\">{`react-zeroconfig`}</inlineCode>{` Command-Line에 `}<inlineCode parentName=\"p\">{`--static-file-packages \"\"`}</inlineCode>{`를 추가해준다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"scripts\": {\n    \"app:build\": \"zeroconfig-webapp-scripts build app --static-file-packages \\\\\"@lunit/insight-viewer\\\\\"\",\n    \"app:start\": \"zeroconfig-webapp-scripts start app --static-file-packages \\\\\"@lunit/insight-viewer\\\\\"\"\n  }\n}\n`}</code></pre>\n    <p>{`이 명령어는 `}<inlineCode parentName=\"p\">{`node_modules/@lunit/insight-viewer/public/`}</inlineCode>{` 디렉토리에 있는 아래 파일들을 포함시키기 위한 과정이다.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cornerstone.js`}</inlineCode>{` → `}<inlineCode parentName=\"li\">{`http://domain/cornerstone.js`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cornerstoneWADOImageLoader.js`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cornerstoneWebImageLoader.js`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dicomParser.js`}</inlineCode></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`create-react-app`}</inlineCode>{`을 사용하는 경우 `}<inlineCode parentName=\"p\">{`node_modules/@lunit/insight-viewer/public/`}</inlineCode>{` 디렉토리에 있는 파일들을 복사해서 `}<inlineCode parentName=\"p\">{`/public`}</inlineCode>{` 디렉토리에 넣어주면 된다.`}</p>\n    </blockquote>\n    <p>{`그리고, 아래와 같이 `}<inlineCode parentName=\"p\">{`*.js`}</inlineCode>{` 파일들을 `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` 파일에 추가시켜줘야 한다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#222232\" />\n    <base href=\"/\" />\n    <link rel=\"shortcut icon\" href=\"favicon.ico\" />\n    <link rel=\"manifest\" href=\"manifest.json\" />\n    <title>Title</title>\n    <script src=\"cornerstone.js\"></script>\n    <script src=\"cornerstoneWADOImageLoader.js\"></script>\n    <script src=\"cornerstoneWebImageLoader.js\"></script>\n    <script src=\"dicomParser.js\"></script>\n    <link rel=\"stylesheet\" href=\"fonts/proximanova/proximanova.css\" />\n  </head>\n\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"app\"></div>\n  </body>\n</html>\n`}</code></pre>\n    <h1>{`3. `}<inlineCode parentName=\"h1\">{`installWADOImageLoader()`}</inlineCode>{` 또는 `}<inlineCode parentName=\"h1\">{`installWebImageLoader()`}</inlineCode>{` 실행`}</h1>\n    <p><inlineCode parentName=\"p\">{`index.tsx`}</inlineCode>{` 파일에 아래와 같이 `}<inlineCode parentName=\"p\">{`installWADOImageLoader()`}</inlineCode>{` 또는 `}<inlineCode parentName=\"p\">{`installWebImageLoader()`}</inlineCode>{`를 실행해준다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { render } from 'react-dom';\nimport { installWADOImageLoader } from '@lunit/insight-viewer';\n\ninstallWADOImageLoader();\n\nfunction App() {\n  return <div>Hello</div>;\n}\n\nrender(<App />, document.querySelector('#app'));\n\n// Hot Module Replacement\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept();\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`*.dcm`}</inlineCode>{` 파일을 사용하는 경우 `}<inlineCode parentName=\"li\">{`installWADOImageLoader()`}</inlineCode>{`를 실행한다.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`*.jpg`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`*.png`}</inlineCode>{`와 같은 이미지 파일들을 사용하는 경우 `}<inlineCode parentName=\"li\">{`installWebImageLoader()`}</inlineCode>{`를 실행한다.`}</li>\n    </ul>\n    <h1>{`4. Style`}</h1>\n    <p>{`우선 `}<inlineCode parentName=\"p\">{`styled-components`}</inlineCode>{`를 사용해서 `}<inlineCode parentName=\"p\">{`<GlobalStyle/>`}</inlineCode>{`을 만들어준다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { globalStyle as componentsGlobalStyle } from '@lunit/opt-components';\nimport { globalStyle as insightViewerGlobalStyle } from '@lunit/insight-viewer';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle\\`\n  \\${componentsGlobalStyle}\n  \\${insightViewerGlobalStyle}\n  \n  html {\n    font-size: 14px;\n    box-sizing: border-box;\n  }\n  \n  html, body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n  }\n  \n  #app {\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n  }\n\\`;\n`}</code></pre>\n    <p>{`(`}<inlineCode parentName=\"p\">{`@lunit/opt-components`}</inlineCode>{`를 사용하지 않는다면 제외하면 된다.)`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React from 'react';\nimport { render } from 'react-dom';\nimport { installWADOImageLoader } from '@lunit/insight-viewer';\nimport { GlobalStyle } from './components/GlobalStyle';\n\ninstallWADOImageLoader();\n\nfunction App() {\n  return (\n    <div>\n      <GlobalStyle />\n      Hello\n    </div>\n  );\n}\n\nrender(<App />, document.querySelector('#app'));\n\n// Hot Module Replacement\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept();\n}\n`}</code></pre>\n    <p>{`위와 같이 `}<inlineCode parentName=\"p\">{`<GlobalStyle/>`}</inlineCode>{`을 포함시켜 준다.`}</p>\n    <h1>{`5. 동작 테스트`}</h1>\n    <p>{`아래와 같이 `}<inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`를 사용해서 설정이 제대로 되었는지 확인해본다.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://dist-handbook-insight-viewer-sample.d2vum99qvuarsy.amplifyapp.com/\"\n      }}>{`Sample Site`}</a></p>\n    <Example example={source('handbook-insight-viewer-sample/index')} mdxType=\"Example\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
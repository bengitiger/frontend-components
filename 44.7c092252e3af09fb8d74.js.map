{"version":3,"sources":["webpack:///./src/_packages/@lunit/use-opt-control/__tests__/useOPTControl.test.ts","webpack:///./src/_packages/@lunit/use-opt-control/__pages__/Basic.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","example","source","isMDXComponent"],"mappings":"2FAAA,OAAe,inC,iCCCf,+EAOA,MAKMA,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,2BAClC,qBAAG,0BAAYA,WAAW,KAAM,mBAAgC,yCAAU,0BAAYA,WAAW,KAAM,cAA2B,KAAI,0BAAYA,WAAW,KAAM,WAAwB,KAAI,0BAAYA,WAAW,KAAM,aAA0B,gFACtP,qBAAK,8MACL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBACV,0RAUP,sBAAM,QACN,YAAC,UAAD,CAASC,QAASC,YAAO,kCAAD,UAAC,KAAD,kFAAqCH,QAAQ,aAKzEH,EAAWO,gBAAiB","file":"44.7c092252e3af09fb8d74.js","sourcesContent":["export default \"import { act, renderHook } from '@testing-library/react-hooks';\\nimport { useControl } from '../useControl';\\n\\ndescribe('useOPTControl()', () => {\\n  test('basic', () => {\\n    const { result } = renderHook(() => useControl());\\n\\n    expect(result.current.control).toBe('pan');\\n    expect(result.current.invert).toBeFalsy();\\n    expect(result.current.flip).toBeFalsy();\\n\\n    act(() => {\\n      result.current.updateControl('pen');\\n      result.current.updateFlip(true);\\n    });\\n\\n    expect(result.current.control).toBe('pen');\\n    expect(result.current.invert).toBeFalsy();\\n    expect(result.current.flip).toBeTruthy();\\n\\n    act(() => {\\n      result.current.updateControl('adjust');\\n      result.current.updateInvert(true);\\n    });\\n\\n    expect(result.current.control).toBe('adjust');\\n    expect(result.current.invert).toBeTruthy();\\n    expect(result.current.flip).toBeTruthy();\\n\\n    act(() => {\\n      result.current.resetControl();\\n    });\\n\\n    expect(result.current.control).toBe('pan');\\n    expect(result.current.invert).toBeFalsy();\\n    expect(result.current.flip).toBeFalsy();\\n  });\\n});\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { source } from '@handbook/source';\nimport { Example } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`@lunit/use-opt-control`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`에서 사용되는 `}<inlineCode parentName=\"p\">{`control={}`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`flip={}`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`invert={}`}</inlineCode>{` 상태를 관리하는데 사용된다.`}</p>\n    <p>{`간단하게 사용하기 위해서 만들 Util이고, 필요한 경우 아래와 같이 사용해도 된다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Control } from '@lunit/use-opt-control';\n\nfunction Component() {\n  const [control, setControl] = useState<Control>('pen');\n  const [flip, setFlip] = useState<boolean>(false);\n  const [invert, setInvert] = useState<boolean>(false);\n\n  return <div>...</div>;\n}\n`}</code></pre>\n    <h1>{`Test`}</h1>\n    <Example example={source('../__tests__/useOPTControl.test')} mdxType=\"Example\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
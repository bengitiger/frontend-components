{"version":3,"sources":["webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImage.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImage.tsx?aeb1","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImageWithSeries.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/DCMImageWithSeries.tsx?dec6","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/InsightViewerWithSeries.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/InsightViewerWithSeries.tsx?45e0","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneSingleImage.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneSingleImage.tsx?492d","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/InsightViewer.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/InsightViewer.tsx?3e7b","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneSeriesImage.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneSeriesImage.tsx?98e0","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneFileSingleImage.tsx","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage/CornerstoneFileSingleImage.tsx?e4c4","webpack:///./src/_packages/@lunit/insight-viewer/__pages__/Basic/CornerstoneImage.mdx"],"names":["installWADOImageLoader","image","useMemo","CornerstoneSingleImage","unload","unloadImage","cornerstoneImage","width","height","CornerstoneSeriesImage","series","map","p","current","end","useSeriesImagePosition","style","position","top","left","padding","backgroundColor","onClick","prev","next","marginLeft","resetTime","Date","now","invert","flip","pan","adjust","zoom","updateCornerstoneRenderData","log","setLog","useState","useEffect","progressSubscription","progress","subscribe","prevLog","Math","floor","imageSubscription","console","warn","imageId","unsubscribe","fontSize","line","i","key","imageIndex","setImageIndex","getIndex","indexSubscription","index","length","files","setFiles","onDragOver","useCallback","event","preventDefault","dataTransfer","dropEffect","onDrop","test","name","CornerstoneFileSingleImage","DropTarget","styled","div","layoutProps","MDXContent","components","props","mdxType","parentName","example","component","overflowY","isMDXComponent"],"mappings":"slBAAA,oCASAA,mCAEe,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,qFAAqF,CAC/GC,OAAQC,gBAEZ,IAGF,OAAO,kBAAC,WAAD,CAAUC,iBAAkBL,EAAOM,MAAO,IAAKC,OAAQ,Q,iCCpBhE,OAAe,0jB,iCCAf,6CAWAR,mCAEe,eACb,MAAMC,EAAkCC,kBACtC,IACE,IAAIO,yBACFC,EAAOC,IAAIC,GAAM,yEAAwEA,KACzF,CAAER,OAAQC,gBAEd,KAGI,QAAEQ,EAAF,IAAWC,GAAQC,iCAAuBd,GAEhD,OACE,oCACE,yBAAKe,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMrB,EAAMsB,QAA7B,QACA,4BAAQD,QAAS,IAAMrB,EAAMuB,QAA7B,QACA,6BACA,6BACGX,EADH,MACeC,IAGjB,yBAAKE,MAAO,CAAES,WAAY,MACxB,kBAAC,WAAD,CAAUnB,iBAAkBL,EAAOM,MAAO,IAAKC,OAAQ,U,iCCpC/D,OAAe,8nC,iCCAf,6CAWAR,mCAEe,eACb,MAAMC,EAAkCC,kBACtC,IACE,IAAIO,yBACFC,EAAOC,IAAIC,GAAM,yEAAwEA,KACzF,CAAER,OAAQC,gBAEd,KAGI,QAAEQ,EAAF,IAAWC,GAAQC,iCAAuBd,GAG1CyB,EAAYxB,kBAAQ,IAAMyB,KAAKC,MAAO,IAE5C,OACE,oCACE,yBAAKZ,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMrB,EAAMsB,QAA7B,QACA,4BAAQD,QAAS,IAAMrB,EAAMuB,QAA7B,QACA,6BACA,6BACGX,EADH,MACeC,IAGjB,yBAAKE,MAAO,CAAES,WAAY,MACxB,kBAAC,gBAAD,CACElB,MAAO,IACPC,OAAQ,IACRqB,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNP,UAAWA,EACXzB,MAAOA,EACPiC,4BAA6B,a,iCCjDvC,OAAe,4gE,iCCAf,oCAGAlC,mCAEe,eACb,MAAOmC,EAAKC,GAAUC,mBAAmB,IAAM,IAEzCpC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,qFAAqF,CAC/GC,OAAQC,gBAEZ,IAqBF,OAlBAiC,oBAAU,KAER,MAAMC,EAAuBtC,EAAMuC,SAASC,UAAWD,IACrDJ,EAAOM,GAAW,IAAIA,EAAU,eAAcC,KAAKC,MAAiB,IAAXJ,UAIrDK,EAAoB5C,EAAMA,MAAMwC,UAAWnC,IAC/CwC,QAAQC,KAAK,oBAAqBzC,GAClC8B,EAAOM,GAAW,IAAIA,EAAU,YAAD,OAAYpC,QAAZ,IAAYA,OAAZ,EAAYA,EAAkB0C,cAG/D,MAAO,KACLT,EAAqBU,cACrBJ,EAAkBI,gBAEnB,CAAChD,IAGF,wBAAIe,MAAO,CAAEkC,SAAU,KACpBf,EAAIxB,IAAI,CAACwC,EAAMC,IACd,wBAAIC,IAAKD,GAAID,O,iCCrCrB,OAAe,k2C,iCCAf,oCASAnD,mCAEe,eACb,MAAMC,EAA0BC,kBAC9B,IACE,IAAIC,yBAAwB,qFAAqF,CAC/GC,OAAQC,gBAEZ,IAGF,OACE,kBAAC,gBAAD,CACEE,MAAO,IACPC,OAAQ,IACRqB,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNP,UAAWC,KAAKC,MAChB3B,MAAOA,EACPiC,4BAA6B,W,iCC/BnC,OAAe,ivC,iCCAf,6CASAlC,mCAEe,eACb,MAAOmC,EAAKC,GAAUC,mBAAmB,IAAM,IAEzCpC,EAAkCC,kBACtC,IACE,IAAIO,yBACFC,EAAOC,IAAIC,GAAM,yEAAwEA,KACzF,CAAER,OAAQC,gBAEd,KAGKiD,EAAYC,GAAiBlB,mBAAiB,IAAMpC,EAAMuD,YA0BjE,OAxBAlB,oBAAU,KAER,MAAMC,EAAuBtC,EAAMuC,SAASC,UAAWD,IACrDJ,EAAOM,GAAW,IAAIA,EAAU,eAAcC,KAAKC,MAAiB,IAAXJ,UAIrDK,EAAoB5C,EAAMA,MAAMwC,UAAWnC,IAC/CwC,QAAQC,KAAK,oBAAqBzC,GAClC8B,EAAOM,GAAW,IAAIA,EAAU,YAAD,OAAYpC,QAAZ,IAAYA,OAAZ,EAAYA,EAAkB0C,cAIzDS,EAAoBxD,EAAMyD,MAAMjB,UAAWa,IAC/CC,EAAcD,KAGhB,MAAO,KACLf,EAAqBU,cACrBJ,EAAkBI,cAClBQ,EAAkBR,gBAEnB,CAAChD,IAGF,oCACE,yBAAKe,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,KAAM,EAAGC,QAAS,GAAIC,gBAAiB,SACjF,4BAAQC,QAAS,IAAMrB,EAAMsB,QAA7B,QACA,4BAAQD,QAAS,IAAMrB,EAAMuB,QAA7B,QACA,6BACA,6BACG8B,EADH,MACkBrD,EAAM0D,WAG1B,wBAAI3C,MAAO,CAAEkC,SAAU,GAAIzB,WAAY,MACpCU,EAAIxB,IAAI,CAACwC,EAAMC,IACd,wBAAIC,IAAKD,GAAID,Q,iCC7DvB,OAAe,ymE,iCCAf,4CAUAnD,mCAEe,eACb,MAAO4D,EAAOC,GAAYxB,mBAA0B,MAE9CyB,EAAaC,sBAAaC,IAC9BA,EAAMC,iBACND,EAAME,aAAaC,WAAa,QAC/B,IAEGC,EAASL,sBAAaC,IAC1BA,EAAMC,iBAEFD,EAAME,aAAaN,MAAMD,OAAS,GAAK,QAAQU,KAAKL,EAAME,aAAaN,MAAM,GAAGU,OAClFT,EAASG,EAAME,aAAaN,QAE7B,IAEG3D,EAAiCC,kBACrC,IACE0D,GAASA,EAAMD,OAAS,EACpB,IAAIY,6BAA2BX,EAAM,GAAI,CACvCxD,OAAQC,gBAEV,KACN,CAACuD,IAGH,OAAO3D,EACL,kBAAC,gBAAD,CACEM,MAAO,IACPC,OAAQ,IACRqB,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,QAAQ,EACRC,MAAM,EACNP,UAAWC,KAAKC,MAChB3B,MAAOA,EACPiC,4BAA6B,SAG/B,kBAACsC,EAAD,CAAYJ,OAAQA,EAAQN,WAAYA,GAAxC,mBAMJ,MAAMU,EAAaC,UAAOC,GAAI;;;;;;;;;;;oCC1D9B,OAAe,0oE,iCCCf,+EAOA,MAKMC,EAAc,GAIL,SAASC,GAAW,WACjCC,KACGC,IAEH,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,sBAAI,0BAAYC,WAAW,MAAO,+BAClC,qBAAG,0BAAYA,WAAW,KAAM,eAA4B,yCAAU,0BAAYA,WAAW,KAAM,qBAAkC,6DACrI,qBAAK,6EAAqB,+BAAGA,WAAW,KAAQ,CAC5C,KAAQ,sDACL,qDAAyD,iFAChE,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,kkBAWP,sBAAI,0BAAYA,WAAW,MAAO,6DAClC,qBAAK,mJACL,YAAC,UAAD,CAASC,QAASC,YAAU,4CAAD,aAAC,KAAD,SAAC,KAAD,6GAA+CH,QAAQ,WACpF,YAAC,UAAD,CAASvE,OAAQ,IAAKQ,MAAO,CACvBmE,UAAW,QACVJ,QAAQ,aAEb,8BACE,iBAAGC,WAAW,cAAa,0BAAYA,WAAW,KAAM,mBAAgC,KAAI,0BAAYA,WAAW,KAAM,cAA2B,iBAAM,0BAAYA,WAAW,KAAM,oBAAiC,wEAAgB,kBAAIA,WAAW,MAAW,KACtQ,0BAAYA,WAAW,KAAM,sCAAmD,UAAI,0BAAYA,WAAW,KAAM,yCAAsD,6HAErK,qBAAG,0BAAYA,WAAW,KAAM,cAA2B,uGAC3D,YAAC,UAAD,CAASC,QAASC,YAAU,8BAAD,aAAC,KAAD,SAAC,KAAD,+FAAiCH,QAAQ,WACtE,YAAC,UAAD,CAASvE,OAAQ,IAAKuE,QAAQ,aAE5B,qBAAG,0BAAYC,WAAW,KAAM,mBAAgC,kJAChE,YAAC,UAAD,CAASC,QAASC,YAAU,mCAAD,aAAC,KAAD,SAAC,KAAD,oGAAsCH,QAAQ,WAC3E,YAAC,UAAD,CAASvE,OAAQ,IAAKuE,QAAQ,aAE5B,sBAAI,0BAAYC,WAAW,MAAO,6DAClC,qBAAK,6KACL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBACV,8sBAeP,qBAAG,0BAAYA,WAAW,KAAM,oBAAiC,6LACjE,YAAC,UAAD,CAASC,QAASC,YAAU,4CAAD,aAAC,KAAD,SAAC,KAAD,6GAA+CH,QAAQ,WACpF,YAAC,UAAD,CAASvE,OAAQ,IAAKQ,MAAO,CACvBmE,UAAW,QACVJ,QAAQ,aAEb,qBAAK,kCAAQ,0BAAYC,WAAW,KAAM,cAA2B,gGACrE,YAAC,UAAD,CAASC,QAASC,YAAU,wCAAD,aAAC,KAAD,SAAC,KAAD,yGAA2CH,QAAQ,WAChF,YAAC,UAAD,CAASvE,OAAQ,IAAKuE,QAAQ,aAE5B,qBAAG,0BAAYC,WAAW,KAAM,mBAAgC,kJAChE,YAAC,UAAD,CAASC,QAASC,YAAU,6CAAD,aAAC,KAAD,SAAC,KAAD,8GAAgDH,QAAQ,WACrF,YAAC,UAAD,CAASvE,OAAQ,IAAKuE,QAAQ,aAE5B,sBAAI,0BAAYC,WAAW,MAAO,iEAClC,qBAAK,8HACL,YAAC,UAAD,CAASC,QAASC,YAAU,gDAAD,aAAC,KAAD,SAAC,KAAD,iHAAmDH,QAAQ,WACxF,YAAC,UAAD,CAASvE,OAAQ,IAAKuE,QAAQ,cAMhCH,EAAWQ,gBAAiB","file":"6.449d196bc49e07f7e487.js","sourcesContent":["import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  DCMImage,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return <DCMImage cornerstoneImage={image} width={200} height={260} />;\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  DCMImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return <DCMImage cornerstoneImage={image} width={200} height={260} />;\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  DCMImage,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n      </div>\n      <div style={{ marginLeft: 120 }}>\n        <DCMImage cornerstoneImage={image} width={200} height={260} />\n      </div>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  DCMImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n      </div>\\n      <div style={{ marginLeft: 120 }}>\\n        <DCMImage cornerstoneImage={image} width={200} height={260} />\\n      </div>\\n    </>\\n  );\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  InsightViewer,\n  installWADOImageLoader,\n  unloadImage,\n  useSeriesImagePosition,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const { current, end } = useSeriesImagePosition(image);\n\n  // Render 때마다 resetTime이 변경되지 않도록, Memo 값을 만든다\n  const resetTime = useMemo(() => Date.now(), []);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {current} / {end}\n        </div>\n      </div>\n      <div style={{ marginLeft: 120 }}>\n        <InsightViewer\n          width={400}\n          height={500}\n          invert={false} // 색상을 반전한다\n          flip={false} // 이미지를 좌우로 뒤집는다\n          pan={true} // Pan Interaction을 활성화 한다\n          adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n          zoom={true} // Zoom Interaction을 활성화 한다\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n          image={image}\n          updateCornerstoneRenderData={() => {}}\n        />\n      </div>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  InsightViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n  useSeriesImagePosition,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const { current, end } = useSeriesImagePosition(image);\\n\\n  // Render 때마다 resetTime이 변경되지 않도록, Memo 값을 만든다\\n  const resetTime = useMemo(() => Date.now(), []);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {current} / {end}\\n        </div>\\n      </div>\\n      <div style={{ marginLeft: 120 }}>\\n        <InsightViewer\\n          width={400}\\n          height={500}\\n          invert={false} // 색상을 반전한다\\n          flip={false} // 이미지를 좌우로 뒤집는다\\n          pan={true} // Pan Interaction을 활성화 한다\\n          adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n          zoom={true} // Zoom Interaction을 활성화 한다\\n          resetTime={resetTime} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n          image={image}\\n          updateCornerstoneRenderData={() => {}}\\n        />\\n      </div>\\n    </>\\n  );\\n};\\n\"","import { CornerstoneImage, CornerstoneSingleImage, installWADOImageLoader, unloadImage } from '@lunit/insight-viewer';\nimport React, { useEffect, useMemo, useState } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [log, setLog] = useState<string[]>(() => []);\n\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  useEffect(() => {\n    // progress 정보를 받는다\n    const progressSubscription = image.progress.subscribe((progress: number) => {\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\n    });\n\n    // image 정보를 받는다\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\n      console.warn('cornerstoneImage:', cornerstoneImage);\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\n    });\n\n    return () => {\n      progressSubscription.unsubscribe();\n      imageSubscription.unsubscribe();\n    };\n  }, [image]);\n\n  return (\n    <ul style={{ fontSize: 11 }}>\n      {log.map((line, i) => (\n        <li key={i}>{line}</li>\n      ))}\n    </ul>\n  );\n};\n","export default \"import { CornerstoneImage, CornerstoneSingleImage, installWADOImageLoader, unloadImage } from '@lunit/insight-viewer';\\nimport React, { useEffect, useMemo, useState } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>(() => []);\\n\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  useEffect(() => {\\n    // progress 정보를 받는다\\n    const progressSubscription = image.progress.subscribe((progress: number) => {\\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\\n    });\\n\\n    // image 정보를 받는다\\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\\n      console.warn('cornerstoneImage:', cornerstoneImage);\\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\\n    });\\n\\n    return () => {\\n      progressSubscription.unsubscribe();\\n      imageSubscription.unsubscribe();\\n    };\\n  }, [image]);\\n\\n  return (\\n    <ul style={{ fontSize: 11 }}>\\n      {log.map((line, i) => (\\n        <li key={i}>{line}</li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\"","import {\n  CornerstoneImage,\n  CornerstoneSingleImage,\n  InsightViewer,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useMemo } from 'react';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const image: CornerstoneImage = useMemo(\n    () =>\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\n        unload: unloadImage,\n      }),\n    [],\n  );\n\n  return (\n    <InsightViewer\n      width={400}\n      height={500}\n      invert={false} // 색상을 반전한다\n      flip={false} // 이미지를 좌우로 뒤집는다\n      pan={true} // Pan Interaction을 활성화 한다\n      adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n      zoom={true} // Zoom Interaction을 활성화 한다\n      resetTime={Date.now()} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n      image={image}\n      updateCornerstoneRenderData={() => {}}\n    />\n  );\n};\n","export default \"import {\\n  CornerstoneImage,\\n  CornerstoneSingleImage,\\n  InsightViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useMemo } from 'react';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const image: CornerstoneImage = useMemo(\\n    () =>\\n      new CornerstoneSingleImage(`wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/CT000010.dcm`, {\\n        unload: unloadImage,\\n      }),\\n    [],\\n  );\\n\\n  return (\\n    <InsightViewer\\n      width={400}\\n      height={500}\\n      invert={false} // 색상을 반전한다\\n      flip={false} // 이미지를 좌우로 뒤집는다\\n      pan={true} // Pan Interaction을 활성화 한다\\n      adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n      zoom={true} // Zoom Interaction을 활성화 한다\\n      resetTime={Date.now()} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n      image={image}\\n      updateCornerstoneRenderData={() => {}}\\n    />\\n  );\\n};\\n\"","import {\n  CornerstoneSequenceImage,\n  CornerstoneSeriesImage,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport series from '../../../__fixtures__/series.json';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [log, setLog] = useState<string[]>(() => []);\n\n  const image: CornerstoneSequenceImage = useMemo(\n    () =>\n      new CornerstoneSeriesImage(\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\n        { unload: unloadImage },\n      ),\n    [],\n  );\n\n  const [imageIndex, setImageIndex] = useState<number>(() => image.getIndex());\n\n  useEffect(() => {\n    // progress 정보를 받는다\n    const progressSubscription = image.progress.subscribe((progress: number) => {\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\n    });\n\n    // image 정보를 받는다\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\n      console.warn('cornerstoneImage:', cornerstoneImage);\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\n    });\n\n    // index 정보를 받는다\n    const indexSubscription = image.index.subscribe((imageIndex: number) => {\n      setImageIndex(imageIndex);\n    });\n\n    return () => {\n      progressSubscription.unsubscribe();\n      imageSubscription.unsubscribe();\n      indexSubscription.unsubscribe();\n    };\n  }, [image]);\n\n  return (\n    <>\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\n        <button onClick={() => image.prev()}>PREV</button>\n        <button onClick={() => image.next()}>NEXT</button>\n        <hr />\n        <div>\n          {imageIndex} / {image.length()}\n        </div>\n      </div>\n      <ul style={{ fontSize: 11, marginLeft: 120 }}>\n        {log.map((line, i) => (\n          <li key={i}>{line}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","export default \"import {\\n  CornerstoneSequenceImage,\\n  CornerstoneSeriesImage,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { useEffect, useMemo, useState } from 'react';\\nimport series from '../../../__fixtures__/series.json';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [log, setLog] = useState<string[]>(() => []);\\n\\n  const image: CornerstoneSequenceImage = useMemo(\\n    () =>\\n      new CornerstoneSeriesImage(\\n        series.map(p => `wadouri:https://lunit-io.github.io/frontend-fixtures/dcm-files/series/${p}`),\\n        { unload: unloadImage },\\n      ),\\n    [],\\n  );\\n\\n  const [imageIndex, setImageIndex] = useState<number>(() => image.getIndex());\\n\\n  useEffect(() => {\\n    // progress 정보를 받는다\\n    const progressSubscription = image.progress.subscribe((progress: number) => {\\n      setLog(prevLog => [...prevLog, `[progress]: ${Math.floor(progress * 100)}%`]);\\n    });\\n\\n    // image 정보를 받는다\\n    const imageSubscription = image.image.subscribe((cornerstoneImage: cornerstone.Image | null) => {\\n      console.warn('cornerstoneImage:', cornerstoneImage);\\n      setLog(prevLog => [...prevLog, `[image]: ${cornerstoneImage?.imageId}`]);\\n    });\\n\\n    // index 정보를 받는다\\n    const indexSubscription = image.index.subscribe((imageIndex: number) => {\\n      setImageIndex(imageIndex);\\n    });\\n\\n    return () => {\\n      progressSubscription.unsubscribe();\\n      imageSubscription.unsubscribe();\\n      indexSubscription.unsubscribe();\\n    };\\n  }, [image]);\\n\\n  return (\\n    <>\\n      <div style={{ position: 'absolute', top: 0, left: 0, padding: 10, backgroundColor: 'gray' }}>\\n        <button onClick={() => image.prev()}>PREV</button>\\n        <button onClick={() => image.next()}>NEXT</button>\\n        <hr />\\n        <div>\\n          {imageIndex} / {image.length()}\\n        </div>\\n      </div>\\n      <ul style={{ fontSize: 11, marginLeft: 120 }}>\\n        {log.map((line, i) => (\\n          <li key={i}>{line}</li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n};\\n\"","import {\n  CornerstoneFileSingleImage,\n  CornerstoneImage,\n  InsightViewer,\n  installWADOImageLoader,\n  unloadImage,\n} from '@lunit/insight-viewer';\nimport React, { DragEvent, useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components';\n\ninstallWADOImageLoader();\n\nexport default () => {\n  const [files, setFiles] = useState<FileList | null>(null);\n\n  const onDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }, []);\n\n  const onDrop = useCallback((event: DragEvent<HTMLDivElement>) => {\n    event.preventDefault();\n\n    if (event.dataTransfer.files.length > 0 && /.dcm$/.test(event.dataTransfer.files[0].name)) {\n      setFiles(event.dataTransfer.files);\n    }\n  }, []);\n\n  const image: CornerstoneImage | null = useMemo(\n    () =>\n      files && files.length > 0\n        ? new CornerstoneFileSingleImage(files[0], {\n            unload: unloadImage,\n          })\n        : null,\n    [files],\n  );\n\n  return image ? (\n    <InsightViewer\n      width={400}\n      height={500}\n      invert={false} // 색상을 반전한다\n      flip={false} // 이미지를 좌우로 뒤집는다\n      pan={true} // Pan Interaction을 활성화 한다\n      adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\n      zoom={true} // Zoom Interaction을 활성화 한다\n      resetTime={Date.now()} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\n      image={image}\n      updateCornerstoneRenderData={() => {}}\n    />\n  ) : (\n    <DropTarget onDrop={onDrop} onDragOver={onDragOver}>\n      Drop dcm File!\n    </DropTarget>\n  );\n};\n\nconst DropTarget = styled.div`\n  width: 200px;\n  height: 200px;\n  background-color: red;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  left: 10px;\n  top: 10px;\n`;\n","export default \"import {\\n  CornerstoneFileSingleImage,\\n  CornerstoneImage,\\n  InsightViewer,\\n  installWADOImageLoader,\\n  unloadImage,\\n} from '@lunit/insight-viewer';\\nimport React, { DragEvent, useCallback, useMemo, useState } from 'react';\\nimport styled from 'styled-components';\\n\\ninstallWADOImageLoader();\\n\\nexport default () => {\\n  const [files, setFiles] = useState<FileList | null>(null);\\n\\n  const onDragOver = useCallback((event: DragEvent<HTMLDivElement>) => {\\n    event.preventDefault();\\n    event.dataTransfer.dropEffect = 'copy';\\n  }, []);\\n\\n  const onDrop = useCallback((event: DragEvent<HTMLDivElement>) => {\\n    event.preventDefault();\\n\\n    if (event.dataTransfer.files.length > 0 && /.dcm$/.test(event.dataTransfer.files[0].name)) {\\n      setFiles(event.dataTransfer.files);\\n    }\\n  }, []);\\n\\n  const image: CornerstoneImage | null = useMemo(\\n    () =>\\n      files && files.length > 0\\n        ? new CornerstoneFileSingleImage(files[0], {\\n            unload: unloadImage,\\n          })\\n        : null,\\n    [files],\\n  );\\n\\n  return image ? (\\n    <InsightViewer\\n      width={400}\\n      height={500}\\n      invert={false} // 색상을 반전한다\\n      flip={false} // 이미지를 좌우로 뒤집는다\\n      pan={true} // Pan Interaction을 활성화 한다\\n      adjust={false} // Adjust Interaction을 활성화 한다 (Pan과 동시에 사용할 수 없다)\\n      zoom={true} // Zoom Interaction을 활성화 한다\\n      resetTime={Date.now()} // 이 값이 변경되면 Pan, Adjust, Zoom 상태가 초기화 된다\\n      image={image}\\n      updateCornerstoneRenderData={() => {}}\\n    />\\n  ) : (\\n    <DropTarget onDrop={onDrop} onDragOver={onDragOver}>\\n      Drop dcm File!\\n    </DropTarget>\\n  );\\n};\\n\\nconst DropTarget = styled.div`\\n  width: 200px;\\n  height: 200px;\\n  background-color: red;\\n  color: white;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: absolute;\\n  left: 10px;\\n  top: 10px;\\n`;\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`interface CornerstoneImage`}</inlineCode></h1>\n    <p><inlineCode parentName=\"p\">{`cornerstone`}</inlineCode>{`에서 사용되는 `}<inlineCode parentName=\"p\">{`cornerstone.Image`}</inlineCode>{` 데이터를 만들어낸다.`}</p>\n    <p>{`RxJs 기반으로 동작하기 때문에 `}<a parentName=\"p\" {...{\n        \"href\": \"https://rxjs-dev.firebaseapp.com/guide/observable\"\n      }}>{`https://rxjs-dev.firebaseapp.com/guide/observable`}</a>{` 문서를 읽어두면 도움이 된다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Observable } from 'rxjs';\n\nexport interface CornerstoneImage {\n  /** cornerstoneImage.image.subscribe() 로 cornerstone.Image를 받을 수 있다 */\n  readonly image: Observable<cornerstone.Image | null>;\n  /** cornerstoneImage.progress.subscribe() 로 로딩 상태를 0 ~ 1의 값으로 얻을 수 있다 */\n  readonly progress: Observable<number>;\n  /** cornerstoneImage.destroy() 로 현재 Image를 Cache에서 삭제한다 */\n  destroy: () => void;\n}\n`}</code></pre>\n    <h1><inlineCode parentName=\"h1\">{`class CornerstoneSingleImage implements CornerstoneImage`}</inlineCode></h1>\n    <p>{`1장의 이미지만 사용하면 되는 경우 사용할 수 있다. (CXR, MMG...)`}</p>\n    <Example example={component('./CornerstoneImage/CornerstoneSingleImage')} mdxType=\"Example\">\n  <Preview height={200} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<DCMImage>`}</inlineCode>{` 또는 `}<inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{`를 사용하는 모든 기능들은`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`cornerstoneImage.image.subscribe()`}</inlineCode>{`와 `}<inlineCode parentName=\"p\">{`cornerstoneImage.progress.subscribe()`}</inlineCode>{`를 내부적으로 사용해서 기능을 구현하고 있다.`}</p>\n    </blockquote>\n    <p><inlineCode parentName=\"p\">{`<DCMImage>`}</inlineCode>{` Component를 사용해서 단순 화면 출력하거나,`}</p>\n    <Example example={component('./CornerstoneImage/DCMImage')} mdxType=\"Example\">\n  <Preview height={280} mdxType=\"Preview\" />\n    </Example>\n    <p><inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{` Component를 사용해서 User Interaction이 가능한 형태로 출력할 수 있다.`}</p>\n    <Example example={component('./CornerstoneImage/InsightViewer')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`class CornerstoneSeriesImage implements CornerstoneImage`}</inlineCode></h1>\n    <p>{`여러장의 이미지를 연속해서 보여주는 DBT 같은 경우 사용할 수 있다.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface CornerstoneSeriesImage extends CornerstoneImage {\n  /** 총 이미지 갯수 */\n  length: () => number;\n  /** 현재 보여주고 있는 Image의 index number */\n  getIndex: () => number;\n  /** cornerstoneImage.index.subscribe() 로 현재 보여주고 있는 Image의 index number를 받을 수 있다 */\n  readonly index: Observable<number>;\n  /** 다음 Image 보기 */\n  next: (delta?: number) => void;\n  /** 이전 Image 보기 */\n  prev: (delta?: number) => void;\n  /** 특정 index number의 Image 보기 */\n  goto: (index: number) => void;\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`CornerstoneImage`}</inlineCode>{`를 상속 받아서 여러장의 이미지를 제어할 수 있는 기능들이 더해져 있다.`}</p>\n    <Example example={component('./CornerstoneImage/CornerstoneSeriesImage')} mdxType=\"Example\">\n  <Preview height={500} style={{\n        overflowY: 'auto'\n      }} mdxType=\"Preview\" />\n    </Example>\n    <p>{`마찬가지로 `}<inlineCode parentName=\"p\">{`<DCMImage>`}</inlineCode>{` Component를 사용해서 화면에 출력하거나,`}</p>\n    <Example example={component('./CornerstoneImage/DCMImageWithSeries')} mdxType=\"Example\">\n  <Preview height={280} mdxType=\"Preview\" />\n    </Example> \n    <p><inlineCode parentName=\"p\">{`<InsightViewer>`}</inlineCode>{` Component를 사용해서 User Interaction이 가능한 형태로 출력할 수 있다.`}</p>\n    <Example example={component('./CornerstoneImage/InsightViewerWithSeries')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`class CornerstoneFileSingleImage implements CornerstoneImage`}</inlineCode></h1>\n    <p>{`Drop Handling 처럼 File을 다뤄야 하는 경우 사용할 수 있다.`}</p>\n    <Example example={component('./CornerstoneImage/CornerstoneFileSingleImage')} mdxType=\"Example\">\n  <Preview height={520} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/_packages/@lunit/heatmap/draw/getRGBArray.ts","webpack:///./src/_packages/@lunit/heatmap/draw/getRGBAArray.ts","webpack:///./src/_packages/@lunit/heatmap/draw/getAlpha.ts","webpack:///./src/_packages/@lunit/heatmap/hooks/useHeatmapScaleImageURI.ts","webpack:///./src/_packages/@lunit/heatmap/components/HeatmapScaleSVGImage.tsx","webpack:///./src/_packages/@lunit/heatmap/draw/posMapToImageData.ts","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/useHeatmapScaleImageURIPreview.png","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/heatmapScaleSVGImagePreview.png","webpack:///./src/_packages/@lunit/heatmap/hooks/useHeatmapScaleImageURI.ts?f60c","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/useHeatmapScaleImageURI.tsx","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/useHeatmapScaleImageURI.tsx?ceee","webpack:///./src/_packages/@lunit/heatmap/components/HeatmapScaleSVGImage.tsx?d9db","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/HeatmapScaleSVGImage.tsx","webpack:///./src/_packages/@lunit/heatmap/__pages__/Samples/HeatmapScaleSVGImage.tsx?e9a8","webpack:///./src/_packages/@lunit/heatmap/__pages__/HeatmapIndicator.mdx"],"names":["getRGBArray","value","r","g","b","v","Math","max","min","getRGBAArray","stop","threshold","alpha","getAlpha","useHeatmapScaleImageURI","width","height","useMemo","canvas","document","createElement","ratio","window","devicePixelRatio","w","h","setAttribute","toString","ctx","getContext","i","beginPath","fillStyle","fillRect","closePath","toDataURL","HeatmapScaleSVGImage","imageProps","dataUri","xlinkHref","posMapToImageData","posMap","length","imageData","createImageData","imageDataRgbaMap","data","y","x","pos","module","exports","src","style","backgroundColor","alt","fill","layoutProps","MDXContent","components","props","mdxType","parentName","example","source","api","useHeatmapScaleImageURIPreview","maxWidth","component","heatmapScaleSVGImagePreview","isMDXComponent"],"mappings":"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","file":"8.33142dac79809afd5963.js","sourcesContent":["export function getRGBArray(value: number): [number, number, number] {\n  let r: number, g: number, b: number;\n  const v: number = Math.max(Math.min(value, 1), 0);\n\n  if (v < 0.25) {\n    r = 0;\n    g = 4 * v;\n    b = 1;\n  } else if (v < 0.5) {\n    r = 0;\n    g = 1;\n    b = 1 + 4 * (0.25 - v);\n  } else if (v < 0.75) {\n    r = 4 * (v - 0.5);\n    g = 1;\n    b = 0;\n  } else {\n    r = 1;\n    g = 1 + 4 * (0.75 - v);\n    b = 0;\n  }\n\n  return [(r * 255) << 0, (g * 255) << 0, (b * 255) << 0];\n}\n","import { getAlpha } from './getAlpha';\nimport { getRGBArray } from './getRGBArray';\n\nexport function getRGBAArray({\n  stop,\n  threshold,\n}: {\n  stop: number;\n  threshold: number;\n}): [number, number, number, number] {\n  const alpha: number = getAlpha({ stop, threshold });\n\n  if (alpha <= 0) return [0, 0, 0, 0];\n\n  const [r, g, b] = getRGBArray(stop);\n\n  return [r, g, b, alpha];\n}\n","export function getAlpha({ stop, threshold }: { stop: number; threshold: number }): number {\n  return stop < threshold ? 0 : ((stop - threshold) * 0.75) / (1 - threshold);\n}\n","import { useMemo } from 'react';\nimport { getRGBAArray } from '../draw/getRGBAArray';\n\ninterface UseHeatmapScaleImageURIParameters {\n  width: number;\n  height: number;\n  threshold: number;\n}\n\n/**\n * `width x height` 사이즈의 Reactangle Image를 만들어준다. Image는 Data URI 형태로 전달되기 때문에 `<img src={uri}/>`나 `<image xlink:href={uri}/>`로 사용할 수 있다.\n */\nexport function useHeatmapScaleImageURI({\n  width,\n  height,\n  threshold,\n}: UseHeatmapScaleImageURIParameters): string | null {\n  return useMemo<string | null>(() => {\n    const canvas: HTMLCanvasElement | null = document.createElement('canvas');\n    if (!canvas) return null;\n\n    const ratio: number = window.devicePixelRatio;\n    const w: number = width * ratio;\n    const h: number = height * ratio;\n\n    canvas.setAttribute('width', w.toString());\n    canvas.setAttribute('height', h.toString());\n\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\n    if (!ctx) return null;\n\n    let i: number = w + 1;\n    while (--i >= 0) {\n      ctx.beginPath();\n      ctx.fillStyle = `rgba(${getRGBAArray({ stop: i / w, threshold })})`;\n      ctx.fillRect(i, 0, 1, h);\n      ctx.closePath();\n    }\n\n    return canvas.toDataURL();\n  }, [threshold, width, height]);\n}\n","import React, { SVGProps } from 'react';\nimport { useHeatmapScaleImageURI } from '../hooks/useHeatmapScaleImageURI';\n\nexport interface HeatmapScaleImageProps extends SVGProps<SVGImageElement> {\n  threshold?: number;\n  width: number;\n  height: number;\n}\n\n/**\n * `width x height` 형태의 Rectangle SVG <image/>. <svg> 내에서 사용할 수 있다.\n */\nexport function HeatmapScaleSVGImage({ threshold = 0, width, height, ...imageProps }: HeatmapScaleImageProps) {\n  const dataUri: string | null = useHeatmapScaleImageURI({ width, height, threshold });\n\n  return dataUri ? <image {...imageProps} xlinkHref={dataUri} width={width} height={height} /> : null;\n}\n","import { getRGBArray } from './getRGBArray';\n\n/**\n * posMap data를 ImageData 객체로 변환한다\n *\n * threshold는 보통 CXR=0.15 MMG=0.1 (개별 프로젝트에 따라 확인 필요)\n */\nexport function posMapToImageData(posMap: number[][], threshold: number): ImageData {\n  const width: number = posMap[0].length;\n  const height: number = posMap.length;\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  const ctx: CanvasRenderingContext2D = canvas.getContext('2d')!;\n  const imageData: ImageData = ctx!.createImageData(width, height);\n  // [r, g, b, a, r, g, b, a, ...]\n  const imageDataRgbaMap: Uint8ClampedArray = imageData.data;\n\n  let y: number = -1;\n  while (++y < height) {\n    let x: number = -1;\n    while (++x < width) {\n      // rgba array index position\n      const pos: number = (y * width + x) * 4;\n      const stop: number = posMap[y][x];\n\n      if (stop < threshold) {\n        imageDataRgbaMap[pos] = 0;\n        imageDataRgbaMap[pos + 1] = 0;\n        imageDataRgbaMap[pos + 2] = 0;\n        imageDataRgbaMap[pos + 3] = 0;\n      } else {\n        // eg. threshold = 0.1 / stop = 0.3\n        // <threshold를 제외한 stop 값>(0.3 - 0.1) / <threshold를 제외한 max 값>(1 - 0.1)\n        // 0.2 / 0.9 = 0.222222222\n        const value: number = (stop - threshold) / (1 - threshold);\n        const [r, g, b] = getRGBArray(value);\n        imageDataRgbaMap[pos] = r;\n        imageDataRgbaMap[pos + 1] = g;\n        imageDataRgbaMap[pos + 2] = b;\n        imageDataRgbaMap[pos + 3] = (value * 196) << 0;\n      }\n    }\n  }\n\n  return imageData;\n}\n","module.exports = __webpack_public_path__ + \"useHeatmapScaleImageURIPreview.08bd777f9252ec29f1f8d902ba77d074.png\";","module.exports = __webpack_public_path__ + \"heatmapScaleSVGImagePreview.f34c732a4af62a919218650a196f8320.png\";","export default \"import { useMemo } from 'react';\\nimport { getRGBAArray } from '../draw/getRGBAArray';\\n\\ninterface UseHeatmapScaleImageURIParameters {\\n  width: number;\\n  height: number;\\n  threshold: number;\\n}\\n\\n/**\\n * `width x height` 사이즈의 Reactangle Image를 만들어준다. Image는 Data URI 형태로 전달되기 때문에 `<img src={uri}/>`나 `<image xlink:href={uri}/>`로 사용할 수 있다.\\n */\\nexport function useHeatmapScaleImageURI({\\n  width,\\n  height,\\n  threshold,\\n}: UseHeatmapScaleImageURIParameters): string | null {\\n  return useMemo<string | null>(() => {\\n    const canvas: HTMLCanvasElement | null = document.createElement('canvas');\\n    if (!canvas) return null;\\n\\n    const ratio: number = window.devicePixelRatio;\\n    const w: number = width * ratio;\\n    const h: number = height * ratio;\\n\\n    canvas.setAttribute('width', w.toString());\\n    canvas.setAttribute('height', h.toString());\\n\\n    const ctx: CanvasRenderingContext2D | null = canvas.getContext('2d');\\n    if (!ctx) return null;\\n\\n    let i: number = w + 1;\\n    while (--i >= 0) {\\n      ctx.beginPath();\\n      ctx.fillStyle = `rgba(${getRGBAArray({ stop: i / w, threshold })})`;\\n      ctx.fillRect(i, 0, 1, h);\\n      ctx.closePath();\\n    }\\n\\n    return canvas.toDataURL();\\n  }, [threshold, width, height]);\\n}\\n\"","import { useHeatmapScaleImageURI } from '@lunit/heatmap';\nimport React from 'react';\n\nexport default () => {\n  const width: number = 300;\n  const height: number = 100;\n  const threshold: number = 0.1;\n\n  const dataUri: string | null = useHeatmapScaleImageURI({ width, height, threshold });\n\n  return dataUri ? <img src={dataUri} style={{ width, height, backgroundColor: '#000000' }} alt=\"test\" /> : null;\n};\n","export default \"import { useHeatmapScaleImageURI } from '@lunit/heatmap';\\nimport React from 'react';\\n\\nexport default () => {\\n  const width: number = 300;\\n  const height: number = 100;\\n  const threshold: number = 0.1;\\n\\n  const dataUri: string | null = useHeatmapScaleImageURI({ width, height, threshold });\\n\\n  return dataUri ? <img src={dataUri} style={{ width, height, backgroundColor: '#000000' }} alt=\\\"test\\\" /> : null;\\n};\\n\"","export default \"import React, { SVGProps } from 'react';\\nimport { useHeatmapScaleImageURI } from '../hooks/useHeatmapScaleImageURI';\\n\\nexport interface HeatmapScaleImageProps extends SVGProps<SVGImageElement> {\\n  threshold?: number;\\n  width: number;\\n  height: number;\\n}\\n\\n/**\\n * `width x height` 형태의 Rectangle SVG <image/>. <svg> 내에서 사용할 수 있다.\\n */\\nexport function HeatmapScaleSVGImage({ threshold = 0, width, height, ...imageProps }: HeatmapScaleImageProps) {\\n  const dataUri: string | null = useHeatmapScaleImageURI({ width, height, threshold });\\n\\n  return dataUri ? <image {...imageProps} xlinkHref={dataUri} width={width} height={height} /> : null;\\n}\\n\"","import { HeatmapScaleSVGImage } from '@lunit/heatmap';\nimport React from 'react';\n\nexport default () => {\n  const width: number = 300;\n  const height: number = 100;\n  const threshold: number = 0.1;\n\n  return (\n    <svg width={width} height={height}>\n      <rect width={width} height={height} fill=\"#000000\" />\n      <HeatmapScaleSVGImage width={width} height={height} threshold={threshold} />\n    </svg>\n  );\n};\n","export default \"import { HeatmapScaleSVGImage } from '@lunit/heatmap';\\nimport React from 'react';\\n\\nexport default () => {\\n  const width: number = 300;\\n  const height: number = 100;\\n  const threshold: number = 0.1;\\n\\n  return (\\n    <svg width={width} height={height}>\\n      <rect width={width} height={height} fill=\\\"#000000\\\" />\\n      <HeatmapScaleSVGImage width={width} height={height} threshold={threshold} />\\n    </svg>\\n  );\\n};\\n\"","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { component, source } from '@handbook/source';\nimport { Example, Preview } from '@handbook/components';\nimport useHeatmapScaleImageURIPreview from './Samples/useHeatmapScaleImageURIPreview.png';\nimport heatmapScaleSVGImagePreview from './Samples/heatmapScaleSVGImagePreview.png';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1><inlineCode parentName=\"h1\">{`useHeatmapScaleImageURI()`}</inlineCode></h1>\n    <p>{`UI 상에서 Heatmap Scale Indicator를 만들때 사용한다.`}</p>\n    <Example example={source('../hooks/useHeatmapScaleImageURI')} api mdxType=\"Example\" />\n    <p><inlineCode parentName=\"p\">{`<canvas>`}</inlineCode>{`에 렌더링 할 때 필요하며, 보통의 경우 `}<inlineCode parentName=\"p\">{`<HeatmapScaleSVGImage>`}</inlineCode>{`를 사용하면 된다.`}</p>\n    <img src={useHeatmapScaleImageURIPreview} style={{\n      maxWidth: 600\n    }} />\n    <Example example={component('./Samples/useHeatmapScaleImageURI')} mdxType=\"Example\">\n  <Preview height={120} mdxType=\"Preview\" />\n    </Example>\n    <h1><inlineCode parentName=\"h1\">{`<HeatmapScaleSVGImage>`}</inlineCode></h1>\n    <Example example={source('../components/HeatmapScaleSVGImage')} api mdxType=\"Example\" />\n    <p><inlineCode parentName=\"p\">{`useHeatmapScaleImageURI()`}</inlineCode>{`를 SVG `}<inlineCode parentName=\"p\">{`<image>`}</inlineCode>{`로 만들어준다.`}</p>\n    <img src={heatmapScaleSVGImagePreview} style={{\n      maxWidth: 800\n    }} />\n    <p>{`SVG로 Scale Indicator를 만들려할때 간단하게 사용할 수 있다.`}</p>\n    <Example example={component('./Samples/HeatmapScaleSVGImage')} mdxType=\"Example\">\n  <Preview height={120} mdxType=\"Preview\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}